-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity preloadPixelsAndPrec is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    y_V_2 : IN STD_LOGIC_VECTOR (8 downto 0);
    x_V_3 : IN STD_LOGIC_VECTOR (8 downto 0);
    ci_V : IN STD_LOGIC_VECTOR (9 downto 0);
    ch_out_V : IN STD_LOGIC_VECTOR (9 downto 0);
    ci_V_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
    ci_V_out_full_n : IN STD_LOGIC;
    ci_V_out_write : OUT STD_LOGIC;
    ch_out_V_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
    ch_out_V_out_full_n : IN STD_LOGIC;
    ch_out_V_out_write : OUT STD_LOGIC;
    ImageCache_line_wid : IN STD_LOGIC_VECTOR (15 downto 0);
    ImageCache_ch_in_V : IN STD_LOGIC_VECTOR (9 downto 0);
    ImageCache_width_in : IN STD_LOGIC_VECTOR (8 downto 0);
    ImageCache_height_i : IN STD_LOGIC_VECTOR (8 downto 0);
    ImageCache_IBRAM_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    ImageCache_IBRAM_ce0 : OUT STD_LOGIC;
    ImageCache_IBRAM_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    WeightsCache_ch_out : IN STD_LOGIC_VECTOR (9 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of preloadPixelsAndPrec is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal ci_V_out_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ch_out_V_out_blk_n : STD_LOGIC;
    signal ci_V_read_reg_922 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal x_V_3_read_reg_928 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln68_fu_219_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln68_reg_933 : STD_LOGIC_VECTOR (1 downto 0);
    signal ImageCache_line_wid_1_reg_944 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln214_fu_271_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln214_reg_951 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln214_fu_906_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln214_reg_957 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln891_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_reg_964 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_1_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_1_reg_970 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_976 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln891_2_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln891_2_reg_981 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_986 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln68_2_fu_369_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln68_2_reg_992 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln891_3_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln891_3_reg_997 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln891_4_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln891_4_reg_1002 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_1007 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln891_5_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln891_5_reg_1013 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln214_1_fu_912_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln214_1_reg_1018 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal grp_fu_247_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln209_reg_1030 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal mul_ln214_2_fu_917_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln214_2_reg_1035 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln209_1_fu_435_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln209_1_reg_1047 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal add_ln209_fu_438_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln209_reg_1053 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_413_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln209_1_reg_1064 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln138_fu_470_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln138_reg_1079 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal add_ln209_4_fu_486_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln209_4_reg_1089 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln209_8_fu_490_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln209_8_reg_1096 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln891_2_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_2_reg_1103 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal select_ln138_1_fu_524_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln138_1_reg_1109 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln891_3_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_3_reg_1114 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_2_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_2_reg_1120 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_464_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ci_times_ch_out_V_reg_1130 : STD_LOGIC_VECTOR (18 downto 0);
    signal select_ln138_2_fu_570_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln138_2_reg_1135 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal xor_ln891_4_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_4_reg_1145 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal select_ln138_3_fu_615_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln138_3_reg_1151 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln209_7_fu_632_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln209_7_fu_632_p2 : signal is "no";
    signal add_ln209_7_reg_1161 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln209_9_fu_636_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln209_9_fu_636_p2 : signal is "no";
    signal add_ln209_9_reg_1166 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln891_5_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln891_5_reg_1171 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_6_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_6_reg_1177 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln209_10_fu_669_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln209_10_fu_669_p2 : signal is "no";
    signal add_ln209_10_reg_1182 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln209_11_fu_673_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln209_11_fu_673_p2 : signal is "no";
    signal add_ln209_11_reg_1187 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln138_4_fu_695_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln138_4_reg_1192 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln138_5_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_5_reg_1197 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_7_fu_737_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_7_reg_1207 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_8_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_8_reg_1212 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln138_5_fu_761_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln138_5_reg_1217 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln138_6_fu_772_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln138_6_reg_1227 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln138_7_fu_783_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln138_7_reg_1237 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal grp_reg_float_s_fu_794_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reg_float_s_fu_794_ap_ce : STD_LOGIC;
    signal ap_block_state4_pp0_stage3_iter0_ignore_call47 : BOOLEAN;
    signal ap_block_state13_pp0_stage3_iter1_ignore_call47 : BOOLEAN;
    signal ap_block_pp0_stage3_11001_ignoreCallOp168 : BOOLEAN;
    signal ap_block_state5_pp0_stage4_iter0_ignore_call47 : BOOLEAN;
    signal ap_block_state14_pp0_stage4_iter1_ignore_call47 : BOOLEAN;
    signal ap_block_pp0_stage4_11001_ignoreCallOp185 : BOOLEAN;
    signal grp_reg_float_s_fu_799_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reg_float_s_fu_799_ap_ce : STD_LOGIC;
    signal ap_block_state4_pp0_stage3_iter0_ignore_call65 : BOOLEAN;
    signal ap_block_state13_pp0_stage3_iter1_ignore_call65 : BOOLEAN;
    signal ap_block_pp0_stage3_11001_ignoreCallOp169 : BOOLEAN;
    signal ap_block_state5_pp0_stage4_iter0_ignore_call65 : BOOLEAN;
    signal ap_block_state14_pp0_stage4_iter1_ignore_call65 : BOOLEAN;
    signal ap_block_pp0_stage4_11001_ignoreCallOp189 : BOOLEAN;
    signal grp_reg_float_s_fu_804_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reg_float_s_fu_804_ap_ce : STD_LOGIC;
    signal ap_block_state4_pp0_stage3_iter0_ignore_call83 : BOOLEAN;
    signal ap_block_state13_pp0_stage3_iter1_ignore_call83 : BOOLEAN;
    signal ap_block_pp0_stage3_11001_ignoreCallOp170 : BOOLEAN;
    signal ap_block_state5_pp0_stage4_iter0_ignore_call83 : BOOLEAN;
    signal ap_block_state14_pp0_stage4_iter1_ignore_call83 : BOOLEAN;
    signal ap_block_pp0_stage4_11001_ignoreCallOp193 : BOOLEAN;
    signal grp_reg_float_s_fu_809_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reg_float_s_fu_809_ap_ce : STD_LOGIC;
    signal ap_block_state4_pp0_stage3_iter0_ignore_call105 : BOOLEAN;
    signal ap_block_state13_pp0_stage3_iter1_ignore_call105 : BOOLEAN;
    signal ap_block_pp0_stage3_11001_ignoreCallOp171 : BOOLEAN;
    signal ap_block_state5_pp0_stage4_iter0_ignore_call105 : BOOLEAN;
    signal ap_block_state14_pp0_stage4_iter1_ignore_call105 : BOOLEAN;
    signal ap_block_pp0_stage4_11001_ignoreCallOp199 : BOOLEAN;
    signal grp_reg_float_s_fu_814_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reg_float_s_fu_814_ap_ce : STD_LOGIC;
    signal ap_block_state4_pp0_stage3_iter0_ignore_call117 : BOOLEAN;
    signal ap_block_state13_pp0_stage3_iter1_ignore_call117 : BOOLEAN;
    signal ap_block_pp0_stage3_11001_ignoreCallOp172 : BOOLEAN;
    signal ap_block_state5_pp0_stage4_iter0_ignore_call117 : BOOLEAN;
    signal ap_block_state14_pp0_stage4_iter1_ignore_call117 : BOOLEAN;
    signal ap_block_pp0_stage4_11001_ignoreCallOp203 : BOOLEAN;
    signal grp_reg_float_s_fu_819_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reg_float_s_fu_819_ap_ce : STD_LOGIC;
    signal ap_block_state4_pp0_stage3_iter0_ignore_call129 : BOOLEAN;
    signal ap_block_state13_pp0_stage3_iter1_ignore_call129 : BOOLEAN;
    signal ap_block_pp0_stage3_11001_ignoreCallOp173 : BOOLEAN;
    signal ap_block_state5_pp0_stage4_iter0_ignore_call129 : BOOLEAN;
    signal ap_block_state14_pp0_stage4_iter1_ignore_call129 : BOOLEAN;
    signal ap_block_pp0_stage4_11001_ignoreCallOp207 : BOOLEAN;
    signal grp_reg_float_s_fu_824_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reg_float_s_fu_824_ap_ce : STD_LOGIC;
    signal ap_block_state4_pp0_stage3_iter0_ignore_call152 : BOOLEAN;
    signal ap_block_state13_pp0_stage3_iter1_ignore_call152 : BOOLEAN;
    signal ap_block_pp0_stage3_11001_ignoreCallOp174 : BOOLEAN;
    signal ap_block_state5_pp0_stage4_iter0_ignore_call152 : BOOLEAN;
    signal ap_block_state14_pp0_stage4_iter1_ignore_call152 : BOOLEAN;
    signal ap_block_pp0_stage4_11001_ignoreCallOp213 : BOOLEAN;
    signal grp_reg_float_s_fu_829_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reg_float_s_fu_829_ap_ce : STD_LOGIC;
    signal ap_block_state4_pp0_stage3_iter0_ignore_call164 : BOOLEAN;
    signal ap_block_state13_pp0_stage3_iter1_ignore_call164 : BOOLEAN;
    signal ap_block_pp0_stage3_11001_ignoreCallOp175 : BOOLEAN;
    signal ap_block_state5_pp0_stage4_iter0_ignore_call164 : BOOLEAN;
    signal ap_block_state14_pp0_stage4_iter1_ignore_call164 : BOOLEAN;
    signal ap_block_pp0_stage4_11001_ignoreCallOp217 : BOOLEAN;
    signal grp_reg_float_s_fu_841_in_r : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reg_float_s_fu_841_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reg_float_s_fu_841_ap_ce : STD_LOGIC;
    signal ap_block_state4_pp0_stage3_iter0_ignore_call176 : BOOLEAN;
    signal ap_block_state13_pp0_stage3_iter1_ignore_call176 : BOOLEAN;
    signal ap_block_pp0_stage3_11001_ignoreCallOp178 : BOOLEAN;
    signal ap_block_state5_pp0_stage4_iter0_ignore_call176 : BOOLEAN;
    signal ap_block_state14_pp0_stage4_iter1_ignore_call176 : BOOLEAN;
    signal ap_block_pp0_stage4_11001_ignoreCallOp221 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln544_fu_448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_3_fu_481_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln544_4_fu_565_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal zext_ln544_5_fu_581_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal zext_ln544_6_fu_627_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal zext_ln544_7_fu_721_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal zext_ln544_8_fu_768_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_9_fu_779_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln544_10_fu_790_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln68_fu_223_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln214_fu_233_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_247_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln68_1_fu_253_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln68_1_fu_257_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln891_fu_279_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln891_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln68_fu_227_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln891_1_fu_299_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln891_1_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln138_fu_315_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln138_1_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_321_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln138_2_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_i_i_fu_341_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln68_3_fu_395_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_413_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln214_1_fu_421_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_430_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln209_1_fu_443_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln209_1_fu_443_p2 : signal is "no";
    signal grp_fu_464_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_464_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln209_2_fu_477_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln209_2_fu_477_p2 : signal is "no";
    signal grp_fu_430_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln138_3_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln138_4_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_i_i_fu_510_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln138_1_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln138_5_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln138_6_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_i_i_fu_551_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln209_3_fu_532_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln209_3_fu_532_p2 : signal is "no";
    signal add_ln209_5_fu_577_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln209_5_fu_577_p2 : signal is "no";
    signal or_ln138_7_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln138_8_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_i_i_fu_601_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln138_3_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln209_6_fu_623_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln209_6_fu_623_p2 : signal is "no";
    signal or_ln138_11_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln138_12_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_i_i_fu_655_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln138_9_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_i_i_fu_681_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln138_4_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln138_10_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_i_i_fu_707_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln138_13_fu_725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_i_i_fu_729_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln138_14_fu_743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_i_i_fu_747_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln214_fu_906_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln214_1_fu_912_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln214_1_fu_912_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln214_2_fu_917_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln214_2_fu_917_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_247_ce : STD_LOGIC;
    signal grp_fu_413_ce : STD_LOGIC;
    signal grp_fu_430_ce : STD_LOGIC;
    signal grp_fu_464_ce : STD_LOGIC;
    signal ap_return_0_preg : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_6_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_7_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_8_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_9_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_247_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_413_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_430_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_464_p00 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_464_p10 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln214_1_fu_912_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln214_2_fu_917_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln214_fu_906_p10 : STD_LOGIC_VECTOR (15 downto 0);

    component reg_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        in_r : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component fpga_top_mul_16s_2ns_16_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fpga_top_mul_10ns_10ns_19_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component fpga_top_mul_mul_10s_10ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fpga_top_mul_mul_9ns_10ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fpga_top_mul_mul_10ns_10ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    grp_reg_float_s_fu_794 : component reg_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        in_r => select_ln138_reg_1079,
        ap_return => grp_reg_float_s_fu_794_ap_return,
        ap_ce => grp_reg_float_s_fu_794_ap_ce);

    grp_reg_float_s_fu_799 : component reg_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        in_r => select_ln138_1_reg_1109,
        ap_return => grp_reg_float_s_fu_799_ap_return,
        ap_ce => grp_reg_float_s_fu_799_ap_ce);

    grp_reg_float_s_fu_804 : component reg_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        in_r => select_ln138_2_reg_1135,
        ap_return => grp_reg_float_s_fu_804_ap_return,
        ap_ce => grp_reg_float_s_fu_804_ap_ce);

    grp_reg_float_s_fu_809 : component reg_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        in_r => select_ln138_3_reg_1151,
        ap_return => grp_reg_float_s_fu_809_ap_return,
        ap_ce => grp_reg_float_s_fu_809_ap_ce);

    grp_reg_float_s_fu_814 : component reg_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        in_r => select_ln138_4_reg_1192,
        ap_return => grp_reg_float_s_fu_814_ap_return,
        ap_ce => grp_reg_float_s_fu_814_ap_ce);

    grp_reg_float_s_fu_819 : component reg_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        in_r => select_ln138_5_reg_1217,
        ap_return => grp_reg_float_s_fu_819_ap_return,
        ap_ce => grp_reg_float_s_fu_819_ap_ce);

    grp_reg_float_s_fu_824 : component reg_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        in_r => select_ln138_6_reg_1227,
        ap_return => grp_reg_float_s_fu_824_ap_return,
        ap_ce => grp_reg_float_s_fu_824_ap_ce);

    grp_reg_float_s_fu_829 : component reg_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        in_r => select_ln138_7_reg_1237,
        ap_return => grp_reg_float_s_fu_829_ap_return,
        ap_ce => grp_reg_float_s_fu_829_ap_ce);

    grp_reg_float_s_fu_841 : component reg_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        in_r => grp_reg_float_s_fu_841_in_r,
        ap_return => grp_reg_float_s_fu_841_ap_return,
        ap_ce => grp_reg_float_s_fu_841_ap_ce);

    fpga_top_mul_16s_2ns_16_3_1_U2 : component fpga_top_mul_16s_2ns_16_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ImageCache_line_wid,
        din1 => grp_fu_247_p1,
        ce => grp_fu_247_ce,
        dout => grp_fu_247_p2);

    fpga_top_mul_16s_2ns_16_3_1_U3 : component fpga_top_mul_16s_2ns_16_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ImageCache_line_wid_1_reg_944,
        din1 => grp_fu_413_p1,
        ce => grp_fu_413_ce,
        dout => grp_fu_413_p2);

    fpga_top_mul_16s_2ns_16_3_1_U4 : component fpga_top_mul_16s_2ns_16_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ImageCache_line_wid_1_reg_944,
        din1 => grp_fu_430_p1,
        ce => grp_fu_430_ce,
        dout => grp_fu_430_p2);

    fpga_top_mul_10ns_10ns_19_3_1_U5 : component fpga_top_mul_10ns_10ns_19_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_464_p0,
        din1 => grp_fu_464_p1,
        ce => grp_fu_464_ce,
        dout => grp_fu_464_p2);

    fpga_top_mul_mul_10s_10ns_16_1_1_U6 : component fpga_top_mul_mul_10s_10ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 16)
    port map (
        din0 => add_ln68_1_fu_257_p2,
        din1 => mul_ln214_fu_906_p1,
        dout => mul_ln214_fu_906_p2);

    fpga_top_mul_mul_9ns_10ns_16_1_1_U7 : component fpga_top_mul_mul_9ns_10ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 10,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln214_1_fu_912_p0,
        din1 => mul_ln214_1_fu_912_p1,
        dout => mul_ln214_1_fu_912_p2);

    fpga_top_mul_mul_10ns_10ns_16_1_1_U8 : component fpga_top_mul_mul_10ns_10ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln214_2_fu_917_p0,
        din1 => mul_ln214_2_fu_917_p1,
        dout => mul_ln214_2_fu_917_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage8_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv19_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_return_0_preg <= ci_times_ch_out_V_reg_1130;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_return_1_preg <= grp_reg_float_s_fu_794_ap_return;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv32_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_return_2_preg <= grp_reg_float_s_fu_799_ap_return;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv32_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_return_3_preg <= grp_reg_float_s_fu_804_ap_return;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv32_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_return_4_preg <= grp_reg_float_s_fu_809_ap_return;
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv32_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_return_5_preg <= grp_reg_float_s_fu_814_ap_return;
                end if; 
            end if;
        end if;
    end process;


    ap_return_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_6_preg <= ap_const_lv32_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_return_6_preg <= grp_reg_float_s_fu_819_ap_return;
                end if; 
            end if;
        end if;
    end process;


    ap_return_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_7_preg <= ap_const_lv32_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_return_7_preg <= grp_reg_float_s_fu_824_ap_return;
                end if; 
            end if;
        end if;
    end process;


    ap_return_8_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_8_preg <= ap_const_lv32_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_return_8_preg <= grp_reg_float_s_fu_829_ap_return;
                end if; 
            end if;
        end if;
    end process;


    ap_return_9_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_9_preg <= ap_const_lv32_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_return_9_preg <= grp_reg_float_s_fu_841_ap_return;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ImageCache_line_wid_1_reg_944 <= ImageCache_line_wid;
                add_ln68_2_reg_992 <= add_ln68_2_fu_369_p2;
                ci_V_read_reg_922 <= ci_V;
                icmp_ln138_reg_976 <= icmp_ln138_fu_349_p2;
                icmp_ln891_2_reg_981 <= icmp_ln891_2_fu_355_p2;
                icmp_ln891_3_reg_997 <= icmp_ln891_3_fu_375_p2;
                icmp_ln891_4_reg_1002 <= icmp_ln891_4_fu_381_p2;
                icmp_ln891_5_reg_1013 <= icmp_ln891_5_fu_401_p2;
                mul_ln214_reg_957 <= mul_ln214_fu_906_p2;
                select_ln138_5_reg_1217 <= select_ln138_5_fu_761_p3;
                tmp_1_reg_986 <= add_ln68_fu_227_p2(9 downto 9);
                tmp_2_reg_1007 <= add_ln68_1_fu_257_p2(9 downto 9);
                trunc_ln68_reg_933 <= trunc_ln68_fu_219_p1;
                x_V_3_read_reg_928 <= x_V_3;
                xor_ln891_1_reg_970 <= xor_ln891_1_fu_309_p2;
                xor_ln891_reg_964 <= xor_ln891_fu_289_p2;
                    zext_ln214_reg_951(9 downto 0) <= zext_ln214_fu_271_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                add_ln209_10_reg_1182 <= add_ln209_10_fu_669_p2;
                add_ln209_11_reg_1187 <= add_ln209_11_fu_673_p2;
                add_ln209_7_reg_1161 <= add_ln209_7_fu_632_p2;
                add_ln209_9_reg_1166 <= add_ln209_9_fu_636_p2;
                icmp_ln138_6_reg_1177 <= icmp_ln138_6_fu_663_p2;
                select_ln138_3_reg_1151 <= select_ln138_3_fu_615_p3;
                xor_ln891_4_reg_1145 <= xor_ln891_4_fu_586_p2;
                xor_ln891_5_reg_1171 <= xor_ln891_5_fu_640_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                add_ln209_4_reg_1089 <= add_ln209_4_fu_486_p2;
                add_ln209_8_reg_1096 <= add_ln209_8_fu_490_p2;
                select_ln138_reg_1079 <= select_ln138_fu_470_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_ln209_reg_1053 <= add_ln209_fu_438_p2;
                mul_ln209_1_reg_1064 <= grp_fu_413_p2;
                    zext_ln209_1_reg_1047(9 downto 0) <= zext_ln209_1_fu_435_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                ci_times_ch_out_V_reg_1130 <= grp_fu_464_p2;
                icmp_ln138_2_reg_1120 <= icmp_ln138_2_fu_559_p2;
                select_ln138_1_reg_1109 <= select_ln138_1_fu_524_p3;
                xor_ln891_2_reg_1103 <= xor_ln891_2_fu_495_p2;
                xor_ln891_3_reg_1114 <= xor_ln891_3_fu_536_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then
                icmp_ln138_5_reg_1197 <= icmp_ln138_5_fu_715_p2;
                icmp_ln138_7_reg_1207 <= icmp_ln138_7_fu_737_p2;
                icmp_ln138_8_reg_1212 <= icmp_ln138_8_fu_755_p2;
                select_ln138_4_reg_1192 <= select_ln138_4_fu_695_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                mul_ln209_reg_1030 <= grp_fu_247_p2;
                mul_ln214_2_reg_1035 <= mul_ln214_2_fu_917_p2;
                select_ln138_7_reg_1237 <= select_ln138_7_fu_783_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                mul_ln214_1_reg_1018 <= mul_ln214_1_fu_912_p2;
                select_ln138_6_reg_1227 <= select_ln138_6_fu_772_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                select_ln138_2_reg_1135 <= select_ln138_2_fu_570_p3;
            end if;
        end if;
    end process;
    zext_ln214_reg_951(15 downto 10) <= "000000";
    zext_ln209_1_reg_1047(15 downto 10) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage4_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_reset_idle_pp0, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_reset_idle_pp0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;

    ImageCache_IBRAM_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage3, zext_ln544_fu_448_p1, zext_ln544_3_fu_481_p1, ap_block_pp0_stage4, zext_ln544_4_fu_565_p1, ap_block_pp0_stage5, zext_ln544_5_fu_581_p1, ap_block_pp0_stage6, zext_ln544_6_fu_627_p1, ap_block_pp0_stage7, zext_ln544_7_fu_721_p1, ap_block_pp0_stage8, zext_ln544_8_fu_768_p1, zext_ln544_9_fu_779_p1, ap_block_pp0_stage1, zext_ln544_10_fu_790_p1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ImageCache_IBRAM_address0 <= zext_ln544_10_fu_790_p1(15 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ImageCache_IBRAM_address0 <= zext_ln544_9_fu_779_p1(15 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ImageCache_IBRAM_address0 <= zext_ln544_8_fu_768_p1(15 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ImageCache_IBRAM_address0 <= zext_ln544_7_fu_721_p1(15 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            ImageCache_IBRAM_address0 <= zext_ln544_6_fu_627_p1(15 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            ImageCache_IBRAM_address0 <= zext_ln544_5_fu_581_p1(15 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            ImageCache_IBRAM_address0 <= zext_ln544_4_fu_565_p1(15 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ImageCache_IBRAM_address0 <= zext_ln544_3_fu_481_p1(15 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ImageCache_IBRAM_address0 <= zext_ln544_fu_448_p1(15 - 1 downto 0);
        else 
            ImageCache_IBRAM_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    ImageCache_IBRAM_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            ImageCache_IBRAM_ce0 <= ap_const_logic_1;
        else 
            ImageCache_IBRAM_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln209_10_fu_669_p2 <= std_logic_vector(unsigned(add_ln209_8_reg_1096) + unsigned(mul_ln214_1_reg_1018));
    add_ln209_11_fu_673_p2 <= std_logic_vector(unsigned(add_ln209_8_reg_1096) + unsigned(mul_ln214_2_reg_1035));
    add_ln209_1_fu_443_p2 <= std_logic_vector(unsigned(add_ln209_fu_438_p2) + unsigned(mul_ln214_reg_957));
    add_ln209_2_fu_477_p2 <= std_logic_vector(unsigned(mul_ln214_1_reg_1018) + unsigned(add_ln209_reg_1053));
    add_ln209_3_fu_532_p2 <= std_logic_vector(unsigned(mul_ln214_2_reg_1035) + unsigned(add_ln209_reg_1053));
    add_ln209_4_fu_486_p2 <= std_logic_vector(unsigned(mul_ln209_1_reg_1064) + unsigned(zext_ln209_1_reg_1047));
    add_ln209_5_fu_577_p2 <= std_logic_vector(unsigned(add_ln209_4_reg_1089) + unsigned(mul_ln214_reg_957));
    add_ln209_6_fu_623_p2 <= std_logic_vector(unsigned(add_ln209_4_reg_1089) + unsigned(mul_ln214_1_reg_1018));
    add_ln209_7_fu_632_p2 <= std_logic_vector(unsigned(add_ln209_4_reg_1089) + unsigned(mul_ln214_2_reg_1035));
    add_ln209_8_fu_490_p2 <= std_logic_vector(unsigned(grp_fu_430_p2) + unsigned(zext_ln209_1_reg_1047));
    add_ln209_9_fu_636_p2 <= std_logic_vector(unsigned(add_ln209_8_reg_1096) + unsigned(mul_ln214_reg_957));
    add_ln209_fu_438_p2 <= std_logic_vector(unsigned(mul_ln209_reg_1030) + unsigned(zext_ln209_1_fu_435_p1));
    add_ln214_1_fu_421_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(trunc_ln68_reg_933));
    add_ln214_fu_233_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(trunc_ln68_fu_219_p1));
    add_ln68_1_fu_257_p2 <= std_logic_vector(signed(ap_const_lv10_3FF) + signed(zext_ln68_1_fu_253_p1));
    add_ln68_2_fu_369_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(zext_ln68_1_fu_253_p1));
    add_ln68_3_fu_395_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(zext_ln68_fu_223_p1));
    add_ln68_fu_227_p2 <= std_logic_vector(signed(ap_const_lv10_3FF) + signed(zext_ln68_fu_223_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter0, ci_V_out_full_n, ch_out_V_out_full_n)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ch_out_V_out_full_n = ap_const_logic_0) or (ci_V_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter0, ci_V_out_full_n, ch_out_V_out_full_n)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ch_out_V_out_full_n = ap_const_logic_0) or (ci_V_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter0, ci_V_out_full_n, ch_out_V_out_full_n)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ch_out_V_out_full_n = ap_const_logic_0) or (ci_V_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001_ignoreCallOp168 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001_ignoreCallOp169 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001_ignoreCallOp170 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001_ignoreCallOp171 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001_ignoreCallOp172 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001_ignoreCallOp173 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001_ignoreCallOp174 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001_ignoreCallOp175 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001_ignoreCallOp178 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001_ignoreCallOp185 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001_ignoreCallOp189 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001_ignoreCallOp193 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001_ignoreCallOp199 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001_ignoreCallOp203 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001_ignoreCallOp207 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001_ignoreCallOp213 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001_ignoreCallOp217 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001_ignoreCallOp221 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage5_11001_assign_proc : process(ap_done_reg)
    begin
                ap_block_pp0_stage5_11001 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_pp0_stage5_subdone_assign_proc : process(ap_done_reg)
    begin
                ap_block_pp0_stage5_subdone <= (ap_done_reg = ap_const_logic_1);
    end process;

        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage3_iter1_ignore_call105 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage3_iter1_ignore_call117 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage3_iter1_ignore_call129 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage3_iter1_ignore_call152 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage3_iter1_ignore_call164 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage3_iter1_ignore_call176 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage3_iter1_ignore_call47 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage3_iter1_ignore_call65 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage3_iter1_ignore_call83 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage4_iter1_ignore_call105 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage4_iter1_ignore_call117 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage4_iter1_ignore_call129 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage4_iter1_ignore_call152 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage4_iter1_ignore_call164 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage4_iter1_ignore_call176 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage4_iter1_ignore_call47 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage4_iter1_ignore_call65 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage4_iter1_ignore_call83 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, ap_done_reg, ci_V_out_full_n, ch_out_V_out_full_n)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ch_out_V_out_full_n = ap_const_logic_0) or (ci_V_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0_ignore_call105 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0_ignore_call117 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0_ignore_call129 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0_ignore_call152 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0_ignore_call164 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0_ignore_call176 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0_ignore_call47 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0_ignore_call65 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0_ignore_call83 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0_ignore_call105 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0_ignore_call117 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0_ignore_call129 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0_ignore_call152 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0_ignore_call164 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0_ignore_call176 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0_ignore_call47 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0_ignore_call65 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0_ignore_call83 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_done_reg, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ci_times_ch_out_V_reg_1130, ap_return_0_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_return_0 <= ci_times_ch_out_V_reg_1130;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, grp_reg_float_s_fu_794_ap_return, ap_return_1_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_return_1 <= grp_reg_float_s_fu_794_ap_return;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, grp_reg_float_s_fu_799_ap_return, ap_return_2_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_return_2 <= grp_reg_float_s_fu_799_ap_return;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, grp_reg_float_s_fu_804_ap_return, ap_return_3_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_return_3 <= grp_reg_float_s_fu_804_ap_return;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, grp_reg_float_s_fu_809_ap_return, ap_return_4_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_return_4 <= grp_reg_float_s_fu_809_ap_return;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    ap_return_5_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, grp_reg_float_s_fu_814_ap_return, ap_return_5_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_return_5 <= grp_reg_float_s_fu_814_ap_return;
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;


    ap_return_6_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, grp_reg_float_s_fu_819_ap_return, ap_return_6_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_return_6 <= grp_reg_float_s_fu_819_ap_return;
        else 
            ap_return_6 <= ap_return_6_preg;
        end if; 
    end process;


    ap_return_7_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, grp_reg_float_s_fu_824_ap_return, ap_return_7_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_return_7 <= grp_reg_float_s_fu_824_ap_return;
        else 
            ap_return_7 <= ap_return_7_preg;
        end if; 
    end process;


    ap_return_8_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, grp_reg_float_s_fu_829_ap_return, ap_return_8_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_return_8 <= grp_reg_float_s_fu_829_ap_return;
        else 
            ap_return_8 <= ap_return_8_preg;
        end if; 
    end process;


    ap_return_9_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, grp_reg_float_s_fu_841_ap_return, ap_return_9_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_return_9 <= grp_reg_float_s_fu_841_ap_return;
        else 
            ap_return_9 <= ap_return_9_preg;
        end if; 
    end process;


    ch_out_V_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ch_out_V_out_full_n, ap_block_pp0_stage0)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ch_out_V_out_blk_n <= ch_out_V_out_full_n;
        else 
            ch_out_V_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ch_out_V_out_din <= ch_out_V;

    ch_out_V_out_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ch_out_V_out_write <= ap_const_logic_1;
        else 
            ch_out_V_out_write <= ap_const_logic_0;
        end if; 
    end process;


    ci_V_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ci_V_out_full_n, ap_block_pp0_stage0)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ci_V_out_blk_n <= ci_V_out_full_n;
        else 
            ci_V_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ci_V_out_din <= ci_V;

    ci_V_out_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ci_V_out_write <= ap_const_logic_1;
        else 
            ci_V_out_write <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_247_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            grp_fu_247_ce <= ap_const_logic_1;
        else 
            grp_fu_247_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_247_p1 <= grp_fu_247_p10(2 - 1 downto 0);
    grp_fu_247_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln214_fu_233_p2),16));

    grp_fu_413_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            grp_fu_413_ce <= ap_const_logic_1;
        else 
            grp_fu_413_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_413_p1 <= grp_fu_413_p10(2 - 1 downto 0);
    grp_fu_413_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln68_reg_933),16));

    grp_fu_430_ce_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            grp_fu_430_ce <= ap_const_logic_1;
        else 
            grp_fu_430_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_430_p1 <= grp_fu_430_p10(2 - 1 downto 0);
    grp_fu_430_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln214_1_fu_421_p2),16));

    grp_fu_464_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then 
            grp_fu_464_ce <= ap_const_logic_1;
        else 
            grp_fu_464_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_464_p0 <= grp_fu_464_p00(10 - 1 downto 0);
    grp_fu_464_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(WeightsCache_ch_out),19));
    grp_fu_464_p1 <= grp_fu_464_p10(10 - 1 downto 0);
    grp_fu_464_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ci_V_read_reg_922),19));

    grp_reg_float_s_fu_794_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage3_11001_ignoreCallOp168, ap_block_pp0_stage4_11001_ignoreCallOp185)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001_ignoreCallOp185) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001_ignoreCallOp168) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            grp_reg_float_s_fu_794_ap_ce <= ap_const_logic_1;
        else 
            grp_reg_float_s_fu_794_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_reg_float_s_fu_799_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage3_11001_ignoreCallOp169, ap_block_pp0_stage4_11001_ignoreCallOp189)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001_ignoreCallOp189) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001_ignoreCallOp169) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            grp_reg_float_s_fu_799_ap_ce <= ap_const_logic_1;
        else 
            grp_reg_float_s_fu_799_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_reg_float_s_fu_804_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage3_11001_ignoreCallOp170, ap_block_pp0_stage4_11001_ignoreCallOp193)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001_ignoreCallOp193) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001_ignoreCallOp170) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            grp_reg_float_s_fu_804_ap_ce <= ap_const_logic_1;
        else 
            grp_reg_float_s_fu_804_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_reg_float_s_fu_809_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage3_11001_ignoreCallOp171, ap_block_pp0_stage4_11001_ignoreCallOp199)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001_ignoreCallOp199) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001_ignoreCallOp171) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            grp_reg_float_s_fu_809_ap_ce <= ap_const_logic_1;
        else 
            grp_reg_float_s_fu_809_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_reg_float_s_fu_814_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage3_11001_ignoreCallOp172, ap_block_pp0_stage4_11001_ignoreCallOp203)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001_ignoreCallOp203) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001_ignoreCallOp172) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            grp_reg_float_s_fu_814_ap_ce <= ap_const_logic_1;
        else 
            grp_reg_float_s_fu_814_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_reg_float_s_fu_819_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage3_11001_ignoreCallOp173, ap_block_pp0_stage4_11001_ignoreCallOp207)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001_ignoreCallOp207) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001_ignoreCallOp173) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            grp_reg_float_s_fu_819_ap_ce <= ap_const_logic_1;
        else 
            grp_reg_float_s_fu_819_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_reg_float_s_fu_824_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage3_11001_ignoreCallOp174, ap_block_pp0_stage4_11001_ignoreCallOp213)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001_ignoreCallOp213) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001_ignoreCallOp174) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            grp_reg_float_s_fu_824_ap_ce <= ap_const_logic_1;
        else 
            grp_reg_float_s_fu_824_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_reg_float_s_fu_829_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage3_11001_ignoreCallOp175, ap_block_pp0_stage4_11001_ignoreCallOp217)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001_ignoreCallOp217) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001_ignoreCallOp175) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            grp_reg_float_s_fu_829_ap_ce <= ap_const_logic_1;
        else 
            grp_reg_float_s_fu_829_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_reg_float_s_fu_841_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage3_11001_ignoreCallOp178, ap_block_pp0_stage4_11001_ignoreCallOp221)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001_ignoreCallOp221) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001_ignoreCallOp178) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            grp_reg_float_s_fu_841_ap_ce <= ap_const_logic_1;
        else 
            grp_reg_float_s_fu_841_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_reg_float_s_fu_841_in_r <= 
        ImageCache_IBRAM_q0 when (icmp_ln138_8_reg_1212(0) = '1') else 
        ap_const_lv32_0;
    icmp_ln138_1_fu_518_p2 <= "1" when (tmp_26_i_i_fu_510_p3 = ap_const_lv11_0) else "0";
    icmp_ln138_2_fu_559_p2 <= "1" when (tmp_28_i_i_fu_551_p3 = ap_const_lv11_0) else "0";
    icmp_ln138_3_fu_609_p2 <= "1" when (tmp_31_i_i_fu_601_p3 = ap_const_lv11_0) else "0";
    icmp_ln138_4_fu_689_p2 <= "1" when (tmp_33_i_i_fu_681_p3 = ap_const_lv11_0) else "0";
    icmp_ln138_5_fu_715_p2 <= "1" when (tmp_35_i_i_fu_707_p3 = ap_const_lv11_0) else "0";
    icmp_ln138_6_fu_663_p2 <= "1" when (tmp_38_i_i_fu_655_p3 = ap_const_lv11_0) else "0";
    icmp_ln138_7_fu_737_p2 <= "1" when (tmp_40_i_i_fu_729_p3 = ap_const_lv11_0) else "0";
    icmp_ln138_8_fu_755_p2 <= "1" when (tmp_42_i_i_fu_747_p3 = ap_const_lv11_0) else "0";
    icmp_ln138_fu_349_p2 <= "1" when (tmp_24_i_i_fu_341_p3 = ap_const_lv11_0) else "0";
    icmp_ln891_1_fu_303_p2 <= "1" when (signed(add_ln68_fu_227_p2) < signed(zext_ln891_1_fu_299_p1)) else "0";
    icmp_ln891_2_fu_355_p2 <= "1" when (unsigned(x_V_3) < unsigned(ImageCache_width_in)) else "0";
    icmp_ln891_3_fu_375_p2 <= "1" when (unsigned(add_ln68_2_fu_369_p2) < unsigned(zext_ln891_fu_279_p1)) else "0";
    icmp_ln891_4_fu_381_p2 <= "1" when (unsigned(y_V_2) < unsigned(ImageCache_height_i)) else "0";
    icmp_ln891_5_fu_401_p2 <= "1" when (unsigned(add_ln68_3_fu_395_p2) < unsigned(zext_ln891_1_fu_299_p1)) else "0";
    icmp_ln891_fu_283_p2 <= "1" when (signed(add_ln68_1_fu_257_p2) < signed(zext_ln891_fu_279_p1)) else "0";
    mul_ln214_1_fu_912_p0 <= mul_ln214_1_fu_912_p00(9 - 1 downto 0);
    mul_ln214_1_fu_912_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_V_3_read_reg_928),16));
    mul_ln214_1_fu_912_p1 <= zext_ln214_reg_951(10 - 1 downto 0);
    mul_ln214_2_fu_917_p0 <= mul_ln214_2_fu_917_p00(10 - 1 downto 0);
    mul_ln214_2_fu_917_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln68_2_reg_992),16));
    mul_ln214_2_fu_917_p1 <= zext_ln214_reg_951(10 - 1 downto 0);
    mul_ln214_fu_906_p1 <= mul_ln214_fu_906_p10(10 - 1 downto 0);
    mul_ln214_fu_906_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ImageCache_ch_in_V),16));
    or_ln138_10_fu_703_p2 <= (xor_ln891_4_reg_1145 or xor_ln891_3_reg_1114);
    or_ln138_11_fu_645_p2 <= (xor_ln891_reg_964 or xor_ln891_5_fu_640_p2);
    or_ln138_12_fu_650_p2 <= (tmp_2_reg_1007 or or_ln138_11_fu_645_p2);
    or_ln138_13_fu_725_p2 <= (xor_ln891_5_reg_1171 or xor_ln891_2_reg_1103);
    or_ln138_14_fu_743_p2 <= (xor_ln891_5_reg_1171 or xor_ln891_3_reg_1114);
    or_ln138_1_fu_329_p2 <= (xor_ln891_fu_289_p2 or xor_ln891_1_fu_309_p2);
    or_ln138_2_fu_335_p2 <= (tmp_fu_321_p3 or or_ln138_1_fu_329_p2);
    or_ln138_3_fu_500_p2 <= (xor_ln891_2_fu_495_p2 or xor_ln891_1_reg_970);
    or_ln138_4_fu_505_p2 <= (tmp_1_reg_986 or or_ln138_3_fu_500_p2);
    or_ln138_5_fu_541_p2 <= (xor_ln891_3_fu_536_p2 or xor_ln891_1_reg_970);
    or_ln138_6_fu_546_p2 <= (tmp_1_reg_986 or or_ln138_5_fu_541_p2);
    or_ln138_7_fu_591_p2 <= (xor_ln891_reg_964 or xor_ln891_4_fu_586_p2);
    or_ln138_8_fu_596_p2 <= (tmp_2_reg_1007 or or_ln138_7_fu_591_p2);
    or_ln138_9_fu_677_p2 <= (xor_ln891_4_reg_1145 or xor_ln891_2_reg_1103);
    or_ln138_fu_315_p2 <= (add_ln68_fu_227_p2 or add_ln68_1_fu_257_p2);
    select_ln138_1_fu_524_p3 <= 
        ImageCache_IBRAM_q0 when (icmp_ln138_1_fu_518_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln138_2_fu_570_p3 <= 
        ImageCache_IBRAM_q0 when (icmp_ln138_2_reg_1120(0) = '1') else 
        ap_const_lv32_0;
    select_ln138_3_fu_615_p3 <= 
        ImageCache_IBRAM_q0 when (icmp_ln138_3_fu_609_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln138_4_fu_695_p3 <= 
        ImageCache_IBRAM_q0 when (icmp_ln138_4_fu_689_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln138_5_fu_761_p3 <= 
        ImageCache_IBRAM_q0 when (icmp_ln138_5_reg_1197(0) = '1') else 
        ap_const_lv32_0;
    select_ln138_6_fu_772_p3 <= 
        ImageCache_IBRAM_q0 when (icmp_ln138_6_reg_1177(0) = '1') else 
        ap_const_lv32_0;
    select_ln138_7_fu_783_p3 <= 
        ImageCache_IBRAM_q0 when (icmp_ln138_7_reg_1207(0) = '1') else 
        ap_const_lv32_0;
    select_ln138_fu_470_p3 <= 
        ImageCache_IBRAM_q0 when (icmp_ln138_reg_976(0) = '1') else 
        ap_const_lv32_0;
    tmp_24_i_i_fu_341_p3 <= (ap_const_lv10_0 & or_ln138_2_fu_335_p2);
    tmp_26_i_i_fu_510_p3 <= (ap_const_lv10_0 & or_ln138_4_fu_505_p2);
    tmp_28_i_i_fu_551_p3 <= (ap_const_lv10_0 & or_ln138_6_fu_546_p2);
    tmp_31_i_i_fu_601_p3 <= (ap_const_lv10_0 & or_ln138_8_fu_596_p2);
    tmp_33_i_i_fu_681_p3 <= (ap_const_lv10_0 & or_ln138_9_fu_677_p2);
    tmp_35_i_i_fu_707_p3 <= (ap_const_lv10_0 & or_ln138_10_fu_703_p2);
    tmp_38_i_i_fu_655_p3 <= (ap_const_lv10_0 & or_ln138_12_fu_650_p2);
    tmp_40_i_i_fu_729_p3 <= (ap_const_lv10_0 & or_ln138_13_fu_725_p2);
    tmp_42_i_i_fu_747_p3 <= (ap_const_lv10_0 & or_ln138_14_fu_743_p2);
    tmp_fu_321_p3 <= or_ln138_fu_315_p2(9 downto 9);
    trunc_ln68_fu_219_p1 <= y_V_2(2 - 1 downto 0);
    xor_ln891_1_fu_309_p2 <= (icmp_ln891_1_fu_303_p2 xor ap_const_lv1_1);
    xor_ln891_2_fu_495_p2 <= (icmp_ln891_2_reg_981 xor ap_const_lv1_1);
    xor_ln891_3_fu_536_p2 <= (icmp_ln891_3_reg_997 xor ap_const_lv1_1);
    xor_ln891_4_fu_586_p2 <= (icmp_ln891_4_reg_1002 xor ap_const_lv1_1);
    xor_ln891_5_fu_640_p2 <= (icmp_ln891_5_reg_1013 xor ap_const_lv1_1);
    xor_ln891_fu_289_p2 <= (icmp_ln891_fu_283_p2 xor ap_const_lv1_1);
    zext_ln209_1_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ci_V_read_reg_922),16));
    zext_ln214_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ImageCache_ch_in_V),16));
    zext_ln544_10_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln209_11_reg_1187),64));
    zext_ln544_3_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln209_2_fu_477_p2),64));
    zext_ln544_4_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln209_3_fu_532_p2),64));
    zext_ln544_5_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln209_5_fu_577_p2),64));
    zext_ln544_6_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln209_6_fu_623_p2),64));
    zext_ln544_7_fu_721_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln209_7_reg_1161),64));
    zext_ln544_8_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln209_9_reg_1166),64));
    zext_ln544_9_fu_779_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln209_10_reg_1182),64));
    zext_ln544_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln209_1_fu_443_p2),64));
    zext_ln68_1_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_V_3),10));
    zext_ln68_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_2),10));
    zext_ln891_1_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ImageCache_height_i),10));
    zext_ln891_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ImageCache_width_in),10));
end behav;
