-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fpga_top is
generic (
    C_M_AXI_MEMORYBUS_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_MEMORYBUS_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MEMORYBUS_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEMORYBUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEMORYBUS_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEMORYBUS_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEMORYBUS_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEMORYBUS_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITE_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_AXILITE_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEMORYBUS_USER_VALUE : INTEGER := 0;
    C_M_AXI_MEMORYBUS_PROT_VALUE : INTEGER := 0;
    C_M_AXI_MEMORYBUS_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_memorybus_AWVALID : OUT STD_LOGIC;
    m_axi_memorybus_AWREADY : IN STD_LOGIC;
    m_axi_memorybus_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMORYBUS_ADDR_WIDTH-1 downto 0);
    m_axi_memorybus_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMORYBUS_ID_WIDTH-1 downto 0);
    m_axi_memorybus_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_memorybus_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_memorybus_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_memorybus_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_memorybus_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_memorybus_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_memorybus_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_memorybus_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_memorybus_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMORYBUS_AWUSER_WIDTH-1 downto 0);
    m_axi_memorybus_WVALID : OUT STD_LOGIC;
    m_axi_memorybus_WREADY : IN STD_LOGIC;
    m_axi_memorybus_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMORYBUS_DATA_WIDTH-1 downto 0);
    m_axi_memorybus_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMORYBUS_DATA_WIDTH/8-1 downto 0);
    m_axi_memorybus_WLAST : OUT STD_LOGIC;
    m_axi_memorybus_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMORYBUS_ID_WIDTH-1 downto 0);
    m_axi_memorybus_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMORYBUS_WUSER_WIDTH-1 downto 0);
    m_axi_memorybus_ARVALID : OUT STD_LOGIC;
    m_axi_memorybus_ARREADY : IN STD_LOGIC;
    m_axi_memorybus_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMORYBUS_ADDR_WIDTH-1 downto 0);
    m_axi_memorybus_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMORYBUS_ID_WIDTH-1 downto 0);
    m_axi_memorybus_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_memorybus_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_memorybus_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_memorybus_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_memorybus_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_memorybus_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_memorybus_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_memorybus_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_memorybus_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMORYBUS_ARUSER_WIDTH-1 downto 0);
    m_axi_memorybus_RVALID : IN STD_LOGIC;
    m_axi_memorybus_RREADY : OUT STD_LOGIC;
    m_axi_memorybus_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MEMORYBUS_DATA_WIDTH-1 downto 0);
    m_axi_memorybus_RLAST : IN STD_LOGIC;
    m_axi_memorybus_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MEMORYBUS_ID_WIDTH-1 downto 0);
    m_axi_memorybus_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEMORYBUS_RUSER_WIDTH-1 downto 0);
    m_axi_memorybus_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_memorybus_BVALID : IN STD_LOGIC;
    m_axi_memorybus_BREADY : OUT STD_LOGIC;
    m_axi_memorybus_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_memorybus_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MEMORYBUS_ID_WIDTH-1 downto 0);
    m_axi_memorybus_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEMORYBUS_BUSER_WIDTH-1 downto 0);
    s_axi_axilite_AWVALID : IN STD_LOGIC;
    s_axi_axilite_AWREADY : OUT STD_LOGIC;
    s_axi_axilite_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITE_ADDR_WIDTH-1 downto 0);
    s_axi_axilite_WVALID : IN STD_LOGIC;
    s_axi_axilite_WREADY : OUT STD_LOGIC;
    s_axi_axilite_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITE_DATA_WIDTH-1 downto 0);
    s_axi_axilite_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITE_DATA_WIDTH/8-1 downto 0);
    s_axi_axilite_ARVALID : IN STD_LOGIC;
    s_axi_axilite_ARREADY : OUT STD_LOGIC;
    s_axi_axilite_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITE_ADDR_WIDTH-1 downto 0);
    s_axi_axilite_RVALID : OUT STD_LOGIC;
    s_axi_axilite_RREADY : IN STD_LOGIC;
    s_axi_axilite_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITE_DATA_WIDTH-1 downto 0);
    s_axi_axilite_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_axilite_BVALID : OUT STD_LOGIC;
    s_axi_axilite_BREADY : IN STD_LOGIC;
    s_axi_axilite_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of fpga_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fpga_top,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=103026748,HLS_SYN_TPT=none,HLS_SYN_MEM=89,HLS_SYN_DSP=114,HLS_SYN_FF=19850,HLS_SYN_LUT=27280,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state133 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state134 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state135 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state136 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state137 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state138 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state139 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state140 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state141 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state142 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state143 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state144 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state145 : STD_LOGIC_VECTOR (123 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state146 : STD_LOGIC_VECTOR (123 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state147 : STD_LOGIC_VECTOR (123 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (123 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state152 : STD_LOGIC_VECTOR (123 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state153 : STD_LOGIC_VECTOR (123 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state154 : STD_LOGIC_VECTOR (123 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state155 : STD_LOGIC_VECTOR (123 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state156 : STD_LOGIC_VECTOR (123 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state157 : STD_LOGIC_VECTOR (123 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_7A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_75 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110101";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv23_1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv18_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_7B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal layer_width_V : STD_LOGIC_VECTOR (8 downto 0);
    signal layer_width_V_0_data_reg : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal layer_width_V_0_vld_reg : STD_LOGIC := '0';
    signal layer_width_V_0_ack_out : STD_LOGIC;
    signal layer_height_V : STD_LOGIC_VECTOR (8 downto 0);
    signal layer_height_V_0_data_reg : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal layer_height_V_0_vld_reg : STD_LOGIC := '0';
    signal layer_height_V_0_ack_out : STD_LOGIC;
    signal layer_channels_in_V : STD_LOGIC_VECTOR (9 downto 0);
    signal layer_channels_in_V_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal layer_channels_in_V_0_vld_reg : STD_LOGIC := '0';
    signal layer_channels_in_V_0_ack_out : STD_LOGIC;
    signal layer_channels_out_V : STD_LOGIC_VECTOR (9 downto 0);
    signal layer_channels_out_V_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal layer_channels_out_V_0_vld_reg : STD_LOGIC := '0';
    signal layer_channels_out_V_0_ack_out : STD_LOGIC;
    signal layer_kernel_V : STD_LOGIC_VECTOR (1 downto 0);
    signal layer_kernel_V_0_data_reg : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal layer_kernel_V_0_vld_reg : STD_LOGIC := '0';
    signal layer_kernel_V_0_ack_out : STD_LOGIC;
    signal layer_stride_V : STD_LOGIC_VECTOR (1 downto 0);
    signal layer_stride_V_0_data_reg : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal layer_stride_V_0_vld_reg : STD_LOGIC := '0';
    signal layer_stride_V_0_ack_out : STD_LOGIC;
    signal layer_pad : STD_LOGIC;
    signal layer_relu : STD_LOGIC;
    signal layer_relu_0_data_reg : STD_LOGIC := '0';
    signal layer_relu_0_vld_reg : STD_LOGIC := '0';
    signal layer_relu_0_ack_out : STD_LOGIC;
    signal layer_is_first_split_layer : STD_LOGIC;
    signal layer_is_first_split_layer_0_data_reg : STD_LOGIC := '0';
    signal layer_is_first_split_layer_0_vld_reg : STD_LOGIC := '0';
    signal layer_is_first_split_layer_0_ack_out : STD_LOGIC;
    signal layer_is_second_split_layer : STD_LOGIC;
    signal layer_is_second_split_layer_0_data_reg : STD_LOGIC := '0';
    signal layer_is_second_split_layer_0_vld_reg : STD_LOGIC := '0';
    signal layer_is_second_split_layer_0_ack_out : STD_LOGIC;
    signal layer_global_pool : STD_LOGIC;
    signal layer_global_pool_0_data_reg : STD_LOGIC := '0';
    signal layer_global_pool_0_vld_reg : STD_LOGIC := '0';
    signal layer_global_pool_0_ack_out : STD_LOGIC;
    signal layer_mem_addr_input_V : STD_LOGIC_VECTOR (22 downto 0);
    signal layer_mem_addr_input_V_0_data_reg : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    signal layer_mem_addr_input_V_0_vld_reg : STD_LOGIC := '0';
    signal layer_mem_addr_input_V_0_ack_out : STD_LOGIC;
    signal layer_mem_addr_output_V : STD_LOGIC_VECTOR (22 downto 0);
    signal layer_mem_addr_output_V_0_data_reg : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    signal layer_mem_addr_output_V_0_vld_reg : STD_LOGIC := '0';
    signal layer_mem_addr_output_V_0_ack_out : STD_LOGIC;
    signal layer_mem_addr_weights_V : STD_LOGIC_VECTOR (22 downto 0);
    signal layer_mem_addr_weights_V_0_data_reg : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    signal layer_mem_addr_weights_V_0_vld_reg : STD_LOGIC := '0';
    signal layer_mem_addr_weights_V_0_ack_out : STD_LOGIC;
    signal SHARED_DRAM : STD_LOGIC_VECTOR (31 downto 0);
    signal SHARED_DRAM_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal SHARED_DRAM_0_vld_reg : STD_LOGIC := '0';
    signal SHARED_DRAM_0_ack_out : STD_LOGIC;
    signal weights_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_offset_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal weights_offset_0_vld_reg : STD_LOGIC := '0';
    signal weights_offset_0_ack_out : STD_LOGIC;
    signal num_weights_V : STD_LOGIC_VECTOR (18 downto 0);
    signal input_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal input_offset_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal input_offset_0_vld_reg : STD_LOGIC := '0';
    signal input_offset_0_ack_out : STD_LOGIC;
    signal ImageCache_width_in : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal ImageCache_height_i : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal ImageCache_ch_in_V : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal ImageCache_line_wid : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ImageCache_curr_img : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal WeightsCache_kernel : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal WeightsCache_ch_out : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal MemoryController_la : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    signal MemoryController_la_2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    signal MemoryController_ch : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal MemoryController_wi : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal MemoryController_is_1 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal MemoryController_is : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ProcessingElement_r : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal MemoryController_la_3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    signal ImageCache_IBRAM_ce0 : STD_LOGIC;
    signal ImageCache_IBRAM_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ImageCache_IBRAM_address1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ImageCache_IBRAM_ce1 : STD_LOGIC;
    signal ImageCache_IBRAM_we1 : STD_LOGIC;
    signal ImageCache_IBRAM_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal WBRAM_0_0_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal WBRAM_0_0_0_ce0 : STD_LOGIC;
    signal WBRAM_0_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal WBRAM_0_0_0_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal WBRAM_0_0_0_ce1 : STD_LOGIC;
    signal WBRAM_0_0_0_we1 : STD_LOGIC;
    signal WBRAM_0_0_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal WBRAM_0_0_1_ce0 : STD_LOGIC;
    signal WBRAM_0_0_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal WBRAM_0_0_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal WBRAM_0_0_1_ce1 : STD_LOGIC;
    signal WBRAM_0_0_1_we1 : STD_LOGIC;
    signal WBRAM_0_0_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal WBRAM_0_0_2_ce0 : STD_LOGIC;
    signal WBRAM_0_0_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal WBRAM_0_0_2_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal WBRAM_0_0_2_ce1 : STD_LOGIC;
    signal WBRAM_0_0_2_we1 : STD_LOGIC;
    signal WBRAM_0_0_3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal WBRAM_0_0_3_ce0 : STD_LOGIC;
    signal WBRAM_0_0_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal WBRAM_0_0_3_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal WBRAM_0_0_3_ce1 : STD_LOGIC;
    signal WBRAM_0_0_3_we1 : STD_LOGIC;
    signal WBRAM_0_0_4_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal WBRAM_0_0_4_ce0 : STD_LOGIC;
    signal WBRAM_0_0_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal WBRAM_0_0_4_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal WBRAM_0_0_4_ce1 : STD_LOGIC;
    signal WBRAM_0_0_4_we1 : STD_LOGIC;
    signal WBRAM_0_0_5_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal WBRAM_0_0_5_ce0 : STD_LOGIC;
    signal WBRAM_0_0_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal WBRAM_0_0_5_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal WBRAM_0_0_5_ce1 : STD_LOGIC;
    signal WBRAM_0_0_5_we1 : STD_LOGIC;
    signal WBRAM_0_0_6_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal WBRAM_0_0_6_ce0 : STD_LOGIC;
    signal WBRAM_0_0_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal WBRAM_0_0_6_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal WBRAM_0_0_6_ce1 : STD_LOGIC;
    signal WBRAM_0_0_6_we1 : STD_LOGIC;
    signal WBRAM_0_0_7_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal WBRAM_0_0_7_ce0 : STD_LOGIC;
    signal WBRAM_0_0_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal WBRAM_0_0_7_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal WBRAM_0_0_7_ce1 : STD_LOGIC;
    signal WBRAM_0_0_7_we1 : STD_LOGIC;
    signal WBRAM_0_0_8_ce0 : STD_LOGIC;
    signal WBRAM_0_0_8_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal WBRAM_0_0_8_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal WBRAM_0_0_8_ce1 : STD_LOGIC;
    signal WBRAM_0_0_8_we1 : STD_LOGIC;
    signal OutputCache_OBRAM_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal OutputCache_OBRAM_ce0 : STD_LOGIC;
    signal OutputCache_OBRAM_we0 : STD_LOGIC;
    signal OutputCache_OBRAM_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal OutputCache_OBRAM_ce1 : STD_LOGIC;
    signal OutputCache_OBRAM_we1 : STD_LOGIC;
    signal MemoryController_pi : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    signal GPoolCache_GBRAM_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal GPoolCache_GBRAM_ce0 : STD_LOGIC;
    signal GPoolCache_GBRAM_we0 : STD_LOGIC;
    signal GPoolCache_GBRAM_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal GPoolCache_GBRAM_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal memorybus_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln99_reg_2696 : STD_LOGIC_VECTOR (0 downto 0);
    signal memorybus_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln99_reg_2696_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln68_1_reg_2816 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp1_iter8 : STD_LOGIC := '0';
    signal icmp_ln68_1_reg_2816_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal icmp_ln68_reg_2836 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp2_iter8 : STD_LOGIC := '0';
    signal icmp_ln68_reg_2836_pp2_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal memorybus_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state132 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state132 : signal is "none";
    signal memorybus_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state133 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state133 : signal is "none";
    signal memorybus_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state138 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state138 : signal is "none";
    signal ap_CS_fsm_state147 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state147 : signal is "none";
    signal ap_enable_reg_pp3_iter3 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal icmp_ln188_reg_3201 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln188_reg_3201_pp3_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state156 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state156 : signal is "none";
    signal layer_global_pool_re_reg_2479 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_reg_3215 : STD_LOGIC_VECTOR (0 downto 0);
    signal memorybus_AWVALID : STD_LOGIC;
    signal memorybus_AWREADY : STD_LOGIC;
    signal memorybus_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal memorybus_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal memorybus_WVALID : STD_LOGIC;
    signal memorybus_WREADY : STD_LOGIC;
    signal memorybus_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal memorybus_ARVALID : STD_LOGIC;
    signal memorybus_ARREADY : STD_LOGIC;
    signal memorybus_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal memorybus_RVALID : STD_LOGIC;
    signal memorybus_RREADY : STD_LOGIC;
    signal memorybus_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal memorybus_RLAST : STD_LOGIC;
    signal memorybus_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal memorybus_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal memorybus_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal memorybus_BVALID : STD_LOGIC;
    signal memorybus_BREADY : STD_LOGIC;
    signal memorybus_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal memorybus_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal memorybus_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_reg_848 : STD_LOGIC_VECTOR (18 downto 0);
    signal t_V_6_reg_859 : STD_LOGIC_VECTOR (3 downto 0);
    signal t_V_6_reg_859_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal t_V_6_reg_859_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal t_V_6_reg_859_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal t_V_6_reg_859_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_24_reg_871 : STD_LOGIC_VECTOR (9 downto 0);
    signal t_V_3_reg_893 : STD_LOGIC_VECTOR (9 downto 0);
    signal t_V_5_reg_904 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_op_assign_1_reg_992 : STD_LOGIC_VECTOR (9 downto 0);
    signal reg_1141 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal icmp_ln96_fu_1787_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_state148_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state149_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state150_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state151_pp3_stage0_iter3 : BOOLEAN;
    signal ap_block_state151_io : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal reg_1145 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state140 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state140 : signal is "none";
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal icmp_ln188_reg_3201_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal input_offset_read_reg_2463 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal weights_offset_read_reg_2468 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_mem_addr_input_reg_2473 : STD_LOGIC_VECTOR (22 downto 0);
    signal layer_is_second_spli_reg_2483 : STD_LOGIC_VECTOR (0 downto 0);
    signal layer_kernel_V_read_reg_2488 : STD_LOGIC_VECTOR (1 downto 0);
    signal layer_channels_out_V_1_reg_2494 : STD_LOGIC_VECTOR (9 downto 0);
    signal layer_channels_in_V_s_reg_2504 : STD_LOGIC_VECTOR (9 downto 0);
    signal layer_height_V_read_reg_2516 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer_width_V_read_reg_2522 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_13_reg_2530 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln209_fu_2450_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln209_reg_2535 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln879_4_fu_1228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_4_reg_2541 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_cast_fu_1292_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_cast_reg_2559 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_1286_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln209_1_reg_2569 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln209_2_fu_2457_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln209_2_reg_2574 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret_V_fu_1304_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_reg_2579 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln209_5_fu_1310_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln209_5_reg_2584 : STD_LOGIC_VECTOR (18 downto 0);
    signal icmp_ln879_fu_1313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_reg_2589 : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_V_fu_1318_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal lhs_V_reg_2594 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln1352_fu_1332_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln1352_reg_2599 : STD_LOGIC_VECTOR (13 downto 0);
    signal lhs_V_1_fu_1338_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal lhs_V_1_reg_2604 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln879_2_fu_1341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_2_reg_2609 : STD_LOGIC_VECTOR (0 downto 0);
    signal ci_V_fu_1355_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ci_V_reg_2618 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln887_fu_1350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bias_or_1x1_fu_1375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bias_or_1x1_reg_2628 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_1_fu_1380_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret_V_1_reg_2633 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln887_1_fu_1391_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln887_1_reg_2646 : STD_LOGIC_VECTOR (20 downto 0);
    signal lhs_V_2_fu_1394_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal lhs_V_2_reg_2652 : STD_LOGIC_VECTOR (32 downto 0);
    signal MAX_ADDR_V_fu_1402_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal MAX_ADDR_V_reg_2661 : STD_LOGIC_VECTOR (15 downto 0);
    signal weights_per_filter_V_fu_1412_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal weights_per_filter_V_reg_2666 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal dram_addr_V_fu_1422_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal dram_addr_V_reg_2671 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln215_fu_1428_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln215_reg_2676 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln321_fu_1432_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln321_reg_2681 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln214_fu_1436_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln214_reg_2686 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln99_fu_1444_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln99_reg_2691 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln99_fu_1453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_2696_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_2696_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_2696_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal memorybus_addr_reg_2700 : STD_LOGIC_VECTOR (31 downto 0);
    signal rowID_V_fu_1533_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal rowID_V_reg_2706 : STD_LOGIC_VECTOR (9 downto 0);
    signal rowID_V_reg_2706_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal rowID_V_reg_2706_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal rowID_V_reg_2706_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal rowID_V_reg_2706_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal weightID_V_fu_1540_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal weightID_V_reg_2711 : STD_LOGIC_VECTOR (2 downto 0);
    signal weightID_V_reg_2711_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal weightID_V_reg_2711_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal weightID_V_reg_2711_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal weightID_V_reg_2711_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln126_fu_1564_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln126_reg_2715 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln126_1_fu_1572_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln126_1_reg_2720 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln700_fu_1580_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln700_reg_2725 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_block_state10_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state10_io : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state16_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal memorybus_addr_read_reg_2730 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reg_float_s_fu_1586_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal loads_left_0_load_reg_2793 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal icmp_ln90_fu_1616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_V_fu_1621_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_V_reg_2803 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1081_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_2_reg_2808 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_1_reg_2812 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_1_fu_1641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state23_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state24_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state24_io : BOOLEAN;
    signal ap_block_state25_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state26_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state27_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state28_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_state29_pp1_stage0_iter6 : BOOLEAN;
    signal ap_block_state30_pp1_stage0_iter7 : BOOLEAN;
    signal ap_block_state31_pp1_stage0_iter8 : BOOLEAN;
    signal ap_block_state32_pp1_stage0_iter9 : BOOLEAN;
    signal ap_block_state33_pp1_stage0_iter10 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln68_1_reg_2816_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_1_reg_2816_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_1_reg_2816_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_1_reg_2816_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_1_reg_2816_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_1_reg_2816_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_1_reg_2816_pp1_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_1_reg_2816_pp1_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ci_V_2_fu_1646_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal memorybus_addr_2_reg_2825 : STD_LOGIC_VECTOR (31 downto 0);
    signal memorybus_addr_2_rea_reg_2831 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln68_fu_1692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state35_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state36_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state36_io : BOOLEAN;
    signal ap_block_state37_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state38_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state39_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_state40_pp2_stage0_iter5 : BOOLEAN;
    signal ap_block_state41_pp2_stage0_iter6 : BOOLEAN;
    signal ap_block_state42_pp2_stage0_iter7 : BOOLEAN;
    signal ap_block_state43_pp2_stage0_iter8 : BOOLEAN;
    signal ap_block_state44_pp2_stage0_iter9 : BOOLEAN;
    signal ap_block_state45_pp2_stage0_iter10 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln68_reg_2836_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_2836_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_2836_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_2836_pp2_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_2836_pp2_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_2836_pp2_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_2836_pp2_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_2836_pp2_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ci_V_1_fu_1697_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal memorybus_addr_1_reg_2845 : STD_LOGIC_VECTOR (31 downto 0);
    signal memorybus_addr_1_rea_reg_2851 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln209_7_fu_1738_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln209_7_reg_2877 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal mul_ln92_fu_1747_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln92_reg_2882 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln96_fu_1792_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln96_reg_2890 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln887_fu_1803_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln887_reg_2895 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln887_1_fu_1817_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln887_1_reg_2903 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln887_fu_1825_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln887_reg_2909 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln887_2_fu_1850_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln887_2_reg_2914 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln887_3_fu_1858_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln887_3_reg_2919 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln887_1_fu_1862_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln887_1_reg_2924 : STD_LOGIC_VECTOR (0 downto 0);
    signal ImageCache_ch_in_V_s_reg_2929 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln887_2_fu_1870_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln887_2_reg_2934 : STD_LOGIC_VECTOR (20 downto 0);
    signal icmp_ln887_3_fu_1874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_3_reg_2939 : STD_LOGIC_VECTOR (0 downto 0);
    signal MAX_ADDR_V_1_fu_1890_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal MAX_ADDR_V_1_reg_2943 : STD_LOGIC_VECTOR (15 downto 0);
    signal memorybus_addr_3_reg_2948 : STD_LOGIC_VECTOR (31 downto 0);
    signal ci_V_3_fu_1936_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ci_V_3_reg_2957 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal memorybus_addr_4_reg_2962 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln68_2_fu_1931_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_11_fu_1980_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_11_reg_2968 : STD_LOGIC_VECTOR (0 downto 0);
    signal memorybus_addr_4_rea_reg_2972 : STD_LOGIC_VECTOR (31 downto 0);
    signal ci_V_4_fu_2020_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ci_V_4_reg_2980 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal icmp_ln130_fu_2015_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xy_offset_V_fu_2062_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal xy_offset_V_reg_2990 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal icmp_ln178_fu_2073_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln178_reg_2995 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal MemoryController_ch_2_reg_3004 : STD_LOGIC_VECTOR (9 downto 0);
    signal MemoryController_is_4_reg_3019 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal trunc_ln215_1_fu_2153_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln215_1_reg_3024 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln321_2_fu_2157_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln321_2_reg_3029 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln214_3_fu_2161_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln214_3_reg_3034 : STD_LOGIC_VECTOR (2 downto 0);
    signal co_V_1_fu_2170_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal co_V_1_reg_3042 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal select_ln879_fu_2219_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln879_reg_3047 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln164_fu_2165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal memorybus_addr_5_reg_3098 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_V_1_fu_2297_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln544_7_fu_2302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_7_reg_3109 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal raw_reg_3120 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal weight_1_fu_2390_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_1_reg_3125 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1046_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal biased_reg_3130 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ProcessingElement_r_1_reg_3137 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal grp_fu_1053_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_3147 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal grp_fu_1056_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_3152 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1071_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_3157 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal grp_fu_1076_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_3163 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1059_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_3169 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal grp_fu_1063_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_3174 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1067_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_reg_3179 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state130 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state130 : signal is "none";
    signal result_fu_2416_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_reg_3184 : STD_LOGIC_VECTOR (31 downto 0);
    signal GPoolCache_GBRAM_ad_1_reg_3191 : STD_LOGIC_VECTOR (8 downto 0);
    signal new_ch_reg_3196 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state145 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state145 : signal is "none";
    signal icmp_ln188_fu_2427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_2433_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln191_fu_2444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state152 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state152 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state23 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter10 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state35 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter10 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state148 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_ce0 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_we0 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_address1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_ce1 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_we1 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_ce0 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_we0 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_ce1 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_we1 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_ce0 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_we0 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_ce1 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_we1 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_ce0 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_we0 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_ce1 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_we1 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_ce0 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_we0 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_ce1 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_we1 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_ce0 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_we0 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_ce1 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_we1 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_ce0 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_we0 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_ce1 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_we1 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_ce0 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_we0 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_ce1 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_we1 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_ce0 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_we0 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_ce1 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_we1 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_ce0 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_we0 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_ce1 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_we1 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_ce0 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_we0 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_ce1 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_we1 : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_ap_start : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_ap_done : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_ap_ready : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_ap_idle : STD_LOGIC;
    signal grp_processInputChannel_s_fu_1003_ap_continue : STD_LOGIC;
    signal grp_reg_float_s_fu_1586_ap_ce : STD_LOGIC;
    signal ap_block_state10_pp0_stage1_iter0_ignore_call15 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter1_ignore_call15 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter2_ignore_call15 : BOOLEAN;
    signal ap_block_state16_pp0_stage1_iter3_ignore_call15 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter4_ignore_call15 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter5_ignore_call15 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_ignoreCallOp343 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter0_ignore_call15 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1_ignore_call15 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter2_ignore_call15 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter3_ignore_call15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter4_ignore_call15 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter5_ignore_call15 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp347 : BOOLEAN;
    signal grp_reg_float_s_fu_1676_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reg_float_s_fu_1676_ap_ce : STD_LOGIC;
    signal ap_block_state23_pp1_stage0_iter0_ignore_call13 : BOOLEAN;
    signal ap_block_state24_pp1_stage0_iter1_ignore_call13 : BOOLEAN;
    signal ap_block_state25_pp1_stage0_iter2_ignore_call13 : BOOLEAN;
    signal ap_block_state26_pp1_stage0_iter3_ignore_call13 : BOOLEAN;
    signal ap_block_state27_pp1_stage0_iter4_ignore_call13 : BOOLEAN;
    signal ap_block_state28_pp1_stage0_iter5_ignore_call13 : BOOLEAN;
    signal ap_block_state29_pp1_stage0_iter6_ignore_call13 : BOOLEAN;
    signal ap_block_state30_pp1_stage0_iter7_ignore_call13 : BOOLEAN;
    signal ap_block_state31_pp1_stage0_iter8_ignore_call13 : BOOLEAN;
    signal ap_block_state32_pp1_stage0_iter9_ignore_call13 : BOOLEAN;
    signal ap_block_state33_pp1_stage0_iter10_ignore_call13 : BOOLEAN;
    signal ap_block_pp1_stage0_11001_ignoreCallOp451 : BOOLEAN;
    signal grp_reg_float_s_fu_1727_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reg_float_s_fu_1727_ap_ce : STD_LOGIC;
    signal ap_block_state35_pp2_stage0_iter0_ignore_call13 : BOOLEAN;
    signal ap_block_state36_pp2_stage0_iter1_ignore_call13 : BOOLEAN;
    signal ap_block_state37_pp2_stage0_iter2_ignore_call13 : BOOLEAN;
    signal ap_block_state38_pp2_stage0_iter3_ignore_call13 : BOOLEAN;
    signal ap_block_state39_pp2_stage0_iter4_ignore_call13 : BOOLEAN;
    signal ap_block_state40_pp2_stage0_iter5_ignore_call13 : BOOLEAN;
    signal ap_block_state41_pp2_stage0_iter6_ignore_call13 : BOOLEAN;
    signal ap_block_state42_pp2_stage0_iter7_ignore_call13 : BOOLEAN;
    signal ap_block_state43_pp2_stage0_iter8_ignore_call13 : BOOLEAN;
    signal ap_block_state44_pp2_stage0_iter9_ignore_call13 : BOOLEAN;
    signal ap_block_state45_pp2_stage0_iter10_ignore_call13 : BOOLEAN;
    signal ap_block_pp2_stage0_11001_ignoreCallOp494 : BOOLEAN;
    signal grp_reg_float_s_fu_1985_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reg_float_s_fu_1985_ap_ce : STD_LOGIC;
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal p_0137_0_i_reg_825 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal t_V_1_reg_837 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_t_V_phi_fu_851_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_phi_mux_t_V_6_phi_fu_863_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_empty_24_phi_fu_875_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal t_V_8_reg_882 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_phi_mux_loads_left_2_phi_fu_918_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal loads_left_2_reg_915 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1130_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal indvar_flatten_reg_924 : STD_LOGIC_VECTOR (17 downto 0);
    signal t_V_17_reg_935 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_15_reg_946 : STD_LOGIC_VECTOR (8 downto 0);
    signal t_V_11_reg_957 : STD_LOGIC_VECTOR (9 downto 0);
    signal t_V_12_reg_968 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_sync_grp_processInputChannel_s_fu_1003_ap_ready : STD_LOGIC;
    signal ap_sync_grp_processInputChannel_s_fu_1003_ap_done : STD_LOGIC;
    signal ap_block_state60_on_subcall_done : BOOLEAN;
    signal t_V_14_reg_980 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state146 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state146 : signal is "none";
    signal grp_processInputChannel_s_fu_1003_ap_start_reg : STD_LOGIC := '0';
    signal ap_sync_reg_grp_processInputChannel_s_fu_1003_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_processInputChannel_s_fu_1003_ap_done : STD_LOGIC := '0';
    signal zext_ln544_2_fu_1600_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_10_fu_1682_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_fu_1733_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_11_fu_1991_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_8_fu_2235_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal GPoolCache_GBRAM_ad_gep_fu_809_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln544_6_fu_2439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln123_fu_1490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln138_1_fu_1666_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln138_fu_1717_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln191_fu_1921_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln138_2_fu_1956_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln174_fu_2279_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_36_fu_2422_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op904_writeresp_state156 : BOOLEAN;
    signal ap_block_state156 : BOOLEAN;
    signal ap_block_pp3_stage0_01001 : BOOLEAN;
    signal grp_fu_1116_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln51_2_fu_2001_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln101_fu_1248_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln214_3_fu_1630_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_1089_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln214_fu_2141_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal loads_left_0_fu_342 : STD_LOGIC_VECTOR (20 downto 0);
    signal loads_left_4_fu_346 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln214_2_fu_1966_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal MemoryController_is_2_fu_350 : STD_LOGIC_VECTOR (0 downto 0);
    signal MemoryController_ch_1_fu_354 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state139 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state139 : signal is "none";
    signal grp_fu_1046_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1046_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_CS_fsm_state141 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state141 : signal is "none";
    signal ap_CS_fsm_state131 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state131 : signal is "none";
    signal grp_fu_1056_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal grp_fu_1105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1110_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln_fu_1234_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln214_3_fu_1244_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1286_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1286_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln215_fu_1301_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln_fu_1321_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1352_1_fu_1328_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln887_fu_1346_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1365_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1365_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln879_1_fu_1370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln214_fu_1397_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_22_fu_1419_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1365_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal empty_23_fu_1440_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln99_fu_1449_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln215_3_fu_1462_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln1353_3_fu_1466_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln1353_fu_1470_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln1353_4_fu_1476_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_2_fu_1480_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln123_fu_1485_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln1353_fu_1500_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret_V_3_fu_1504_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln214_2_fu_1524_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln321_fu_1509_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln321_1_fu_1514_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln214_1_fu_1528_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal weight_index_V_fu_1547_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln879_3_fu_1553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal co_V_fu_1558_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1353_1_fu_1627_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal rhs_V_1_fu_1652_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_5_fu_1656_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln138_1_fu_1661_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal rhs_V_fu_1703_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_4_fu_1707_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln138_fu_1712_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln92_fu_1747_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln92_fu_1747_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln6_fu_1766_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln152_fu_1776_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln107_fu_1798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln700_12_fu_1811_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln152_mid1_fu_1829_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln152_1_fu_1839_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln152_1_fu_1843_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_out_V_fu_1780_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln214_1_fu_1884_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal split_offset_V_fu_1899_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal rhs_V_2_fu_1907_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_6_fu_1911_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln191_fu_1916_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal rhs_V_3_fu_1942_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_7_fu_1946_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln138_2_fu_1951_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_16_fu_1976_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_8_fu_1996_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_2034_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_2034_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln7_fu_2039_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln153_fu_2048_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_out_V_fu_2052_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln214_fu_2058_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_2034_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal or_ln178_fu_2068_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_2090_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_2090_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_2104_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_2104_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_2090_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal is_split_layer_fu_2117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln214_2_fu_2123_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal px_offset_V_1_fu_2129_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_2104_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln1353_2_fu_2186_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret_V_13_fu_2190_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln214_4_fu_2210_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln879_5_fu_2180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weightID_V_1_fu_2214_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln321_1_fu_2195_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln321_3_fu_2200_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal rowID_V_1_fu_2227_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln215_9_fu_2251_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln1353_5_fu_2255_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln1353_9_fu_2259_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln1353_6_fu_2265_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_14_fu_2269_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln174_fu_2274_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln217_fu_2307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln217_1_fu_2320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln217_fu_2312_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln217_2_fu_2333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln217_1_fu_2325_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln217_3_fu_2346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln217_2_fu_2338_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln217_4_fu_2359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln217_3_fu_2351_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln217_5_fu_2372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln217_4_fu_2364_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln217_6_fu_2385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln217_5_fu_2377_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln204_fu_2402_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln204_fu_2405_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1050_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln209_fu_2450_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln209_fu_2450_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln209_2_fu_2457_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln209_2_fu_2457_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1050_ce : STD_LOGIC;
    signal ap_CS_fsm_state157 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state157 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (123 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal grp_fu_1286_p00 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1286_p10 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1365_p10 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_2034_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_2090_p00 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_2090_p10 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_2104_p00 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln209_2_fu_2457_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln209_2_fu_2457_p10 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln209_fu_2450_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln209_fu_2450_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln92_fu_1747_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln92_fu_1747_p10 : STD_LOGIC_VECTOR (17 downto 0);

    component processInputChannel_s IS
    port (
        y_V : IN STD_LOGIC_VECTOR (8 downto 0);
        x_V : IN STD_LOGIC_VECTOR (8 downto 0);
        ci_in_V : IN STD_LOGIC_VECTOR (9 downto 0);
        ch_out_V : IN STD_LOGIC_VECTOR (9 downto 0);
        ImageCache_line_wid : IN STD_LOGIC_VECTOR (15 downto 0);
        ImageCache_ch_in_V : IN STD_LOGIC_VECTOR (9 downto 0);
        ImageCache_width_in : IN STD_LOGIC_VECTOR (8 downto 0);
        ImageCache_height_i : IN STD_LOGIC_VECTOR (8 downto 0);
        ImageCache_IBRAM_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        ImageCache_IBRAM_ce0 : OUT STD_LOGIC;
        ImageCache_IBRAM_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ImageCache_IBRAM_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ImageCache_IBRAM_we0 : OUT STD_LOGIC;
        ImageCache_IBRAM_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
        ImageCache_IBRAM_ce1 : OUT STD_LOGIC;
        ImageCache_IBRAM_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ImageCache_IBRAM_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ImageCache_IBRAM_we1 : OUT STD_LOGIC;
        WeightsCache_ch_out : IN STD_LOGIC_VECTOR (9 downto 0);
        WeightsCache_kernel : IN STD_LOGIC_VECTOR (1 downto 0);
        WBRAM_0_0_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        WBRAM_0_0_0_ce0 : OUT STD_LOGIC;
        WBRAM_0_0_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_0_we0 : OUT STD_LOGIC;
        WBRAM_0_0_0_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        WBRAM_0_0_0_ce1 : OUT STD_LOGIC;
        WBRAM_0_0_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_0_we1 : OUT STD_LOGIC;
        WBRAM_0_0_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        WBRAM_0_0_1_ce0 : OUT STD_LOGIC;
        WBRAM_0_0_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_1_we0 : OUT STD_LOGIC;
        WBRAM_0_0_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        WBRAM_0_0_1_ce1 : OUT STD_LOGIC;
        WBRAM_0_0_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_1_we1 : OUT STD_LOGIC;
        WBRAM_0_0_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        WBRAM_0_0_2_ce0 : OUT STD_LOGIC;
        WBRAM_0_0_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_2_we0 : OUT STD_LOGIC;
        WBRAM_0_0_2_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        WBRAM_0_0_2_ce1 : OUT STD_LOGIC;
        WBRAM_0_0_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_2_we1 : OUT STD_LOGIC;
        WBRAM_0_0_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        WBRAM_0_0_3_ce0 : OUT STD_LOGIC;
        WBRAM_0_0_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_3_we0 : OUT STD_LOGIC;
        WBRAM_0_0_3_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        WBRAM_0_0_3_ce1 : OUT STD_LOGIC;
        WBRAM_0_0_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_3_we1 : OUT STD_LOGIC;
        WBRAM_0_0_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        WBRAM_0_0_4_ce0 : OUT STD_LOGIC;
        WBRAM_0_0_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_4_we0 : OUT STD_LOGIC;
        WBRAM_0_0_4_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        WBRAM_0_0_4_ce1 : OUT STD_LOGIC;
        WBRAM_0_0_4_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_4_we1 : OUT STD_LOGIC;
        WBRAM_0_0_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        WBRAM_0_0_5_ce0 : OUT STD_LOGIC;
        WBRAM_0_0_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_5_we0 : OUT STD_LOGIC;
        WBRAM_0_0_5_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        WBRAM_0_0_5_ce1 : OUT STD_LOGIC;
        WBRAM_0_0_5_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_5_we1 : OUT STD_LOGIC;
        WBRAM_0_0_6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        WBRAM_0_0_6_ce0 : OUT STD_LOGIC;
        WBRAM_0_0_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_6_we0 : OUT STD_LOGIC;
        WBRAM_0_0_6_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        WBRAM_0_0_6_ce1 : OUT STD_LOGIC;
        WBRAM_0_0_6_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_6_we1 : OUT STD_LOGIC;
        WBRAM_0_0_7_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        WBRAM_0_0_7_ce0 : OUT STD_LOGIC;
        WBRAM_0_0_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_7_we0 : OUT STD_LOGIC;
        WBRAM_0_0_7_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        WBRAM_0_0_7_ce1 : OUT STD_LOGIC;
        WBRAM_0_0_7_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_7_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_7_we1 : OUT STD_LOGIC;
        WBRAM_0_0_8_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        WBRAM_0_0_8_ce0 : OUT STD_LOGIC;
        WBRAM_0_0_8_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_8_we0 : OUT STD_LOGIC;
        WBRAM_0_0_8_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        WBRAM_0_0_8_ce1 : OUT STD_LOGIC;
        WBRAM_0_0_8_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_8_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_8_we1 : OUT STD_LOGIC;
        OutputCache_OBRAM_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        OutputCache_OBRAM_ce0 : OUT STD_LOGIC;
        OutputCache_OBRAM_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OutputCache_OBRAM_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        OutputCache_OBRAM_we0 : OUT STD_LOGIC;
        OutputCache_OBRAM_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        OutputCache_OBRAM_ce1 : OUT STD_LOGIC;
        OutputCache_OBRAM_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OutputCache_OBRAM_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        OutputCache_OBRAM_we1 : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        y_V_ap_vld : IN STD_LOGIC;
        x_V_ap_vld : IN STD_LOGIC;
        ci_in_V_ap_vld : IN STD_LOGIC;
        ch_out_V_ap_vld : IN STD_LOGIC;
        ImageCache_line_wid_ap_vld : IN STD_LOGIC;
        ImageCache_ch_in_V_ap_vld : IN STD_LOGIC;
        ImageCache_width_in_ap_vld : IN STD_LOGIC;
        ImageCache_height_i_ap_vld : IN STD_LOGIC;
        WeightsCache_ch_out_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        WeightsCache_kernel_ap_vld : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component reg_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        in_r : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component fpga_top_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fpga_top_fptrunc_64ns_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fpga_top_fpext_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fpga_top_dsub_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fpga_top_dadd_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fpga_top_ddiv_64ns_64ns_64_31_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fpga_top_dexp_64ns_64ns_64_18_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fpga_top_mul_16ns_9ns_21_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component fpga_top_mul_10ns_10ns_19_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component fpga_top_mul_9ns_9ns_18_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component fpga_top_mul_18ns_10ns_23_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component fpga_top_mul_mul_10ns_9ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fpga_top_mul_mul_10ns_9ns_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component fpga_top_ImageCache_IBRAM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fpga_top_WBRAM_0_0_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fpga_top_OutputCache_OBRAM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fpga_top_GPoolCache_GBRAM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fpga_top_axilite_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        layer_width_V : OUT STD_LOGIC_VECTOR (8 downto 0);
        layer_height_V : OUT STD_LOGIC_VECTOR (8 downto 0);
        layer_channels_in_V : OUT STD_LOGIC_VECTOR (9 downto 0);
        layer_channels_out_V : OUT STD_LOGIC_VECTOR (9 downto 0);
        layer_kernel_V : OUT STD_LOGIC_VECTOR (1 downto 0);
        layer_stride_V : OUT STD_LOGIC_VECTOR (1 downto 0);
        layer_pad : OUT STD_LOGIC;
        layer_relu : OUT STD_LOGIC;
        layer_is_first_split_layer : OUT STD_LOGIC;
        layer_is_second_split_layer : OUT STD_LOGIC;
        layer_global_pool : OUT STD_LOGIC;
        layer_mem_addr_input_V : OUT STD_LOGIC_VECTOR (22 downto 0);
        layer_mem_addr_output_V : OUT STD_LOGIC_VECTOR (22 downto 0);
        layer_mem_addr_weights_V : OUT STD_LOGIC_VECTOR (22 downto 0);
        SHARED_DRAM : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_offset : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_weights_V : OUT STD_LOGIC_VECTOR (18 downto 0);
        input_offset : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fpga_top_memorybus_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    ImageCache_IBRAM_U : component fpga_top_ImageCache_IBRAM
    generic map (
        DataWidth => 32,
        AddressRange => 32768,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_address0,
        ce0 => ImageCache_IBRAM_ce0,
        q0 => ImageCache_IBRAM_q0,
        address1 => ImageCache_IBRAM_address1,
        ce1 => ImageCache_IBRAM_ce1,
        we1 => ImageCache_IBRAM_we1,
        d1 => ImageCache_IBRAM_d1);

    WBRAM_0_0_0_U : component fpga_top_WBRAM_0_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => WBRAM_0_0_0_address0,
        ce0 => WBRAM_0_0_0_ce0,
        q0 => WBRAM_0_0_0_q0,
        address1 => WBRAM_0_0_0_address1,
        ce1 => WBRAM_0_0_0_ce1,
        we1 => WBRAM_0_0_0_we1,
        d1 => grp_reg_float_s_fu_1586_ap_return);

    WBRAM_0_0_1_U : component fpga_top_WBRAM_0_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => WBRAM_0_0_1_address0,
        ce0 => WBRAM_0_0_1_ce0,
        q0 => WBRAM_0_0_1_q0,
        address1 => WBRAM_0_0_1_address1,
        ce1 => WBRAM_0_0_1_ce1,
        we1 => WBRAM_0_0_1_we1,
        d1 => grp_reg_float_s_fu_1586_ap_return);

    WBRAM_0_0_2_U : component fpga_top_WBRAM_0_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => WBRAM_0_0_2_address0,
        ce0 => WBRAM_0_0_2_ce0,
        q0 => WBRAM_0_0_2_q0,
        address1 => WBRAM_0_0_2_address1,
        ce1 => WBRAM_0_0_2_ce1,
        we1 => WBRAM_0_0_2_we1,
        d1 => grp_reg_float_s_fu_1586_ap_return);

    WBRAM_0_0_3_U : component fpga_top_WBRAM_0_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => WBRAM_0_0_3_address0,
        ce0 => WBRAM_0_0_3_ce0,
        q0 => WBRAM_0_0_3_q0,
        address1 => WBRAM_0_0_3_address1,
        ce1 => WBRAM_0_0_3_ce1,
        we1 => WBRAM_0_0_3_we1,
        d1 => grp_reg_float_s_fu_1586_ap_return);

    WBRAM_0_0_4_U : component fpga_top_WBRAM_0_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => WBRAM_0_0_4_address0,
        ce0 => WBRAM_0_0_4_ce0,
        q0 => WBRAM_0_0_4_q0,
        address1 => WBRAM_0_0_4_address1,
        ce1 => WBRAM_0_0_4_ce1,
        we1 => WBRAM_0_0_4_we1,
        d1 => grp_reg_float_s_fu_1586_ap_return);

    WBRAM_0_0_5_U : component fpga_top_WBRAM_0_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => WBRAM_0_0_5_address0,
        ce0 => WBRAM_0_0_5_ce0,
        q0 => WBRAM_0_0_5_q0,
        address1 => WBRAM_0_0_5_address1,
        ce1 => WBRAM_0_0_5_ce1,
        we1 => WBRAM_0_0_5_we1,
        d1 => grp_reg_float_s_fu_1586_ap_return);

    WBRAM_0_0_6_U : component fpga_top_WBRAM_0_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => WBRAM_0_0_6_address0,
        ce0 => WBRAM_0_0_6_ce0,
        q0 => WBRAM_0_0_6_q0,
        address1 => WBRAM_0_0_6_address1,
        ce1 => WBRAM_0_0_6_ce1,
        we1 => WBRAM_0_0_6_we1,
        d1 => grp_reg_float_s_fu_1586_ap_return);

    WBRAM_0_0_7_U : component fpga_top_WBRAM_0_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => WBRAM_0_0_7_address0,
        ce0 => WBRAM_0_0_7_ce0,
        q0 => WBRAM_0_0_7_q0,
        address1 => WBRAM_0_0_7_address1,
        ce1 => WBRAM_0_0_7_ce1,
        we1 => WBRAM_0_0_7_we1,
        d1 => grp_reg_float_s_fu_1586_ap_return);

    WBRAM_0_0_8_U : component fpga_top_WBRAM_0_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_address0,
        ce0 => WBRAM_0_0_8_ce0,
        q0 => WBRAM_0_0_8_q0,
        address1 => WBRAM_0_0_8_address1,
        ce1 => WBRAM_0_0_8_ce1,
        we1 => WBRAM_0_0_8_we1,
        d1 => grp_reg_float_s_fu_1586_ap_return);

    OutputCache_OBRAM_U : component fpga_top_OutputCache_OBRAM
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => OutputCache_OBRAM_address0,
        ce0 => OutputCache_OBRAM_ce0,
        we0 => OutputCache_OBRAM_we0,
        d0 => grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_d0,
        q0 => OutputCache_OBRAM_q0,
        address1 => grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_address1,
        ce1 => OutputCache_OBRAM_ce1,
        we1 => OutputCache_OBRAM_we1,
        d1 => grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_d1);

    GPoolCache_GBRAM_U : component fpga_top_GPoolCache_GBRAM
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => GPoolCache_GBRAM_address0,
        ce0 => GPoolCache_GBRAM_ce0,
        we0 => GPoolCache_GBRAM_we0,
        d0 => GPoolCache_GBRAM_d0,
        q0 => GPoolCache_GBRAM_q0);

    fpga_top_axilite_s_axi_U : component fpga_top_axilite_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITE_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITE_DATA_WIDTH)
    port map (
        AWVALID => s_axi_axilite_AWVALID,
        AWREADY => s_axi_axilite_AWREADY,
        AWADDR => s_axi_axilite_AWADDR,
        WVALID => s_axi_axilite_WVALID,
        WREADY => s_axi_axilite_WREADY,
        WDATA => s_axi_axilite_WDATA,
        WSTRB => s_axi_axilite_WSTRB,
        ARVALID => s_axi_axilite_ARVALID,
        ARREADY => s_axi_axilite_ARREADY,
        ARADDR => s_axi_axilite_ARADDR,
        RVALID => s_axi_axilite_RVALID,
        RREADY => s_axi_axilite_RREADY,
        RDATA => s_axi_axilite_RDATA,
        RRESP => s_axi_axilite_RRESP,
        BVALID => s_axi_axilite_BVALID,
        BREADY => s_axi_axilite_BREADY,
        BRESP => s_axi_axilite_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        layer_width_V => layer_width_V,
        layer_height_V => layer_height_V,
        layer_channels_in_V => layer_channels_in_V,
        layer_channels_out_V => layer_channels_out_V,
        layer_kernel_V => layer_kernel_V,
        layer_stride_V => layer_stride_V,
        layer_pad => layer_pad,
        layer_relu => layer_relu,
        layer_is_first_split_layer => layer_is_first_split_layer,
        layer_is_second_split_layer => layer_is_second_split_layer,
        layer_global_pool => layer_global_pool,
        layer_mem_addr_input_V => layer_mem_addr_input_V,
        layer_mem_addr_output_V => layer_mem_addr_output_V,
        layer_mem_addr_weights_V => layer_mem_addr_weights_V,
        SHARED_DRAM => SHARED_DRAM,
        weights_offset => weights_offset,
        num_weights_V => num_weights_V,
        input_offset => input_offset);

    fpga_top_memorybus_m_axi_U : component fpga_top_memorybus_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_MEMORYBUS_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MEMORYBUS_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MEMORYBUS_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MEMORYBUS_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MEMORYBUS_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MEMORYBUS_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MEMORYBUS_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MEMORYBUS_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_MEMORYBUS_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MEMORYBUS_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MEMORYBUS_CACHE_VALUE)
    port map (
        AWVALID => m_axi_memorybus_AWVALID,
        AWREADY => m_axi_memorybus_AWREADY,
        AWADDR => m_axi_memorybus_AWADDR,
        AWID => m_axi_memorybus_AWID,
        AWLEN => m_axi_memorybus_AWLEN,
        AWSIZE => m_axi_memorybus_AWSIZE,
        AWBURST => m_axi_memorybus_AWBURST,
        AWLOCK => m_axi_memorybus_AWLOCK,
        AWCACHE => m_axi_memorybus_AWCACHE,
        AWPROT => m_axi_memorybus_AWPROT,
        AWQOS => m_axi_memorybus_AWQOS,
        AWREGION => m_axi_memorybus_AWREGION,
        AWUSER => m_axi_memorybus_AWUSER,
        WVALID => m_axi_memorybus_WVALID,
        WREADY => m_axi_memorybus_WREADY,
        WDATA => m_axi_memorybus_WDATA,
        WSTRB => m_axi_memorybus_WSTRB,
        WLAST => m_axi_memorybus_WLAST,
        WID => m_axi_memorybus_WID,
        WUSER => m_axi_memorybus_WUSER,
        ARVALID => m_axi_memorybus_ARVALID,
        ARREADY => m_axi_memorybus_ARREADY,
        ARADDR => m_axi_memorybus_ARADDR,
        ARID => m_axi_memorybus_ARID,
        ARLEN => m_axi_memorybus_ARLEN,
        ARSIZE => m_axi_memorybus_ARSIZE,
        ARBURST => m_axi_memorybus_ARBURST,
        ARLOCK => m_axi_memorybus_ARLOCK,
        ARCACHE => m_axi_memorybus_ARCACHE,
        ARPROT => m_axi_memorybus_ARPROT,
        ARQOS => m_axi_memorybus_ARQOS,
        ARREGION => m_axi_memorybus_ARREGION,
        ARUSER => m_axi_memorybus_ARUSER,
        RVALID => m_axi_memorybus_RVALID,
        RREADY => m_axi_memorybus_RREADY,
        RDATA => m_axi_memorybus_RDATA,
        RLAST => m_axi_memorybus_RLAST,
        RID => m_axi_memorybus_RID,
        RUSER => m_axi_memorybus_RUSER,
        RRESP => m_axi_memorybus_RRESP,
        BVALID => m_axi_memorybus_BVALID,
        BREADY => m_axi_memorybus_BREADY,
        BRESP => m_axi_memorybus_BRESP,
        BID => m_axi_memorybus_BID,
        BUSER => m_axi_memorybus_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => memorybus_ARVALID,
        I_ARREADY => memorybus_ARREADY,
        I_ARADDR => memorybus_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => memorybus_RVALID,
        I_RREADY => memorybus_RREADY,
        I_RDATA => memorybus_RDATA,
        I_RID => memorybus_RID,
        I_RUSER => memorybus_RUSER,
        I_RRESP => memorybus_RRESP,
        I_RLAST => memorybus_RLAST,
        I_AWVALID => memorybus_AWVALID,
        I_AWREADY => memorybus_AWREADY,
        I_AWADDR => memorybus_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => memorybus_AWLEN,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => memorybus_WVALID,
        I_WREADY => memorybus_WREADY,
        I_WDATA => memorybus_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => memorybus_BVALID,
        I_BREADY => memorybus_BREADY,
        I_BRESP => memorybus_BRESP,
        I_BID => memorybus_BID,
        I_BUSER => memorybus_BUSER);

    grp_processInputChannel_s_fu_1003 : component processInputChannel_s
    port map (
        y_V => select_ln887_1_reg_2903,
        x_V => select_ln887_reg_2895,
        ci_in_V => t_V_12_reg_968,
        ch_out_V => layer_channels_out_V_1_reg_2494,
        ImageCache_line_wid => ImageCache_line_wid,
        ImageCache_ch_in_V => ImageCache_ch_in_V,
        ImageCache_width_in => ImageCache_width_in,
        ImageCache_height_i => ImageCache_height_i,
        ImageCache_IBRAM_address0 => grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_address0,
        ImageCache_IBRAM_ce0 => grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_ce0,
        ImageCache_IBRAM_d0 => grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_d0,
        ImageCache_IBRAM_q0 => ImageCache_IBRAM_q0,
        ImageCache_IBRAM_we0 => grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_we0,
        ImageCache_IBRAM_address1 => grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_address1,
        ImageCache_IBRAM_ce1 => grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_ce1,
        ImageCache_IBRAM_d1 => grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_d1,
        ImageCache_IBRAM_q1 => ap_const_lv32_0,
        ImageCache_IBRAM_we1 => grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_we1,
        WeightsCache_ch_out => WeightsCache_ch_out,
        WeightsCache_kernel => WeightsCache_kernel,
        WBRAM_0_0_0_address0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_address0,
        WBRAM_0_0_0_ce0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_ce0,
        WBRAM_0_0_0_d0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_d0,
        WBRAM_0_0_0_q0 => WBRAM_0_0_0_q0,
        WBRAM_0_0_0_we0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_we0,
        WBRAM_0_0_0_address1 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_address1,
        WBRAM_0_0_0_ce1 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_ce1,
        WBRAM_0_0_0_d1 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_d1,
        WBRAM_0_0_0_q1 => ap_const_lv32_0,
        WBRAM_0_0_0_we1 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_we1,
        WBRAM_0_0_1_address0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_address0,
        WBRAM_0_0_1_ce0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_ce0,
        WBRAM_0_0_1_d0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_d0,
        WBRAM_0_0_1_q0 => WBRAM_0_0_1_q0,
        WBRAM_0_0_1_we0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_we0,
        WBRAM_0_0_1_address1 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_address1,
        WBRAM_0_0_1_ce1 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_ce1,
        WBRAM_0_0_1_d1 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_d1,
        WBRAM_0_0_1_q1 => ap_const_lv32_0,
        WBRAM_0_0_1_we1 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_we1,
        WBRAM_0_0_2_address0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_address0,
        WBRAM_0_0_2_ce0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_ce0,
        WBRAM_0_0_2_d0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_d0,
        WBRAM_0_0_2_q0 => WBRAM_0_0_2_q0,
        WBRAM_0_0_2_we0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_we0,
        WBRAM_0_0_2_address1 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_address1,
        WBRAM_0_0_2_ce1 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_ce1,
        WBRAM_0_0_2_d1 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_d1,
        WBRAM_0_0_2_q1 => ap_const_lv32_0,
        WBRAM_0_0_2_we1 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_we1,
        WBRAM_0_0_3_address0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_address0,
        WBRAM_0_0_3_ce0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_ce0,
        WBRAM_0_0_3_d0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_d0,
        WBRAM_0_0_3_q0 => WBRAM_0_0_3_q0,
        WBRAM_0_0_3_we0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_we0,
        WBRAM_0_0_3_address1 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_address1,
        WBRAM_0_0_3_ce1 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_ce1,
        WBRAM_0_0_3_d1 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_d1,
        WBRAM_0_0_3_q1 => ap_const_lv32_0,
        WBRAM_0_0_3_we1 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_we1,
        WBRAM_0_0_4_address0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_address0,
        WBRAM_0_0_4_ce0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_ce0,
        WBRAM_0_0_4_d0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_d0,
        WBRAM_0_0_4_q0 => WBRAM_0_0_4_q0,
        WBRAM_0_0_4_we0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_we0,
        WBRAM_0_0_4_address1 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_address1,
        WBRAM_0_0_4_ce1 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_ce1,
        WBRAM_0_0_4_d1 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_d1,
        WBRAM_0_0_4_q1 => ap_const_lv32_0,
        WBRAM_0_0_4_we1 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_we1,
        WBRAM_0_0_5_address0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_address0,
        WBRAM_0_0_5_ce0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_ce0,
        WBRAM_0_0_5_d0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_d0,
        WBRAM_0_0_5_q0 => WBRAM_0_0_5_q0,
        WBRAM_0_0_5_we0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_we0,
        WBRAM_0_0_5_address1 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_address1,
        WBRAM_0_0_5_ce1 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_ce1,
        WBRAM_0_0_5_d1 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_d1,
        WBRAM_0_0_5_q1 => ap_const_lv32_0,
        WBRAM_0_0_5_we1 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_we1,
        WBRAM_0_0_6_address0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_address0,
        WBRAM_0_0_6_ce0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_ce0,
        WBRAM_0_0_6_d0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_d0,
        WBRAM_0_0_6_q0 => WBRAM_0_0_6_q0,
        WBRAM_0_0_6_we0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_we0,
        WBRAM_0_0_6_address1 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_address1,
        WBRAM_0_0_6_ce1 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_ce1,
        WBRAM_0_0_6_d1 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_d1,
        WBRAM_0_0_6_q1 => ap_const_lv32_0,
        WBRAM_0_0_6_we1 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_we1,
        WBRAM_0_0_7_address0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_address0,
        WBRAM_0_0_7_ce0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_ce0,
        WBRAM_0_0_7_d0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_d0,
        WBRAM_0_0_7_q0 => WBRAM_0_0_7_q0,
        WBRAM_0_0_7_we0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_we0,
        WBRAM_0_0_7_address1 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_address1,
        WBRAM_0_0_7_ce1 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_ce1,
        WBRAM_0_0_7_d1 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_d1,
        WBRAM_0_0_7_q1 => ap_const_lv32_0,
        WBRAM_0_0_7_we1 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_we1,
        WBRAM_0_0_8_address0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_address0,
        WBRAM_0_0_8_ce0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_ce0,
        WBRAM_0_0_8_d0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_d0,
        WBRAM_0_0_8_q0 => WBRAM_0_0_8_q0,
        WBRAM_0_0_8_we0 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_we0,
        WBRAM_0_0_8_address1 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_address1,
        WBRAM_0_0_8_ce1 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_ce1,
        WBRAM_0_0_8_d1 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_d1,
        WBRAM_0_0_8_q1 => ap_const_lv32_0,
        WBRAM_0_0_8_we1 => grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_we1,
        OutputCache_OBRAM_address0 => grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_address0,
        OutputCache_OBRAM_ce0 => grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_ce0,
        OutputCache_OBRAM_d0 => grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_d0,
        OutputCache_OBRAM_q0 => OutputCache_OBRAM_q0,
        OutputCache_OBRAM_we0 => grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_we0,
        OutputCache_OBRAM_address1 => grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_address1,
        OutputCache_OBRAM_ce1 => grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_ce1,
        OutputCache_OBRAM_d1 => grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_d1,
        OutputCache_OBRAM_q1 => ap_const_lv32_0,
        OutputCache_OBRAM_we1 => grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_we1,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        y_V_ap_vld => ap_const_logic_1,
        x_V_ap_vld => ap_const_logic_1,
        ci_in_V_ap_vld => ap_const_logic_1,
        ch_out_V_ap_vld => ap_const_logic_1,
        ImageCache_line_wid_ap_vld => ap_const_logic_1,
        ImageCache_ch_in_V_ap_vld => ap_const_logic_1,
        ImageCache_width_in_ap_vld => ap_const_logic_1,
        ImageCache_height_i_ap_vld => ap_const_logic_1,
        WeightsCache_ch_out_ap_vld => ap_const_logic_1,
        ap_start => grp_processInputChannel_s_fu_1003_ap_start,
        WeightsCache_kernel_ap_vld => ap_const_logic_1,
        ap_done => grp_processInputChannel_s_fu_1003_ap_done,
        ap_ready => grp_processInputChannel_s_fu_1003_ap_ready,
        ap_idle => grp_processInputChannel_s_fu_1003_ap_idle,
        ap_continue => grp_processInputChannel_s_fu_1003_ap_continue);

    grp_reg_float_s_fu_1586 : component reg_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        in_r => memorybus_addr_read_reg_2730,
        ap_return => grp_reg_float_s_fu_1586_ap_return,
        ap_ce => grp_reg_float_s_fu_1586_ap_ce);

    grp_reg_float_s_fu_1676 : component reg_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        in_r => memorybus_addr_2_rea_reg_2831,
        ap_return => grp_reg_float_s_fu_1676_ap_return,
        ap_ce => grp_reg_float_s_fu_1676_ap_ce);

    grp_reg_float_s_fu_1727 : component reg_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        in_r => memorybus_addr_1_rea_reg_2851,
        ap_return => grp_reg_float_s_fu_1727_ap_return,
        ap_ce => grp_reg_float_s_fu_1727_ap_ce);

    grp_reg_float_s_fu_1985 : component reg_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        in_r => memorybus_addr_4_rea_reg_2972,
        ap_return => grp_reg_float_s_fu_1985_ap_return,
        ap_ce => grp_reg_float_s_fu_1985_ap_ce);

    fpga_top_fadd_32ns_32ns_32_5_full_dsp_1_U103 : component fpga_top_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1046_p0,
        din1 => grp_fu_1046_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1046_p2);

    fpga_top_fptrunc_64ns_32_2_1_U104 : component fpga_top_fptrunc_64ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_7_reg_3179,
        ce => grp_fu_1050_ce,
        dout => grp_fu_1050_p1);

    fpga_top_fpext_32ns_64_2_1_U105 : component fpga_top_fpext_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => biased_reg_3130,
        ce => ap_const_logic_1,
        dout => grp_fu_1053_p1);

    fpga_top_fpext_32ns_64_2_1_U106 : component fpga_top_fpext_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1056_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_1056_p1);

    fpga_top_dsub_64ns_64ns_64_5_full_dsp_1_U107 : component fpga_top_dsub_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_1_reg_3157,
        din1 => tmp_4_reg_3163,
        ce => ap_const_logic_1,
        dout => grp_fu_1059_p2);

    fpga_top_dadd_64ns_64ns_64_5_full_dsp_1_U108 : component fpga_top_dadd_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_1_reg_3157,
        din1 => tmp_4_reg_3163,
        ce => ap_const_logic_1,
        dout => grp_fu_1063_p2);

    fpga_top_ddiv_64ns_64ns_64_31_1_U109 : component fpga_top_ddiv_64ns_64ns_64_31_1
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_5_reg_3169,
        din1 => tmp_6_reg_3174,
        ce => ap_const_logic_1,
        dout => grp_fu_1067_p2);

    fpga_top_dexp_64ns_64ns_64_18_full_dsp_1_U110 : component fpga_top_dexp_64ns_64ns_64_18_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 18,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv64_0,
        din1 => tmp_reg_3147,
        ce => ap_const_logic_1,
        dout => grp_fu_1071_p2);

    fpga_top_dexp_64ns_64ns_64_18_full_dsp_1_U111 : component fpga_top_dexp_64ns_64ns_64_18_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 18,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv64_0,
        din1 => tmp_3_reg_3152,
        ce => ap_const_logic_1,
        dout => grp_fu_1076_p2);

    fpga_top_mul_16ns_9ns_21_3_1_U112 : component fpga_top_mul_16ns_9ns_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1286_p0,
        din1 => grp_fu_1286_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1286_p2);

    fpga_top_mul_10ns_10ns_19_3_1_U113 : component fpga_top_mul_10ns_10ns_19_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1365_p0,
        din1 => grp_fu_1365_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1365_p2);

    fpga_top_mul_9ns_9ns_18_3_1_U114 : component fpga_top_mul_9ns_9ns_18_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2034_p0,
        din1 => grp_fu_2034_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2034_p2);

    fpga_top_mul_18ns_10ns_23_3_1_U115 : component fpga_top_mul_18ns_10ns_23_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 18,
        din1_WIDTH => 10,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2090_p0,
        din1 => grp_fu_2090_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2090_p2);

    fpga_top_mul_10ns_10ns_19_3_1_U116 : component fpga_top_mul_10ns_10ns_19_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2104_p0,
        din1 => grp_fu_2104_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2104_p2);

    fpga_top_mul_mul_10ns_9ns_16_1_1_U117 : component fpga_top_mul_mul_10ns_9ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 9,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln209_fu_2450_p0,
        din1 => mul_ln209_fu_2450_p1,
        dout => mul_ln209_fu_2450_p2);

    fpga_top_mul_mul_10ns_9ns_14_1_1_U118 : component fpga_top_mul_mul_10ns_9ns_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 9,
        dout_WIDTH => 14)
    port map (
        din0 => mul_ln209_2_fu_2457_p0,
        din1 => mul_ln209_2_fu_2457_p1,
        dout => mul_ln209_2_fu_2457_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state23) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((grp_fu_1081_p2 = ap_const_lv1_0) and (icmp_ln90_fu_1616_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state23)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state23);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
                elsif (((grp_fu_1081_p2 = ap_const_lv1_0) and (icmp_ln90_fu_1616_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                    ap_enable_reg_pp1_iter10 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state35) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln90_fu_1616_p2 = ap_const_lv1_1) and (grp_fu_1081_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state35)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state35);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
                elsif (((icmp_ln90_fu_1616_p2 = ap_const_lv1_1) and (grp_fu_1081_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                    ap_enable_reg_pp2_iter10 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state148) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((memorybus_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state147))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state148)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state148);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
                elsif (((memorybus_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state147))) then 
                    ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_processInputChannel_s_fu_1003_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_processInputChannel_s_fu_1003_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state60_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state60))) then 
                    ap_sync_reg_grp_processInputChannel_s_fu_1003_ap_done <= ap_const_logic_0;
                elsif ((grp_processInputChannel_s_fu_1003_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_processInputChannel_s_fu_1003_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_processInputChannel_s_fu_1003_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_processInputChannel_s_fu_1003_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state60_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state60))) then 
                    ap_sync_reg_grp_processInputChannel_s_fu_1003_ap_ready <= ap_const_logic_0;
                elsif ((grp_processInputChannel_s_fu_1003_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_processInputChannel_s_fu_1003_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_processInputChannel_s_fu_1003_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_processInputChannel_s_fu_1003_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_sync_grp_processInputChannel_s_fu_1003_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state60)) or ((icmp_ln130_fu_2015_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state59)))) then 
                    grp_processInputChannel_s_fu_1003_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_processInputChannel_s_fu_1003_ap_ready = ap_const_logic_1)) then 
                    grp_processInputChannel_s_fu_1003_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ImageCache_curr_img_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                ImageCache_curr_img <= select_ln51_2_fu_2001_p3;
            elsif ((((icmp_ln68_reg_2836_pp2_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((icmp_ln68_1_reg_2816_pp1_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
                ImageCache_curr_img <= grp_fu_1116_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ImageCache_curr_img <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    MemoryController_ch_1_fu_354_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln164_fu_2165_p2 = ap_const_lv1_1) and (ret_V_11_reg_2968 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
                MemoryController_ch_1_fu_354 <= MemoryController_ch_2_reg_3004;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                MemoryController_ch_1_fu_354 <= layer_channels_out_V_1_reg_2494;
            end if; 
        end if;
    end process;

    MemoryController_is_2_fu_350_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln164_fu_2165_p2 = ap_const_lv1_1) and (ret_V_11_reg_2968 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
                MemoryController_is_2_fu_350 <= MemoryController_is_4_reg_3019;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                MemoryController_is_2_fu_350 <= layer_is_second_spli_reg_2483;
            end if; 
        end if;
    end process;

    MemoryController_la_3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln68_fu_1692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((icmp_ln68_1_fu_1641_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((icmp_ln68_2_fu_1931_p2 = ap_const_lv1_0) and (icmp_ln887_3_reg_2939 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state48)))) then 
                MemoryController_la_3 <= grp_fu_1089_p2;
            elsif (((icmp_ln90_fu_1616_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                MemoryController_la_3 <= add_ln214_3_fu_1630_p2;
            elsif (((icmp_ln887_fu_1350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                MemoryController_la_3 <= layer_mem_addr_input_reg_2473;
            end if; 
        end if;
    end process;

    SHARED_DRAM_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    empty_24_reg_871_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln99_reg_2696 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                empty_24_reg_871 <= select_ln126_1_reg_2720;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                empty_24_reg_871 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_op_assign_1_reg_992_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln188_fu_2427_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                i_op_assign_1_reg_992 <= i_fu_2433_p2;
            elsif (((memorybus_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state147))) then 
                i_op_assign_1_reg_992 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_924_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state66) and ((icmp_ln164_fu_2165_p2 = ap_const_lv1_1) or (ret_V_11_reg_2968 = ap_const_lv1_1)))) then 
                indvar_flatten_reg_924 <= add_ln96_reg_2890;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                indvar_flatten_reg_924 <= ap_const_lv18_0;
            end if; 
        end if;
    end process;

    input_offset_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    layer_channels_in_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    layer_channels_out_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    layer_global_pool_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    layer_height_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    layer_is_first_split_layer_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    layer_is_second_split_layer_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    layer_kernel_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    layer_mem_addr_input_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    layer_mem_addr_output_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    layer_mem_addr_weights_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    layer_relu_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    layer_stride_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    layer_width_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    loads_left_0_fu_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_2_reg_2808 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                loads_left_0_fu_342 <= grp_fu_1130_p2;
            elsif (((icmp_ln887_fu_1350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                loads_left_0_fu_342 <= mul_ln209_1_reg_2569;
            end if; 
        end if;
    end process;

    loads_left_2_reg_915_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_1_reg_2812 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                loads_left_2_reg_915 <= grp_fu_1130_p2;
            elsif (((grp_fu_1081_p2 = ap_const_lv1_1) and (icmp_ln90_fu_1616_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                loads_left_2_reg_915 <= loads_left_0_fu_342;
            end if; 
        end if;
    end process;

    loads_left_4_fu_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_2_fu_1931_p2 = ap_const_lv1_1) and (icmp_ln887_3_reg_2939 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                loads_left_4_fu_346 <= sub_ln214_2_fu_1966_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                loads_left_4_fu_346 <= ap_phi_mux_loads_left_2_phi_fu_918_p4;
            end if; 
        end if;
    end process;

    p_0137_0_i_reg_825_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                p_0137_0_i_reg_825 <= ap_const_lv19_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                p_0137_0_i_reg_825 <= dram_addr_V_reg_2671;
            end if; 
        end if;
    end process;

    ret_V_15_reg_946_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state66) and ((icmp_ln164_fu_2165_p2 = ap_const_lv1_1) or (ret_V_11_reg_2968 = ap_const_lv1_1)))) then 
                ret_V_15_reg_946 <= x_V_1_fu_2297_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                ret_V_15_reg_946 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    t_V_11_reg_957_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_3_fu_1874_p2 = ap_const_lv1_0) and (icmp_ln96_fu_1787_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                t_V_11_reg_957 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                t_V_11_reg_957 <= ci_V_3_reg_2957;
            end if; 
        end if;
    end process;

    t_V_12_reg_968_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state48) and (((icmp_ln887_3_reg_2939 = ap_const_lv1_1) and (ret_V_11_fu_1980_p2 = ap_const_lv1_0)) or ((icmp_ln68_2_fu_1931_p2 = ap_const_lv1_1) and (ret_V_11_fu_1980_p2 = ap_const_lv1_0))))) then 
                t_V_12_reg_968 <= ap_const_lv10_0;
            elsif (((ap_const_boolean_0 = ap_block_state60_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state60))) then 
                t_V_12_reg_968 <= ci_V_4_reg_2980;
            end if; 
        end if;
    end process;

    t_V_14_reg_980_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state146)) then 
                t_V_14_reg_980 <= co_V_1_reg_3042;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
                t_V_14_reg_980 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    t_V_17_reg_935_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state66) and ((icmp_ln164_fu_2165_p2 = ap_const_lv1_1) or (ret_V_11_reg_2968 = ap_const_lv1_1)))) then 
                t_V_17_reg_935 <= select_ln887_1_reg_2903;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                t_V_17_reg_935 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    t_V_1_reg_837_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                t_V_1_reg_837 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                t_V_1_reg_837 <= ci_V_reg_2618;
            end if; 
        end if;
    end process;

    t_V_3_reg_893_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fu_1081_p2 = ap_const_lv1_0) and (icmp_ln90_fu_1616_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                t_V_3_reg_893 <= ap_const_lv10_0;
            elsif (((icmp_ln68_1_fu_1641_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                t_V_3_reg_893 <= ci_V_2_fu_1646_p2;
            end if; 
        end if;
    end process;

    t_V_5_reg_904_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln90_fu_1616_p2 = ap_const_lv1_1) and (grp_fu_1081_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                t_V_5_reg_904 <= ap_const_lv10_0;
            elsif (((icmp_ln68_fu_1692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                t_V_5_reg_904 <= ci_V_1_fu_1697_p2;
            end if; 
        end if;
    end process;

    t_V_6_reg_859_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln99_reg_2696 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                t_V_6_reg_859 <= select_ln126_reg_2715;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                t_V_6_reg_859 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    t_V_8_reg_882_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                t_V_8_reg_882 <= x_V_reg_2803;
            elsif (((icmp_ln887_fu_1350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                t_V_8_reg_882 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    t_V_reg_848_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln99_reg_2696 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                t_V_reg_848 <= add_ln700_reg_2725;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                t_V_reg_848 <= p_0137_0_i_reg_825;
            end if; 
        end if;
    end process;

    weights_offset_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((layer_global_pool_re_reg_2479 = ap_const_lv1_1) and (icmp_ln178_reg_2995 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state138) and (memorybus_BVALID = ap_const_logic_1))) then
                GPoolCache_GBRAM_ad_1_reg_3191 <= zext_ln544_7_reg_3109(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                ImageCache_ch_in_V <= layer_channels_in_V_0_data_reg;
                ImageCache_height_i <= layer_height_V_0_data_reg;
                ImageCache_line_wid <= mul_ln209_fu_2450_p2;
                ImageCache_width_in <= layer_width_V_0_data_reg;
                MemoryController_ch <= layer_channels_out_V_0_data_reg;
                MemoryController_is <= (0=>layer_is_second_split_layer_0_data_reg, others=>'-');
                MemoryController_is_1 <= (0=>layer_is_first_split_layer_0_data_reg, others=>'-');
                MemoryController_la <= layer_mem_addr_weights_V_0_data_reg;
                MemoryController_la_2 <= layer_mem_addr_output_V_0_data_reg;
                MemoryController_wi <= select_ln101_fu_1248_p3;
                ProcessingElement_r <= (0=>layer_relu_0_data_reg, others=>'-');
                WeightsCache_ch_out <= layer_channels_out_V_0_data_reg;
                WeightsCache_kernel <= layer_kernel_V_0_data_reg;
                icmp_ln879_4_reg_2541 <= icmp_ln879_4_fu_1228_p2;
                input_offset_read_reg_2463 <= input_offset_0_data_reg;
                layer_channels_in_V_s_reg_2504 <= layer_channels_in_V_0_data_reg;
                layer_channels_out_V_1_reg_2494 <= layer_channels_out_V_0_data_reg;
                layer_global_pool_re_reg_2479 <= (0=>layer_global_pool_0_data_reg, others=>'-');
                layer_height_V_read_reg_2516 <= layer_height_V_0_data_reg;
                layer_is_second_spli_reg_2483 <= (0=>layer_is_second_split_layer_0_data_reg, others=>'-');
                layer_kernel_V_read_reg_2488 <= layer_kernel_V_0_data_reg;
                layer_mem_addr_input_reg_2473 <= layer_mem_addr_input_V_0_data_reg;
                layer_width_V_read_reg_2522 <= layer_width_V_0_data_reg;
                mul_ln209_reg_2535 <= mul_ln209_fu_2450_p2;
                tmp_13_reg_2530 <= SHARED_DRAM_0_data_reg(31 downto 2);
                weights_offset_read_reg_2468 <= weights_offset_0_data_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln96_fu_1787_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                ImageCache_ch_in_V_s_reg_2929 <= ImageCache_ch_in_V;
                icmp_ln887_3_reg_2939 <= icmp_ln887_3_fu_1874_p2;
                select_ln887_1_reg_2903 <= select_ln887_1_fu_1817_p3;
                select_ln887_2_reg_2914 <= select_ln887_2_fu_1850_p3;
                select_ln887_reg_2895 <= select_ln887_fu_1803_p3;
                trunc_ln887_1_reg_2924 <= trunc_ln887_1_fu_1862_p1;
                trunc_ln887_reg_2909 <= trunc_ln887_fu_1825_p1;
                    zext_ln887_2_reg_2934(9 downto 0) <= zext_ln887_2_fu_1870_p1(9 downto 0);
                    zext_ln887_3_reg_2919(8 downto 0) <= zext_ln887_3_fu_1858_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_3_fu_1874_p2 = ap_const_lv1_0) and (icmp_ln96_fu_1787_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    MAX_ADDR_V_1_reg_2943(15 downto 2) <= MAX_ADDR_V_1_fu_1890_p2(15 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_fu_1350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    MAX_ADDR_V_reg_2661(15 downto 2) <= MAX_ADDR_V_fu_1402_p2(15 downto 2);
                    lhs_V_2_reg_2652(31 downto 0) <= lhs_V_2_fu_1394_p1(31 downto 0);
                    zext_ln887_1_reg_2646(9 downto 0) <= zext_ln887_1_fu_1391_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then
                MemoryController_ch_2_reg_3004 <= MemoryController_ch;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then
                MemoryController_is_4_reg_3019 <= MemoryController_is;
                MemoryController_pi <= add_ln214_fu_2141_p2;
                trunc_ln214_3_reg_3034 <= trunc_ln214_3_fu_2161_p1;
                trunc_ln215_1_reg_3024 <= trunc_ln215_1_fu_2153_p1;
                trunc_ln321_2_reg_3029 <= trunc_ln321_2_fu_2157_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then
                ProcessingElement_r_1_reg_3137 <= ProcessingElement_r;
                biased_reg_3130 <= grp_fu_1046_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = SHARED_DRAM_0_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = SHARED_DRAM_0_ack_out) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = SHARED_DRAM_0_vld_reg)))) then
                SHARED_DRAM_0_data_reg <= SHARED_DRAM;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln1352_reg_2599 <= add_ln1352_fu_1332_p2;
                icmp_ln879_2_reg_2609 <= icmp_ln879_2_fu_1341_p2;
                icmp_ln879_reg_2589 <= icmp_ln879_fu_1313_p2;
                    lhs_V_1_reg_2604(31 downto 0) <= lhs_V_1_fu_1338_p1(31 downto 0);
                    lhs_V_reg_2594(9 downto 0) <= lhs_V_fu_1318_p1(9 downto 0);
                mul_ln209_1_reg_2569 <= grp_fu_1286_p2;
                mul_ln209_2_reg_2574 <= mul_ln209_2_fu_2457_p2;
                    p_cast_reg_2559(29 downto 0) <= p_cast_fu_1292_p1(29 downto 0);
                ret_V_reg_2579 <= ret_V_fu_1304_p2;
                    zext_ln209_5_reg_2584(9 downto 0) <= zext_ln209_5_fu_1310_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln99_reg_2696 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln700_reg_2725 <= add_ln700_fu_1580_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                add_ln96_reg_2890 <= add_ln96_fu_1792_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln99_reg_2691 <= add_ln99_fu_1444_p2;
                dram_addr_V_reg_2671 <= dram_addr_V_fu_1422_p2;
                    weights_per_filter_V_reg_2666(3) <= weights_per_filter_V_fu_1412_p3(3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_fu_1350_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                bias_or_1x1_reg_2628 <= bias_or_1x1_fu_1375_p2;
                ret_V_1_reg_2633 <= ret_V_1_fu_1380_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_3_reg_2939 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                ci_V_3_reg_2957 <= ci_V_3_fu_1936_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then
                ci_V_4_reg_2980 <= ci_V_4_fu_2020_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                ci_V_reg_2618 <= ci_V_fu_1355_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ret_V_11_reg_2968 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                co_V_1_reg_3042 <= co_V_1_fu_2170_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then
                icmp_ln178_reg_2995 <= icmp_ln178_fu_2073_p2;
                xy_offset_V_reg_2990 <= xy_offset_V_fu_2062_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                icmp_ln188_reg_3201 <= icmp_ln188_fu_2427_p2;
                icmp_ln188_reg_3201_pp3_iter1_reg <= icmp_ln188_reg_3201;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp3_stage0_11001)) then
                icmp_ln188_reg_3201_pp3_iter2_reg <= icmp_ln188_reg_3201_pp3_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state152)) then
                icmp_ln191_reg_3215 <= icmp_ln191_fu_2444_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln68_1_reg_2816 <= icmp_ln68_1_fu_1641_p2;
                icmp_ln68_1_reg_2816_pp1_iter1_reg <= icmp_ln68_1_reg_2816;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                icmp_ln68_1_reg_2816_pp1_iter2_reg <= icmp_ln68_1_reg_2816_pp1_iter1_reg;
                icmp_ln68_1_reg_2816_pp1_iter3_reg <= icmp_ln68_1_reg_2816_pp1_iter2_reg;
                icmp_ln68_1_reg_2816_pp1_iter4_reg <= icmp_ln68_1_reg_2816_pp1_iter3_reg;
                icmp_ln68_1_reg_2816_pp1_iter5_reg <= icmp_ln68_1_reg_2816_pp1_iter4_reg;
                icmp_ln68_1_reg_2816_pp1_iter6_reg <= icmp_ln68_1_reg_2816_pp1_iter5_reg;
                icmp_ln68_1_reg_2816_pp1_iter7_reg <= icmp_ln68_1_reg_2816_pp1_iter6_reg;
                icmp_ln68_1_reg_2816_pp1_iter8_reg <= icmp_ln68_1_reg_2816_pp1_iter7_reg;
                icmp_ln68_1_reg_2816_pp1_iter9_reg <= icmp_ln68_1_reg_2816_pp1_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln68_reg_2836 <= icmp_ln68_fu_1692_p2;
                icmp_ln68_reg_2836_pp2_iter1_reg <= icmp_ln68_reg_2836;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                icmp_ln68_reg_2836_pp2_iter2_reg <= icmp_ln68_reg_2836_pp2_iter1_reg;
                icmp_ln68_reg_2836_pp2_iter3_reg <= icmp_ln68_reg_2836_pp2_iter2_reg;
                icmp_ln68_reg_2836_pp2_iter4_reg <= icmp_ln68_reg_2836_pp2_iter3_reg;
                icmp_ln68_reg_2836_pp2_iter5_reg <= icmp_ln68_reg_2836_pp2_iter4_reg;
                icmp_ln68_reg_2836_pp2_iter6_reg <= icmp_ln68_reg_2836_pp2_iter5_reg;
                icmp_ln68_reg_2836_pp2_iter7_reg <= icmp_ln68_reg_2836_pp2_iter6_reg;
                icmp_ln68_reg_2836_pp2_iter8_reg <= icmp_ln68_reg_2836_pp2_iter7_reg;
                icmp_ln68_reg_2836_pp2_iter9_reg <= icmp_ln68_reg_2836_pp2_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln90_fu_1616_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                icmp_ln887_1_reg_2812 <= grp_fu_1081_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln90_fu_1616_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                icmp_ln887_2_reg_2808 <= grp_fu_1081_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln99_reg_2696 <= icmp_ln99_fu_1453_p2;
                icmp_ln99_reg_2696_pp0_iter1_reg <= icmp_ln99_reg_2696;
                icmp_ln99_reg_2696_pp0_iter2_reg <= icmp_ln99_reg_2696_pp0_iter1_reg;
                icmp_ln99_reg_2696_pp0_iter3_reg <= icmp_ln99_reg_2696_pp0_iter2_reg;
                icmp_ln99_reg_2696_pp0_iter4_reg <= icmp_ln99_reg_2696_pp0_iter3_reg;
                rowID_V_reg_2706_pp0_iter1_reg <= rowID_V_reg_2706;
                rowID_V_reg_2706_pp0_iter2_reg <= rowID_V_reg_2706_pp0_iter1_reg;
                rowID_V_reg_2706_pp0_iter3_reg <= rowID_V_reg_2706_pp0_iter2_reg;
                rowID_V_reg_2706_pp0_iter4_reg <= rowID_V_reg_2706_pp0_iter3_reg;
                t_V_6_reg_859_pp0_iter1_reg <= t_V_6_reg_859;
                t_V_6_reg_859_pp0_iter2_reg <= t_V_6_reg_859_pp0_iter1_reg;
                t_V_6_reg_859_pp0_iter3_reg <= t_V_6_reg_859_pp0_iter2_reg;
                t_V_6_reg_859_pp0_iter4_reg <= t_V_6_reg_859_pp0_iter3_reg;
                weightID_V_reg_2711_pp0_iter1_reg <= weightID_V_reg_2711;
                weightID_V_reg_2711_pp0_iter2_reg <= weightID_V_reg_2711_pp0_iter1_reg;
                weightID_V_reg_2711_pp0_iter3_reg <= weightID_V_reg_2711_pp0_iter2_reg;
                weightID_V_reg_2711_pp0_iter4_reg <= weightID_V_reg_2711_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (input_offset_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (input_offset_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (input_offset_0_vld_reg = ap_const_logic_1)))) then
                input_offset_0_data_reg <= input_offset;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (layer_channels_in_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (layer_channels_in_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (layer_channels_in_V_0_vld_reg = ap_const_logic_1)))) then
                layer_channels_in_V_0_data_reg <= layer_channels_in_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (layer_channels_out_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (layer_channels_out_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (layer_channels_out_V_0_vld_reg = ap_const_logic_1)))) then
                layer_channels_out_V_0_data_reg <= layer_channels_out_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (layer_global_pool_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (layer_global_pool_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (layer_global_pool_0_vld_reg = ap_const_logic_1)))) then
                layer_global_pool_0_data_reg <= layer_global_pool;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (layer_height_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (layer_height_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (layer_height_V_0_vld_reg = ap_const_logic_1)))) then
                layer_height_V_0_data_reg <= layer_height_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (layer_is_first_split_layer_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (layer_is_first_split_layer_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (layer_is_first_split_layer_0_vld_reg = ap_const_logic_1)))) then
                layer_is_first_split_layer_0_data_reg <= layer_is_first_split_layer;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (layer_is_second_split_layer_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (layer_is_second_split_layer_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (layer_is_second_split_layer_0_vld_reg = ap_const_logic_1)))) then
                layer_is_second_split_layer_0_data_reg <= layer_is_second_split_layer;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (layer_kernel_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (layer_kernel_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (layer_kernel_V_0_vld_reg = ap_const_logic_1)))) then
                layer_kernel_V_0_data_reg <= layer_kernel_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (layer_mem_addr_input_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (layer_mem_addr_input_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (layer_mem_addr_input_V_0_vld_reg = ap_const_logic_1)))) then
                layer_mem_addr_input_V_0_data_reg <= layer_mem_addr_input_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (layer_mem_addr_output_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (layer_mem_addr_output_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (layer_mem_addr_output_V_0_vld_reg = ap_const_logic_1)))) then
                layer_mem_addr_output_V_0_data_reg <= layer_mem_addr_output_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (layer_mem_addr_weights_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (layer_mem_addr_weights_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (layer_mem_addr_weights_V_0_vld_reg = ap_const_logic_1)))) then
                layer_mem_addr_weights_V_0_data_reg <= layer_mem_addr_weights_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (layer_relu_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (layer_relu_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (layer_relu_0_vld_reg = ap_const_logic_1)))) then
                layer_relu_0_data_reg <= layer_relu;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (layer_stride_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (layer_stride_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (layer_stride_V_0_vld_reg = ap_const_logic_1)))) then
                layer_stride_V_0_data_reg <= layer_stride_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (layer_width_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (layer_width_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (layer_width_V_0_vld_reg = ap_const_logic_1)))) then
                layer_width_V_0_data_reg <= layer_width_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                loads_left_0_load_reg_2793 <= loads_left_0_fu_342;
                x_V_reg_2803 <= x_V_fu_1621_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_reg_2836_pp2_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                memorybus_addr_1_rea_reg_2851 <= memorybus_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_fu_1692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                memorybus_addr_1_reg_2845 <= zext_ln138_fu_1717_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_1_reg_2816_pp1_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                memorybus_addr_2_rea_reg_2831 <= memorybus_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_1_fu_1641_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                memorybus_addr_2_reg_2825 <= zext_ln138_1_fu_1666_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln96_fu_1787_p2 = ap_const_lv1_1) and (layer_global_pool_re_reg_2479 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                memorybus_addr_3_reg_2948 <= zext_ln191_fu_1921_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state56) and (memorybus_RVALID = ap_const_logic_1))) then
                memorybus_addr_4_rea_reg_2972 <= memorybus_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_2_fu_1931_p2 = ap_const_lv1_0) and (icmp_ln887_3_reg_2939 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                memorybus_addr_4_reg_2962 <= zext_ln138_2_fu_1956_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln164_fu_2165_p2 = ap_const_lv1_0) and (ret_V_11_reg_2968 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                memorybus_addr_5_reg_3098 <= zext_ln174_fu_2279_p1(32 - 1 downto 0);
                select_ln879_reg_3047 <= select_ln879_fu_2219_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln99_reg_2696_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                memorybus_addr_read_reg_2730 <= memorybus_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln99_fu_1453_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                memorybus_addr_reg_2700 <= zext_ln123_fu_1490_p1(32 - 1 downto 0);
                rowID_V_reg_2706 <= rowID_V_fu_1533_p3;
                weightID_V_reg_2711 <= weightID_V_fu_1540_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                mul_ln92_reg_2882 <= mul_ln92_fu_1747_p2;
                    zext_ln209_7_reg_2877(9 downto 0) <= zext_ln209_7_fu_1738_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state145)) then
                new_ch_reg_3196 <= grp_fu_1046_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                raw_reg_3120 <= OutputCache_OBRAM_q0;
                weight_1_reg_3125 <= weight_1_fu_2390_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln96_fu_1787_p2 = ap_const_lv1_1) and (layer_global_pool_re_reg_2479 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then
                reg_1141 <= MemoryController_ch_1_fu_354;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state140) or ((icmp_ln188_reg_3201_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then
                reg_1145 <= GPoolCache_GBRAM_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((memorybus_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state132))) then
                result_reg_3184 <= result_fu_2416_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state48) and ((icmp_ln68_2_fu_1931_p2 = ap_const_lv1_1) or (icmp_ln887_3_reg_2939 = ap_const_lv1_1)))) then
                ret_V_11_reg_2968 <= ret_V_11_fu_1980_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln99_fu_1453_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln126_1_reg_2720 <= select_ln126_1_fu_1572_p3;
                select_ln126_reg_2715 <= select_ln126_fu_1564_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ProcessingElement_r_1_reg_3137) and (ap_const_logic_1 = ap_CS_fsm_state94))) then
                tmp_1_reg_3157 <= grp_fu_1071_p2;
                tmp_4_reg_3163 <= grp_fu_1076_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ProcessingElement_r_1_reg_3137) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                tmp_3_reg_3152 <= grp_fu_1056_p1;
                tmp_reg_3147 <= grp_fu_1053_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ProcessingElement_r_1_reg_3137) and (ap_const_logic_1 = ap_CS_fsm_state99))) then
                tmp_5_reg_3169 <= grp_fu_1059_p2;
                tmp_6_reg_3174 <= grp_fu_1063_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ProcessingElement_r_1_reg_3137) and (ap_const_logic_1 = ap_CS_fsm_state130))) then
                tmp_7_reg_3179 <= grp_fu_1067_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln879_2_reg_2609 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                trunc_ln214_reg_2686 <= trunc_ln214_fu_1436_p1;
                trunc_ln215_reg_2676 <= trunc_ln215_fu_1428_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln879_2_reg_2609 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                trunc_ln321_reg_2681 <= trunc_ln321_fu_1432_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (weights_offset_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (weights_offset_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (weights_offset_0_vld_reg = ap_const_logic_1)))) then
                weights_offset_0_data_reg <= weights_offset;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state67)) then
                    zext_ln544_7_reg_3109(9 downto 0) <= zext_ln544_7_fu_2302_p1(9 downto 0);
            end if;
        end if;
    end process;
    p_cast_reg_2559(32 downto 30) <= "000";
    zext_ln209_5_reg_2584(18 downto 10) <= "000000000";
    lhs_V_reg_2594(13 downto 10) <= "0000";
    lhs_V_1_reg_2604(32) <= '0';
    zext_ln887_1_reg_2646(20 downto 10) <= "00000000000";
    lhs_V_2_reg_2652(32) <= '0';
    MAX_ADDR_V_reg_2661(1 downto 0) <= "11";
    weights_per_filter_V_reg_2666(2 downto 0) <= "001";
    zext_ln209_7_reg_2877(18 downto 10) <= "000000000";
    zext_ln887_3_reg_2919(17 downto 9) <= "000000000";
    zext_ln887_2_reg_2934(20 downto 10) <= "00000000000";
    MAX_ADDR_V_1_reg_2943(1 downto 0) <= "11";
    zext_ln544_7_reg_3109(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_CS_fsm_state49, ap_CS_fsm_state56, ap_CS_fsm_state132, ap_CS_fsm_state133, ap_CS_fsm_state138, ap_CS_fsm_state147, ap_enable_reg_pp3_iter3, ap_CS_fsm_state156, layer_global_pool_re_reg_2479, memorybus_AWREADY, memorybus_WREADY, memorybus_ARREADY, memorybus_RVALID, memorybus_BVALID, ap_CS_fsm_state47, icmp_ln96_fu_1787_p2, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter2, ap_CS_fsm_state6, icmp_ln887_fu_1350_p2, icmp_ln99_fu_1453_p2, ap_CS_fsm_state22, icmp_ln90_fu_1616_p2, grp_fu_1081_p2, icmp_ln68_1_fu_1641_p2, ap_enable_reg_pp1_iter0, icmp_ln68_fu_1692_p2, ap_enable_reg_pp2_iter0, icmp_ln887_3_reg_2939, ap_CS_fsm_state48, icmp_ln68_2_fu_1931_p2, ret_V_11_fu_1980_p2, ret_V_11_reg_2968, ap_CS_fsm_state59, icmp_ln130_fu_2015_p2, icmp_ln178_reg_2995, ap_CS_fsm_state66, icmp_ln164_fu_2165_p2, icmp_ln188_fu_2427_p2, icmp_ln191_fu_2444_p2, ap_CS_fsm_state152, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter5, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter9, ap_enable_reg_pp1_iter10, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter9, ap_enable_reg_pp2_iter10, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter1, ap_CS_fsm_state60, ap_block_state60_on_subcall_done, ap_predicate_op904_writeresp_state156)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln887_fu_1350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln99_fu_1453_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln99_fu_1453_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state22 => 
                if (((icmp_ln90_fu_1616_p2 = ap_const_lv1_1) and (grp_fu_1081_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((grp_fu_1081_p2 = ap_const_lv1_1) and (icmp_ln90_fu_1616_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                elsif (((grp_fu_1081_p2 = ap_const_lv1_0) and (icmp_ln90_fu_1616_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln68_1_fu_1641_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter10 = ap_const_logic_1) and (ap_enable_reg_pp1_iter9 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter10 = ap_const_logic_1) and (ap_enable_reg_pp1_iter9 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((icmp_ln68_1_fu_1641_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((icmp_ln68_fu_1692_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter10 = ap_const_logic_1) and (ap_enable_reg_pp2_iter9 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter10 = ap_const_logic_1) and (ap_enable_reg_pp2_iter9 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((icmp_ln68_fu_1692_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if (((icmp_ln96_fu_1787_p2 = ap_const_lv1_1) and (layer_global_pool_re_reg_2479 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state156;
                elsif (((icmp_ln96_fu_1787_p2 = ap_const_lv1_1) and (layer_global_pool_re_reg_2479 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state147;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state48 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state48) and (((icmp_ln887_3_reg_2939 = ap_const_lv1_1) and (ret_V_11_fu_1980_p2 = ap_const_lv1_0)) or ((icmp_ln68_2_fu_1931_p2 = ap_const_lv1_1) and (ret_V_11_fu_1980_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state48) and (((ret_V_11_fu_1980_p2 = ap_const_lv1_1) and (icmp_ln887_3_reg_2939 = ap_const_lv1_1)) or ((ret_V_11_fu_1980_p2 = ap_const_lv1_1) and (icmp_ln68_2_fu_1931_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state49 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state49) and (memorybus_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state56) and (memorybus_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state59 => 
                if (((icmp_ln130_fu_2015_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_state60 => 
                if (((ap_const_boolean_0 = ap_block_state60_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state60))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state66) and ((icmp_ln164_fu_2165_p2 = ap_const_lv1_1) or (ret_V_11_reg_2968 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state130 => 
                ap_NS_fsm <= ap_ST_fsm_state131;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state132 => 
                if (((memorybus_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state132))) then
                    ap_NS_fsm <= ap_ST_fsm_state133;
                else
                    ap_NS_fsm <= ap_ST_fsm_state132;
                end if;
            when ap_ST_fsm_state133 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state133) and (memorybus_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state134;
                else
                    ap_NS_fsm <= ap_ST_fsm_state133;
                end if;
            when ap_ST_fsm_state134 => 
                ap_NS_fsm <= ap_ST_fsm_state135;
            when ap_ST_fsm_state135 => 
                ap_NS_fsm <= ap_ST_fsm_state136;
            when ap_ST_fsm_state136 => 
                ap_NS_fsm <= ap_ST_fsm_state137;
            when ap_ST_fsm_state137 => 
                ap_NS_fsm <= ap_ST_fsm_state138;
            when ap_ST_fsm_state138 => 
                if (((layer_global_pool_re_reg_2479 = ap_const_lv1_1) and (icmp_ln178_reg_2995 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state138) and (memorybus_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state139;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state138) and (memorybus_BVALID = ap_const_logic_1) and ((icmp_ln178_reg_2995 = ap_const_lv1_1) or (layer_global_pool_re_reg_2479 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state146;
                else
                    ap_NS_fsm <= ap_ST_fsm_state138;
                end if;
            when ap_ST_fsm_state139 => 
                ap_NS_fsm <= ap_ST_fsm_state140;
            when ap_ST_fsm_state140 => 
                ap_NS_fsm <= ap_ST_fsm_state141;
            when ap_ST_fsm_state141 => 
                ap_NS_fsm <= ap_ST_fsm_state142;
            when ap_ST_fsm_state142 => 
                ap_NS_fsm <= ap_ST_fsm_state143;
            when ap_ST_fsm_state143 => 
                ap_NS_fsm <= ap_ST_fsm_state144;
            when ap_ST_fsm_state144 => 
                ap_NS_fsm <= ap_ST_fsm_state145;
            when ap_ST_fsm_state145 => 
                ap_NS_fsm <= ap_ST_fsm_state146;
            when ap_ST_fsm_state146 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state147 => 
                if (((memorybus_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state147))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state147;
                end if;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((icmp_ln188_fu_2427_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) and not(((ap_enable_reg_pp3_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0)) or ((icmp_ln188_fu_2427_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state152;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state152 => 
                if (((icmp_ln191_fu_2444_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state152))) then
                    ap_NS_fsm <= ap_ST_fsm_state156;
                else
                    ap_NS_fsm <= ap_ST_fsm_state153;
                end if;
            when ap_ST_fsm_state153 => 
                ap_NS_fsm <= ap_ST_fsm_state154;
            when ap_ST_fsm_state154 => 
                ap_NS_fsm <= ap_ST_fsm_state155;
            when ap_ST_fsm_state155 => 
                ap_NS_fsm <= ap_ST_fsm_state156;
            when ap_ST_fsm_state156 => 
                if ((not(((memorybus_BVALID = ap_const_logic_0) and (ap_predicate_op904_writeresp_state156 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state156))) then
                    ap_NS_fsm <= ap_ST_fsm_state157;
                else
                    ap_NS_fsm <= ap_ST_fsm_state156;
                end if;
            when ap_ST_fsm_state157 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    GPoolCache_GBRAM_ad_gep_fu_809_p3 <= zext_ln544_7_reg_3109(9 - 1 downto 0);

    GPoolCache_GBRAM_address0_assign_proc : process(ap_CS_fsm_state138, ap_block_pp3_stage0, layer_global_pool_re_reg_2479, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, icmp_ln178_reg_2995, zext_ln544_7_reg_3109, GPoolCache_GBRAM_ad_1_reg_3191, ap_CS_fsm_state146, GPoolCache_GBRAM_ad_gep_fu_809_p3, zext_ln544_6_fu_2439_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            GPoolCache_GBRAM_address0 <= zext_ln544_6_fu_2439_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state146)) then 
            GPoolCache_GBRAM_address0 <= GPoolCache_GBRAM_ad_1_reg_3191;
        elsif (((icmp_ln178_reg_2995 = ap_const_lv1_1) and (layer_global_pool_re_reg_2479 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state138))) then 
            GPoolCache_GBRAM_address0 <= GPoolCache_GBRAM_ad_gep_fu_809_p3;
        elsif (((layer_global_pool_re_reg_2479 = ap_const_lv1_1) and (icmp_ln178_reg_2995 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state138))) then 
            GPoolCache_GBRAM_address0 <= zext_ln544_7_reg_3109(9 - 1 downto 0);
        else 
            GPoolCache_GBRAM_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    GPoolCache_GBRAM_ce0_assign_proc : process(ap_CS_fsm_state138, layer_global_pool_re_reg_2479, memorybus_BVALID, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001, ap_CS_fsm_state140, ap_enable_reg_pp3_iter2, icmp_ln178_reg_2995, ap_enable_reg_pp3_iter1, ap_CS_fsm_state146, ap_CS_fsm_state139)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state139) or (ap_const_logic_1 = ap_CS_fsm_state146) or (ap_const_logic_1 = ap_CS_fsm_state140) or ((icmp_ln178_reg_2995 = ap_const_lv1_1) and (layer_global_pool_re_reg_2479 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state138) and (memorybus_BVALID = ap_const_logic_1)) or ((layer_global_pool_re_reg_2479 = ap_const_lv1_1) and (icmp_ln178_reg_2995 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state138) and (memorybus_BVALID = ap_const_logic_1)) or ((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            GPoolCache_GBRAM_ce0 <= ap_const_logic_1;
        else 
            GPoolCache_GBRAM_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    GPoolCache_GBRAM_d0_assign_proc : process(ap_CS_fsm_state138, layer_global_pool_re_reg_2479, icmp_ln178_reg_2995, result_reg_3184, new_ch_reg_3196, ap_CS_fsm_state146)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state146)) then 
            GPoolCache_GBRAM_d0 <= new_ch_reg_3196;
        elsif (((icmp_ln178_reg_2995 = ap_const_lv1_1) and (layer_global_pool_re_reg_2479 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state138))) then 
            GPoolCache_GBRAM_d0 <= result_reg_3184;
        else 
            GPoolCache_GBRAM_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    GPoolCache_GBRAM_we0_assign_proc : process(ap_CS_fsm_state138, layer_global_pool_re_reg_2479, memorybus_BVALID, icmp_ln178_reg_2995, ap_CS_fsm_state146)
    begin
        if ((((layer_global_pool_re_reg_2479 = ap_const_lv1_1) and (icmp_ln178_reg_2995 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state146)) or ((icmp_ln178_reg_2995 = ap_const_lv1_1) and (layer_global_pool_re_reg_2479 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state138) and (memorybus_BVALID = ap_const_logic_1)))) then 
            GPoolCache_GBRAM_we0 <= ap_const_logic_1;
        else 
            GPoolCache_GBRAM_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ImageCache_IBRAM_address1_assign_proc : process(ap_block_pp1_stage0, ap_block_pp2_stage0, ap_enable_reg_pp1_iter10, ap_enable_reg_pp2_iter10, ap_CS_fsm_state58, zext_ln544_10_fu_1682_p1, zext_ln544_fu_1733_p1, zext_ln544_11_fu_1991_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            ImageCache_IBRAM_address1 <= zext_ln544_11_fu_1991_p1(15 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter10 = ap_const_logic_1))) then 
            ImageCache_IBRAM_address1 <= zext_ln544_fu_1733_p1(15 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter10 = ap_const_logic_1))) then 
            ImageCache_IBRAM_address1 <= zext_ln544_10_fu_1682_p1(15 - 1 downto 0);
        else 
            ImageCache_IBRAM_address1 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    ImageCache_IBRAM_ce0_assign_proc : process(grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_ce0, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            ImageCache_IBRAM_ce0 <= grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_ce0;
        else 
            ImageCache_IBRAM_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ImageCache_IBRAM_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp1_iter10, ap_enable_reg_pp2_iter10, ap_CS_fsm_state58)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) or ((ap_enable_reg_pp2_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp1_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            ImageCache_IBRAM_ce1 <= ap_const_logic_1;
        else 
            ImageCache_IBRAM_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ImageCache_IBRAM_d1_assign_proc : process(ap_block_pp1_stage0, ap_block_pp2_stage0, ap_enable_reg_pp1_iter10, ap_enable_reg_pp2_iter10, grp_reg_float_s_fu_1676_ap_return, grp_reg_float_s_fu_1727_ap_return, grp_reg_float_s_fu_1985_ap_return, ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            ImageCache_IBRAM_d1 <= grp_reg_float_s_fu_1985_ap_return;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter10 = ap_const_logic_1))) then 
            ImageCache_IBRAM_d1 <= grp_reg_float_s_fu_1727_ap_return;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter10 = ap_const_logic_1))) then 
            ImageCache_IBRAM_d1 <= grp_reg_float_s_fu_1676_ap_return;
        else 
            ImageCache_IBRAM_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ImageCache_IBRAM_we1_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln68_1_reg_2816_pp1_iter9_reg, ap_block_pp2_stage0_11001, icmp_ln68_reg_2836_pp2_iter9_reg, ap_enable_reg_pp1_iter10, ap_enable_reg_pp2_iter10, ap_CS_fsm_state58)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) or ((icmp_ln68_reg_2836_pp2_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((icmp_ln68_1_reg_2816_pp1_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            ImageCache_IBRAM_we1 <= ap_const_logic_1;
        else 
            ImageCache_IBRAM_we1 <= ap_const_logic_0;
        end if; 
    end process;

    MAX_ADDR_V_1_fu_1890_p2 <= std_logic_vector(signed(ap_const_lv16_FFFF) + signed(shl_ln214_1_fu_1884_p2));
    MAX_ADDR_V_fu_1402_p2 <= std_logic_vector(signed(ap_const_lv16_FFFF) + signed(shl_ln214_fu_1397_p2));

    OutputCache_OBRAM_address0_assign_proc : process(zext_ln544_7_fu_2302_p1, ap_CS_fsm_state67, grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_address0, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            OutputCache_OBRAM_address0 <= zext_ln544_7_fu_2302_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            OutputCache_OBRAM_address0 <= grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_address0;
        else 
            OutputCache_OBRAM_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    OutputCache_OBRAM_ce0_assign_proc : process(ap_CS_fsm_state67, ap_CS_fsm_state69, grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_ce0, ap_CS_fsm_state60, ap_CS_fsm_state68)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            OutputCache_OBRAM_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            OutputCache_OBRAM_ce0 <= grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_ce0;
        else 
            OutputCache_OBRAM_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OutputCache_OBRAM_ce1_assign_proc : process(grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_ce1, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            OutputCache_OBRAM_ce1 <= grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_ce1;
        else 
            OutputCache_OBRAM_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    OutputCache_OBRAM_we0_assign_proc : process(grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_we0, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            OutputCache_OBRAM_we0 <= grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_we0;
        else 
            OutputCache_OBRAM_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OutputCache_OBRAM_we1_assign_proc : process(grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_we1, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            OutputCache_OBRAM_we1 <= grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_we1;
        else 
            OutputCache_OBRAM_we1 <= ap_const_logic_0;
        end if; 
    end process;


    SHARED_DRAM_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state157)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state157) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            SHARED_DRAM_0_ack_out <= ap_const_logic_1;
        else 
            SHARED_DRAM_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    WBRAM_0_0_0_address0_assign_proc : process(ap_CS_fsm_state66, grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_address0, ap_CS_fsm_state60, zext_ln544_8_fu_2235_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            WBRAM_0_0_0_address0 <= zext_ln544_8_fu_2235_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            WBRAM_0_0_0_address0 <= grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_address0;
        else 
            WBRAM_0_0_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    WBRAM_0_0_0_address1 <= zext_ln544_2_fu_1600_p1(10 - 1 downto 0);

    WBRAM_0_0_0_ce0_assign_proc : process(ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state69, grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_ce0, ap_CS_fsm_state60, ap_CS_fsm_state68)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            WBRAM_0_0_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            WBRAM_0_0_0_ce0 <= grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_ce0;
        else 
            WBRAM_0_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    WBRAM_0_0_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, t_V_6_reg_859_pp0_iter4_reg, bias_or_1x1_reg_2628, weightID_V_reg_2711_pp0_iter4_reg, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter5)
    begin
        if ((((bias_or_1x1_reg_2628 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (weightID_V_reg_2711_pp0_iter4_reg = ap_const_lv3_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((bias_or_1x1_reg_2628 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (t_V_6_reg_859_pp0_iter4_reg = ap_const_lv4_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            WBRAM_0_0_0_ce1 <= ap_const_logic_1;
        else 
            WBRAM_0_0_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    WBRAM_0_0_0_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, t_V_6_reg_859_pp0_iter4_reg, bias_or_1x1_reg_2628, weightID_V_reg_2711_pp0_iter4_reg, ap_enable_reg_pp0_iter5)
    begin
        if ((((bias_or_1x1_reg_2628 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (weightID_V_reg_2711_pp0_iter4_reg = ap_const_lv3_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((bias_or_1x1_reg_2628 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (t_V_6_reg_859_pp0_iter4_reg = ap_const_lv4_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            WBRAM_0_0_0_we1 <= ap_const_logic_1;
        else 
            WBRAM_0_0_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    WBRAM_0_0_1_address0_assign_proc : process(ap_CS_fsm_state66, grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_address0, ap_CS_fsm_state60, zext_ln544_8_fu_2235_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            WBRAM_0_0_1_address0 <= zext_ln544_8_fu_2235_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            WBRAM_0_0_1_address0 <= grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_address0;
        else 
            WBRAM_0_0_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    WBRAM_0_0_1_address1 <= zext_ln544_2_fu_1600_p1(10 - 1 downto 0);

    WBRAM_0_0_1_ce0_assign_proc : process(ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state69, grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_ce0, ap_CS_fsm_state60, ap_CS_fsm_state68)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            WBRAM_0_0_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            WBRAM_0_0_1_ce0 <= grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_ce0;
        else 
            WBRAM_0_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    WBRAM_0_0_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, t_V_6_reg_859_pp0_iter4_reg, bias_or_1x1_reg_2628, weightID_V_reg_2711_pp0_iter4_reg, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter5)
    begin
        if ((((bias_or_1x1_reg_2628 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (weightID_V_reg_2711_pp0_iter4_reg = ap_const_lv3_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((bias_or_1x1_reg_2628 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (t_V_6_reg_859_pp0_iter4_reg = ap_const_lv4_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            WBRAM_0_0_1_ce1 <= ap_const_logic_1;
        else 
            WBRAM_0_0_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    WBRAM_0_0_1_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, t_V_6_reg_859_pp0_iter4_reg, bias_or_1x1_reg_2628, weightID_V_reg_2711_pp0_iter4_reg, ap_enable_reg_pp0_iter5)
    begin
        if ((((bias_or_1x1_reg_2628 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (weightID_V_reg_2711_pp0_iter4_reg = ap_const_lv3_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((bias_or_1x1_reg_2628 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (t_V_6_reg_859_pp0_iter4_reg = ap_const_lv4_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            WBRAM_0_0_1_we1 <= ap_const_logic_1;
        else 
            WBRAM_0_0_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    WBRAM_0_0_2_address0_assign_proc : process(ap_CS_fsm_state66, grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_address0, ap_CS_fsm_state60, zext_ln544_8_fu_2235_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            WBRAM_0_0_2_address0 <= zext_ln544_8_fu_2235_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            WBRAM_0_0_2_address0 <= grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_address0;
        else 
            WBRAM_0_0_2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    WBRAM_0_0_2_address1 <= zext_ln544_2_fu_1600_p1(10 - 1 downto 0);

    WBRAM_0_0_2_ce0_assign_proc : process(ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state69, grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_ce0, ap_CS_fsm_state60, ap_CS_fsm_state68)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            WBRAM_0_0_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            WBRAM_0_0_2_ce0 <= grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_ce0;
        else 
            WBRAM_0_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    WBRAM_0_0_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, t_V_6_reg_859_pp0_iter4_reg, bias_or_1x1_reg_2628, weightID_V_reg_2711_pp0_iter4_reg, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter5)
    begin
        if ((((bias_or_1x1_reg_2628 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (weightID_V_reg_2711_pp0_iter4_reg = ap_const_lv3_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((bias_or_1x1_reg_2628 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (t_V_6_reg_859_pp0_iter4_reg = ap_const_lv4_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            WBRAM_0_0_2_ce1 <= ap_const_logic_1;
        else 
            WBRAM_0_0_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    WBRAM_0_0_2_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, t_V_6_reg_859_pp0_iter4_reg, bias_or_1x1_reg_2628, weightID_V_reg_2711_pp0_iter4_reg, ap_enable_reg_pp0_iter5)
    begin
        if ((((bias_or_1x1_reg_2628 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (weightID_V_reg_2711_pp0_iter4_reg = ap_const_lv3_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((bias_or_1x1_reg_2628 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (t_V_6_reg_859_pp0_iter4_reg = ap_const_lv4_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            WBRAM_0_0_2_we1 <= ap_const_logic_1;
        else 
            WBRAM_0_0_2_we1 <= ap_const_logic_0;
        end if; 
    end process;


    WBRAM_0_0_3_address0_assign_proc : process(ap_CS_fsm_state66, grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_address0, ap_CS_fsm_state60, zext_ln544_8_fu_2235_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            WBRAM_0_0_3_address0 <= zext_ln544_8_fu_2235_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            WBRAM_0_0_3_address0 <= grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_address0;
        else 
            WBRAM_0_0_3_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    WBRAM_0_0_3_address1 <= zext_ln544_2_fu_1600_p1(10 - 1 downto 0);

    WBRAM_0_0_3_ce0_assign_proc : process(ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state69, grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_ce0, ap_CS_fsm_state60, ap_CS_fsm_state68)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            WBRAM_0_0_3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            WBRAM_0_0_3_ce0 <= grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_ce0;
        else 
            WBRAM_0_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    WBRAM_0_0_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, t_V_6_reg_859_pp0_iter4_reg, bias_or_1x1_reg_2628, weightID_V_reg_2711_pp0_iter4_reg, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter5)
    begin
        if ((((bias_or_1x1_reg_2628 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (weightID_V_reg_2711_pp0_iter4_reg = ap_const_lv3_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((bias_or_1x1_reg_2628 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (t_V_6_reg_859_pp0_iter4_reg = ap_const_lv4_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            WBRAM_0_0_3_ce1 <= ap_const_logic_1;
        else 
            WBRAM_0_0_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    WBRAM_0_0_3_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, t_V_6_reg_859_pp0_iter4_reg, bias_or_1x1_reg_2628, weightID_V_reg_2711_pp0_iter4_reg, ap_enable_reg_pp0_iter5)
    begin
        if ((((bias_or_1x1_reg_2628 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (weightID_V_reg_2711_pp0_iter4_reg = ap_const_lv3_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((bias_or_1x1_reg_2628 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (t_V_6_reg_859_pp0_iter4_reg = ap_const_lv4_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            WBRAM_0_0_3_we1 <= ap_const_logic_1;
        else 
            WBRAM_0_0_3_we1 <= ap_const_logic_0;
        end if; 
    end process;


    WBRAM_0_0_4_address0_assign_proc : process(ap_CS_fsm_state66, grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_address0, ap_CS_fsm_state60, zext_ln544_8_fu_2235_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            WBRAM_0_0_4_address0 <= zext_ln544_8_fu_2235_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            WBRAM_0_0_4_address0 <= grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_address0;
        else 
            WBRAM_0_0_4_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    WBRAM_0_0_4_address1 <= zext_ln544_2_fu_1600_p1(10 - 1 downto 0);

    WBRAM_0_0_4_ce0_assign_proc : process(ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state69, grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_ce0, ap_CS_fsm_state60, ap_CS_fsm_state68)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            WBRAM_0_0_4_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            WBRAM_0_0_4_ce0 <= grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_ce0;
        else 
            WBRAM_0_0_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    WBRAM_0_0_4_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, t_V_6_reg_859_pp0_iter4_reg, bias_or_1x1_reg_2628, weightID_V_reg_2711_pp0_iter4_reg, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter5)
    begin
        if ((((bias_or_1x1_reg_2628 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (weightID_V_reg_2711_pp0_iter4_reg = ap_const_lv3_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((bias_or_1x1_reg_2628 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (t_V_6_reg_859_pp0_iter4_reg = ap_const_lv4_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            WBRAM_0_0_4_ce1 <= ap_const_logic_1;
        else 
            WBRAM_0_0_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    WBRAM_0_0_4_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, t_V_6_reg_859_pp0_iter4_reg, bias_or_1x1_reg_2628, weightID_V_reg_2711_pp0_iter4_reg, ap_enable_reg_pp0_iter5)
    begin
        if ((((bias_or_1x1_reg_2628 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (weightID_V_reg_2711_pp0_iter4_reg = ap_const_lv3_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((bias_or_1x1_reg_2628 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (t_V_6_reg_859_pp0_iter4_reg = ap_const_lv4_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            WBRAM_0_0_4_we1 <= ap_const_logic_1;
        else 
            WBRAM_0_0_4_we1 <= ap_const_logic_0;
        end if; 
    end process;


    WBRAM_0_0_5_address0_assign_proc : process(ap_CS_fsm_state66, grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_address0, ap_CS_fsm_state60, zext_ln544_8_fu_2235_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            WBRAM_0_0_5_address0 <= zext_ln544_8_fu_2235_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            WBRAM_0_0_5_address0 <= grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_address0;
        else 
            WBRAM_0_0_5_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    WBRAM_0_0_5_address1 <= zext_ln544_2_fu_1600_p1(10 - 1 downto 0);

    WBRAM_0_0_5_ce0_assign_proc : process(ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state69, grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_ce0, ap_CS_fsm_state60, ap_CS_fsm_state68)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            WBRAM_0_0_5_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            WBRAM_0_0_5_ce0 <= grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_ce0;
        else 
            WBRAM_0_0_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    WBRAM_0_0_5_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, t_V_6_reg_859_pp0_iter4_reg, bias_or_1x1_reg_2628, weightID_V_reg_2711_pp0_iter4_reg, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter5)
    begin
        if ((((bias_or_1x1_reg_2628 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (weightID_V_reg_2711_pp0_iter4_reg = ap_const_lv3_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((bias_or_1x1_reg_2628 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (t_V_6_reg_859_pp0_iter4_reg = ap_const_lv4_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            WBRAM_0_0_5_ce1 <= ap_const_logic_1;
        else 
            WBRAM_0_0_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    WBRAM_0_0_5_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, t_V_6_reg_859_pp0_iter4_reg, bias_or_1x1_reg_2628, weightID_V_reg_2711_pp0_iter4_reg, ap_enable_reg_pp0_iter5)
    begin
        if ((((bias_or_1x1_reg_2628 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (weightID_V_reg_2711_pp0_iter4_reg = ap_const_lv3_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((bias_or_1x1_reg_2628 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (t_V_6_reg_859_pp0_iter4_reg = ap_const_lv4_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            WBRAM_0_0_5_we1 <= ap_const_logic_1;
        else 
            WBRAM_0_0_5_we1 <= ap_const_logic_0;
        end if; 
    end process;


    WBRAM_0_0_6_address0_assign_proc : process(ap_CS_fsm_state66, grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_address0, ap_CS_fsm_state60, zext_ln544_8_fu_2235_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            WBRAM_0_0_6_address0 <= zext_ln544_8_fu_2235_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            WBRAM_0_0_6_address0 <= grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_address0;
        else 
            WBRAM_0_0_6_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    WBRAM_0_0_6_address1 <= zext_ln544_2_fu_1600_p1(10 - 1 downto 0);

    WBRAM_0_0_6_ce0_assign_proc : process(ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state69, grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_ce0, ap_CS_fsm_state60, ap_CS_fsm_state68)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            WBRAM_0_0_6_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            WBRAM_0_0_6_ce0 <= grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_ce0;
        else 
            WBRAM_0_0_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    WBRAM_0_0_6_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, t_V_6_reg_859_pp0_iter4_reg, bias_or_1x1_reg_2628, weightID_V_reg_2711_pp0_iter4_reg, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter5)
    begin
        if ((((bias_or_1x1_reg_2628 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (weightID_V_reg_2711_pp0_iter4_reg = ap_const_lv3_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((bias_or_1x1_reg_2628 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (t_V_6_reg_859_pp0_iter4_reg = ap_const_lv4_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            WBRAM_0_0_6_ce1 <= ap_const_logic_1;
        else 
            WBRAM_0_0_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    WBRAM_0_0_6_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, t_V_6_reg_859_pp0_iter4_reg, bias_or_1x1_reg_2628, weightID_V_reg_2711_pp0_iter4_reg, ap_enable_reg_pp0_iter5)
    begin
        if ((((bias_or_1x1_reg_2628 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (weightID_V_reg_2711_pp0_iter4_reg = ap_const_lv3_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((bias_or_1x1_reg_2628 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (t_V_6_reg_859_pp0_iter4_reg = ap_const_lv4_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            WBRAM_0_0_6_we1 <= ap_const_logic_1;
        else 
            WBRAM_0_0_6_we1 <= ap_const_logic_0;
        end if; 
    end process;


    WBRAM_0_0_7_address0_assign_proc : process(ap_CS_fsm_state66, grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_address0, ap_CS_fsm_state60, zext_ln544_8_fu_2235_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            WBRAM_0_0_7_address0 <= zext_ln544_8_fu_2235_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            WBRAM_0_0_7_address0 <= grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_address0;
        else 
            WBRAM_0_0_7_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    WBRAM_0_0_7_address1 <= zext_ln544_2_fu_1600_p1(10 - 1 downto 0);

    WBRAM_0_0_7_ce0_assign_proc : process(ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state69, grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_ce0, ap_CS_fsm_state60, ap_CS_fsm_state68)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            WBRAM_0_0_7_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            WBRAM_0_0_7_ce0 <= grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_ce0;
        else 
            WBRAM_0_0_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    WBRAM_0_0_7_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, t_V_6_reg_859_pp0_iter4_reg, bias_or_1x1_reg_2628, weightID_V_reg_2711_pp0_iter4_reg, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter5)
    begin
        if ((((bias_or_1x1_reg_2628 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (weightID_V_reg_2711_pp0_iter4_reg = ap_const_lv3_7) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((bias_or_1x1_reg_2628 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (t_V_6_reg_859_pp0_iter4_reg = ap_const_lv4_7) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            WBRAM_0_0_7_ce1 <= ap_const_logic_1;
        else 
            WBRAM_0_0_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    WBRAM_0_0_7_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, t_V_6_reg_859_pp0_iter4_reg, bias_or_1x1_reg_2628, weightID_V_reg_2711_pp0_iter4_reg, ap_enable_reg_pp0_iter5)
    begin
        if ((((bias_or_1x1_reg_2628 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (weightID_V_reg_2711_pp0_iter4_reg = ap_const_lv3_7) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((bias_or_1x1_reg_2628 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (t_V_6_reg_859_pp0_iter4_reg = ap_const_lv4_7) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            WBRAM_0_0_7_we1 <= ap_const_logic_1;
        else 
            WBRAM_0_0_7_we1 <= ap_const_logic_0;
        end if; 
    end process;

    WBRAM_0_0_8_address1 <= zext_ln544_2_fu_1600_p1(10 - 1 downto 0);

    WBRAM_0_0_8_ce0_assign_proc : process(grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_ce0, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            WBRAM_0_0_8_ce0 <= grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_ce0;
        else 
            WBRAM_0_0_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    WBRAM_0_0_8_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter5)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            WBRAM_0_0_8_ce1 <= ap_const_logic_1;
        else 
            WBRAM_0_0_8_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    WBRAM_0_0_8_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, t_V_6_reg_859_pp0_iter4_reg, bias_or_1x1_reg_2628, ap_enable_reg_pp0_iter5)
    begin
        if ((not((t_V_6_reg_859_pp0_iter4_reg = ap_const_lv4_0)) and not((t_V_6_reg_859_pp0_iter4_reg = ap_const_lv4_1)) and not((t_V_6_reg_859_pp0_iter4_reg = ap_const_lv4_2)) and not((t_V_6_reg_859_pp0_iter4_reg = ap_const_lv4_3)) and not((t_V_6_reg_859_pp0_iter4_reg = ap_const_lv4_4)) and not((t_V_6_reg_859_pp0_iter4_reg = ap_const_lv4_5)) and not((t_V_6_reg_859_pp0_iter4_reg = ap_const_lv4_6)) and not((t_V_6_reg_859_pp0_iter4_reg = ap_const_lv4_7)) and (bias_or_1x1_reg_2628 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            WBRAM_0_0_8_we1 <= ap_const_logic_1;
        else 
            WBRAM_0_0_8_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln123_fu_1485_p2 <= std_logic_vector(unsigned(p_cast_reg_2559) + unsigned(ret_V_2_fu_1480_p2));
    add_ln1352_fu_1332_p2 <= std_logic_vector(unsigned(zext_ln1352_1_fu_1328_p1) + unsigned(lhs_V_fu_1318_p1));
    add_ln1353_9_fu_2259_p2 <= std_logic_vector(unsigned(zext_ln215_9_fu_2251_p1) + unsigned(zext_ln1353_5_fu_2255_p1));
    add_ln1353_fu_1470_p2 <= std_logic_vector(unsigned(zext_ln215_3_fu_1462_p1) + unsigned(zext_ln1353_3_fu_1466_p1));
    add_ln138_1_fu_1661_p2 <= std_logic_vector(unsigned(ret_V_5_fu_1656_p2) + unsigned(p_cast_reg_2559));
    add_ln138_2_fu_1951_p2 <= std_logic_vector(unsigned(ret_V_7_fu_1946_p2) + unsigned(p_cast_reg_2559));
    add_ln138_fu_1712_p2 <= std_logic_vector(unsigned(ret_V_4_fu_1707_p2) + unsigned(p_cast_reg_2559));
    add_ln174_fu_2274_p2 <= std_logic_vector(unsigned(p_cast_reg_2559) + unsigned(ret_V_14_fu_2269_p2));
    add_ln191_fu_1916_p2 <= std_logic_vector(unsigned(ret_V_6_fu_1911_p2) + unsigned(p_cast_reg_2559));
    add_ln214_1_fu_1528_p2 <= std_logic_vector(unsigned(trunc_ln214_reg_2686) + unsigned(trunc_ln214_2_fu_1524_p1));
    add_ln214_3_fu_1630_p2 <= std_logic_vector(unsigned(zext_ln1353_1_fu_1627_p1) + unsigned(layer_mem_addr_input_reg_2473));
    add_ln214_fu_2141_p2 <= std_logic_vector(unsigned(px_offset_V_1_fu_2129_p3) + unsigned(MemoryController_la_2));
    add_ln321_1_fu_2195_p2 <= std_logic_vector(unsigned(trunc_ln321_2_reg_3029) + unsigned(t_V_14_reg_980));
    add_ln321_fu_1509_p2 <= std_logic_vector(unsigned(trunc_ln321_reg_2681) + unsigned(ap_phi_mux_empty_24_phi_fu_875_p4));
    add_ln700_12_fu_1811_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(t_V_17_reg_935));
    add_ln700_fu_1580_p2 <= std_logic_vector(unsigned(ap_const_lv19_1) + unsigned(t_V_reg_848));
    add_ln96_fu_1792_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_924) + unsigned(ap_const_lv18_1));
    add_ln99_fu_1444_p2 <= std_logic_vector(unsigned(empty_23_fu_1440_p1) + unsigned(ret_V_1_reg_2633));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(9);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(14);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(117);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state100 <= ap_CS_fsm(69);
    ap_CS_fsm_state130 <= ap_CS_fsm(99);
    ap_CS_fsm_state131 <= ap_CS_fsm(100);
    ap_CS_fsm_state132 <= ap_CS_fsm(101);
    ap_CS_fsm_state133 <= ap_CS_fsm(102);
    ap_CS_fsm_state138 <= ap_CS_fsm(107);
    ap_CS_fsm_state139 <= ap_CS_fsm(108);
    ap_CS_fsm_state140 <= ap_CS_fsm(109);
    ap_CS_fsm_state141 <= ap_CS_fsm(110);
    ap_CS_fsm_state145 <= ap_CS_fsm(114);
    ap_CS_fsm_state146 <= ap_CS_fsm(115);
    ap_CS_fsm_state147 <= ap_CS_fsm(116);
    ap_CS_fsm_state152 <= ap_CS_fsm(118);
    ap_CS_fsm_state156 <= ap_CS_fsm(122);
    ap_CS_fsm_state157 <= ap_CS_fsm(123);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(10);
    ap_CS_fsm_state22 <= ap_CS_fsm(11);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state34 <= ap_CS_fsm(13);
    ap_CS_fsm_state46 <= ap_CS_fsm(15);
    ap_CS_fsm_state47 <= ap_CS_fsm(16);
    ap_CS_fsm_state48 <= ap_CS_fsm(17);
    ap_CS_fsm_state49 <= ap_CS_fsm(18);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state56 <= ap_CS_fsm(25);
    ap_CS_fsm_state57 <= ap_CS_fsm(26);
    ap_CS_fsm_state58 <= ap_CS_fsm(27);
    ap_CS_fsm_state59 <= ap_CS_fsm(28);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(29);
    ap_CS_fsm_state62 <= ap_CS_fsm(31);
    ap_CS_fsm_state63 <= ap_CS_fsm(32);
    ap_CS_fsm_state65 <= ap_CS_fsm(34);
    ap_CS_fsm_state66 <= ap_CS_fsm(35);
    ap_CS_fsm_state67 <= ap_CS_fsm(36);
    ap_CS_fsm_state68 <= ap_CS_fsm(37);
    ap_CS_fsm_state69 <= ap_CS_fsm(38);
    ap_CS_fsm_state70 <= ap_CS_fsm(39);
    ap_CS_fsm_state74 <= ap_CS_fsm(43);
    ap_CS_fsm_state75 <= ap_CS_fsm(44);
    ap_CS_fsm_state76 <= ap_CS_fsm(45);
    ap_CS_fsm_state77 <= ap_CS_fsm(46);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state94 <= ap_CS_fsm(63);
    ap_CS_fsm_state95 <= ap_CS_fsm(64);
    ap_CS_fsm_state99 <= ap_CS_fsm(68);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln99_reg_2696_pp0_iter3_reg, memorybus_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln99_reg_2696_pp0_iter3_reg = ap_const_lv1_0) and (memorybus_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp347_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln99_reg_2696_pp0_iter3_reg, memorybus_RVALID)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp347 <= ((icmp_ln99_reg_2696_pp0_iter3_reg = ap_const_lv1_0) and (memorybus_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln99_reg_2696_pp0_iter3_reg, memorybus_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln99_reg_2696_pp0_iter3_reg = ap_const_lv1_0) and (memorybus_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state10_io)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state10_io));
    end process;


    ap_block_pp0_stage1_11001_ignoreCallOp343_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state10_io)
    begin
                ap_block_pp0_stage1_11001_ignoreCallOp343 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state10_io));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state10_io)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state10_io));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter8, icmp_ln68_1_reg_2816_pp1_iter7_reg, memorybus_RVALID, ap_block_state24_io)
    begin
                ap_block_pp1_stage0_11001 <= (((icmp_ln68_1_reg_2816_pp1_iter7_reg = ap_const_lv1_0) and (memorybus_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state24_io)));
    end process;


    ap_block_pp1_stage0_11001_ignoreCallOp451_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter8, icmp_ln68_1_reg_2816_pp1_iter7_reg, memorybus_RVALID, ap_block_state24_io)
    begin
                ap_block_pp1_stage0_11001_ignoreCallOp451 <= (((icmp_ln68_1_reg_2816_pp1_iter7_reg = ap_const_lv1_0) and (memorybus_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state24_io)));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter8, icmp_ln68_1_reg_2816_pp1_iter7_reg, memorybus_RVALID, ap_block_state24_io)
    begin
                ap_block_pp1_stage0_subdone <= (((icmp_ln68_1_reg_2816_pp1_iter7_reg = ap_const_lv1_0) and (memorybus_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state24_io)));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter8, icmp_ln68_reg_2836_pp2_iter7_reg, memorybus_RVALID, ap_block_state36_io)
    begin
                ap_block_pp2_stage0_11001 <= (((icmp_ln68_reg_2836_pp2_iter7_reg = ap_const_lv1_0) and (memorybus_RVALID = ap_const_logic_0) and (ap_enable_reg_pp2_iter8 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state36_io)));
    end process;


    ap_block_pp2_stage0_11001_ignoreCallOp494_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter8, icmp_ln68_reg_2836_pp2_iter7_reg, memorybus_RVALID, ap_block_state36_io)
    begin
                ap_block_pp2_stage0_11001_ignoreCallOp494 <= (((icmp_ln68_reg_2836_pp2_iter7_reg = ap_const_lv1_0) and (memorybus_RVALID = ap_const_logic_0) and (ap_enable_reg_pp2_iter8 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state36_io)));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter8, icmp_ln68_reg_2836_pp2_iter7_reg, memorybus_RVALID, ap_block_state36_io)
    begin
                ap_block_pp2_stage0_subdone <= (((icmp_ln68_reg_2836_pp2_iter7_reg = ap_const_lv1_0) and (memorybus_RVALID = ap_const_logic_0) and (ap_enable_reg_pp2_iter8 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state36_io)));
    end process;

        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_11001_assign_proc : process(ap_enable_reg_pp3_iter3, ap_block_state151_io)
    begin
                ap_block_pp3_stage0_11001 <= ((ap_enable_reg_pp3_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state151_io));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(ap_enable_reg_pp3_iter3, ap_block_state151_io)
    begin
                ap_block_pp3_stage0_subdone <= ((ap_enable_reg_pp3_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state151_io));
    end process;


    ap_block_state10_io_assign_proc : process(icmp_ln99_reg_2696, memorybus_ARREADY)
    begin
                ap_block_state10_io <= ((icmp_ln99_reg_2696 = ap_const_lv1_0) and (memorybus_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state10_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter0_ignore_call15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter1_ignore_call15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter1_ignore_call15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter2_ignore_call15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state148_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state149_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter2_ignore_call15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state150_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state151_io_assign_proc : process(icmp_ln188_reg_3201_pp3_iter2_reg, memorybus_WREADY)
    begin
                ap_block_state151_io <= ((icmp_ln188_reg_3201_pp3_iter2_reg = ap_const_lv1_0) and (memorybus_WREADY = ap_const_logic_0));
    end process;

        ap_block_state151_pp3_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state156_assign_proc : process(memorybus_BVALID, ap_predicate_op904_writeresp_state156)
    begin
                ap_block_state156 <= ((memorybus_BVALID = ap_const_logic_0) and (ap_predicate_op904_writeresp_state156 = ap_const_boolean_1));
    end process;

        ap_block_state15_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter3_ignore_call15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage1_iter3_ignore_call15 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state17_pp0_stage0_iter4_assign_proc : process(icmp_ln99_reg_2696_pp0_iter3_reg, memorybus_RVALID)
    begin
                ap_block_state17_pp0_stage0_iter4 <= ((icmp_ln99_reg_2696_pp0_iter3_reg = ap_const_lv1_0) and (memorybus_RVALID = ap_const_logic_0));
    end process;


    ap_block_state17_pp0_stage0_iter4_ignore_call15_assign_proc : process(icmp_ln99_reg_2696_pp0_iter3_reg, memorybus_RVALID)
    begin
                ap_block_state17_pp0_stage0_iter4_ignore_call15 <= ((icmp_ln99_reg_2696_pp0_iter3_reg = ap_const_lv1_0) and (memorybus_RVALID = ap_const_logic_0));
    end process;

        ap_block_state18_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter4_ignore_call15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter5_ignore_call15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter5_ignore_call15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp1_stage0_iter0_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state24_io_assign_proc : process(icmp_ln68_1_reg_2816, memorybus_ARREADY)
    begin
                ap_block_state24_io <= ((icmp_ln68_1_reg_2816 = ap_const_lv1_0) and (memorybus_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state24_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp1_stage0_iter1_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp1_stage0_iter2_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp1_stage0_iter3_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp1_stage0_iter4_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp1_stage0_iter5_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp1_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp1_stage0_iter6_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp1_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp1_stage0_iter7_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state31_pp1_stage0_iter8_assign_proc : process(icmp_ln68_1_reg_2816_pp1_iter7_reg, memorybus_RVALID)
    begin
                ap_block_state31_pp1_stage0_iter8 <= ((icmp_ln68_1_reg_2816_pp1_iter7_reg = ap_const_lv1_0) and (memorybus_RVALID = ap_const_logic_0));
    end process;


    ap_block_state31_pp1_stage0_iter8_ignore_call13_assign_proc : process(icmp_ln68_1_reg_2816_pp1_iter7_reg, memorybus_RVALID)
    begin
                ap_block_state31_pp1_stage0_iter8_ignore_call13 <= ((icmp_ln68_1_reg_2816_pp1_iter7_reg = ap_const_lv1_0) and (memorybus_RVALID = ap_const_logic_0));
    end process;

        ap_block_state32_pp1_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp1_stage0_iter9_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp1_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp1_stage0_iter10_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp2_stage0_iter0_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state36_io_assign_proc : process(icmp_ln68_reg_2836, memorybus_ARREADY)
    begin
                ap_block_state36_io <= ((icmp_ln68_reg_2836 = ap_const_lv1_0) and (memorybus_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state36_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp2_stage0_iter1_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp2_stage0_iter2_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp2_stage0_iter3_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp2_stage0_iter4_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp2_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp2_stage0_iter5_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp2_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp2_stage0_iter6_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp2_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp2_stage0_iter7_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state43_pp2_stage0_iter8_assign_proc : process(icmp_ln68_reg_2836_pp2_iter7_reg, memorybus_RVALID)
    begin
                ap_block_state43_pp2_stage0_iter8 <= ((icmp_ln68_reg_2836_pp2_iter7_reg = ap_const_lv1_0) and (memorybus_RVALID = ap_const_logic_0));
    end process;


    ap_block_state43_pp2_stage0_iter8_ignore_call13_assign_proc : process(icmp_ln68_reg_2836_pp2_iter7_reg, memorybus_RVALID)
    begin
                ap_block_state43_pp2_stage0_iter8_ignore_call13 <= ((icmp_ln68_reg_2836_pp2_iter7_reg = ap_const_lv1_0) and (memorybus_RVALID = ap_const_logic_0));
    end process;

        ap_block_state44_pp2_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp2_stage0_iter9_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp2_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp2_stage0_iter10_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state60_on_subcall_done_assign_proc : process(ap_sync_grp_processInputChannel_s_fu_1003_ap_ready, ap_sync_grp_processInputChannel_s_fu_1003_ap_done)
    begin
                ap_block_state60_on_subcall_done <= ((ap_sync_grp_processInputChannel_s_fu_1003_ap_ready and ap_sync_grp_processInputChannel_s_fu_1003_ap_done) = ap_const_logic_0);
    end process;

        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter0_ignore_call15 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln99_fu_1453_p2)
    begin
        if ((icmp_ln99_fu_1453_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state23_assign_proc : process(icmp_ln68_1_fu_1641_p2)
    begin
        if ((icmp_ln68_1_fu_1641_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state23 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state23 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state35_assign_proc : process(icmp_ln68_fu_1692_p2)
    begin
        if ((icmp_ln68_fu_1692_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state35 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state35 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state148_assign_proc : process(icmp_ln188_fu_2427_p2)
    begin
        if ((icmp_ln188_fu_2427_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state148 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state148 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state157)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state157)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter8, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter6, ap_enable_reg_pp1_iter7, ap_enable_reg_pp1_iter9, ap_enable_reg_pp1_iter10)
    begin
        if (((ap_enable_reg_pp1_iter8 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter10 = ap_const_logic_0) and (ap_enable_reg_pp1_iter9 = ap_const_logic_0) and (ap_enable_reg_pp1_iter7 = ap_const_logic_0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter8, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter5, ap_enable_reg_pp2_iter6, ap_enable_reg_pp2_iter7, ap_enable_reg_pp2_iter9, ap_enable_reg_pp2_iter10)
    begin
        if (((ap_enable_reg_pp2_iter8 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter10 = ap_const_logic_0) and (ap_enable_reg_pp2_iter9 = ap_const_logic_0) and (ap_enable_reg_pp2_iter7 = ap_const_logic_0) and (ap_enable_reg_pp2_iter6 = ap_const_logic_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter3, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter3 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_empty_24_phi_fu_875_p4_assign_proc : process(icmp_ln99_reg_2696, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, empty_24_reg_871, select_ln126_1_reg_2720, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln99_reg_2696 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_empty_24_phi_fu_875_p4 <= select_ln126_1_reg_2720;
        else 
            ap_phi_mux_empty_24_phi_fu_875_p4 <= empty_24_reg_871;
        end if; 
    end process;


    ap_phi_mux_loads_left_2_phi_fu_918_p4_assign_proc : process(icmp_ln887_1_reg_2812, ap_CS_fsm_state46, loads_left_2_reg_915, grp_fu_1130_p2)
    begin
        if (((icmp_ln887_1_reg_2812 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            ap_phi_mux_loads_left_2_phi_fu_918_p4 <= grp_fu_1130_p2;
        else 
            ap_phi_mux_loads_left_2_phi_fu_918_p4 <= loads_left_2_reg_915;
        end if; 
    end process;


    ap_phi_mux_t_V_6_phi_fu_863_p4_assign_proc : process(icmp_ln99_reg_2696, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, t_V_6_reg_859, select_ln126_reg_2715, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln99_reg_2696 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_t_V_6_phi_fu_863_p4 <= select_ln126_reg_2715;
        else 
            ap_phi_mux_t_V_6_phi_fu_863_p4 <= t_V_6_reg_859;
        end if; 
    end process;


    ap_phi_mux_t_V_phi_fu_851_p4_assign_proc : process(icmp_ln99_reg_2696, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, t_V_reg_848, add_ln700_reg_2725, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln99_reg_2696 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_t_V_phi_fu_851_p4 <= add_ln700_reg_2725;
        else 
            ap_phi_mux_t_V_phi_fu_851_p4 <= t_V_reg_848;
        end if; 
    end process;


    ap_predicate_op904_writeresp_state156_assign_proc : process(layer_global_pool_re_reg_2479, icmp_ln191_reg_3215)
    begin
                ap_predicate_op904_writeresp_state156 <= ((layer_global_pool_re_reg_2479 = ap_const_lv1_1) and (icmp_ln191_reg_3215 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state157)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state157)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_processInputChannel_s_fu_1003_ap_done <= (grp_processInputChannel_s_fu_1003_ap_done or ap_sync_reg_grp_processInputChannel_s_fu_1003_ap_done);
    ap_sync_grp_processInputChannel_s_fu_1003_ap_ready <= (grp_processInputChannel_s_fu_1003_ap_ready or ap_sync_reg_grp_processInputChannel_s_fu_1003_ap_ready);
    bias_or_1x1_fu_1375_p2 <= (icmp_ln879_reg_2589 or icmp_ln879_1_fu_1370_p2);
    bitcast_ln204_fu_2402_p1 <= biased_reg_3130;
    ci_V_1_fu_1697_p2 <= std_logic_vector(unsigned(t_V_5_reg_904) + unsigned(ap_const_lv10_1));
    ci_V_2_fu_1646_p2 <= std_logic_vector(unsigned(t_V_3_reg_893) + unsigned(ap_const_lv10_1));
    ci_V_3_fu_1936_p2 <= std_logic_vector(unsigned(t_V_11_reg_957) + unsigned(ap_const_lv10_1));
    ci_V_4_fu_2020_p2 <= std_logic_vector(unsigned(t_V_12_reg_968) + unsigned(ap_const_lv10_1));
    ci_V_fu_1355_p2 <= std_logic_vector(unsigned(t_V_1_reg_837) + unsigned(ap_const_lv10_1));
    co_V_1_fu_2170_p2 <= std_logic_vector(unsigned(t_V_14_reg_980) + unsigned(ap_const_lv10_1));
    co_V_fu_1558_p2 <= std_logic_vector(unsigned(ap_phi_mux_empty_24_phi_fu_875_p4) + unsigned(ap_const_lv10_1));
    dram_addr_V_fu_1422_p2 <= std_logic_vector(unsigned(empty_22_fu_1419_p1) + unsigned(p_0137_0_i_reg_825));
    empty_22_fu_1419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_1_reg_2633),19));
    empty_23_fu_1440_p1 <= p_0137_0_i_reg_825(14 - 1 downto 0);
    empty_36_fu_2422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1141),32));

    grp_fu_1046_p0_assign_proc : process(reg_1145, raw_reg_3120, ap_CS_fsm_state70, ap_CS_fsm_state141)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state141)) then 
            grp_fu_1046_p0 <= reg_1145;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            grp_fu_1046_p0 <= raw_reg_3120;
        else 
            grp_fu_1046_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1046_p1_assign_proc : process(weight_1_reg_3125, result_reg_3184, ap_CS_fsm_state70, ap_CS_fsm_state141)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state141)) then 
            grp_fu_1046_p1 <= result_reg_3184;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            grp_fu_1046_p1 <= weight_1_reg_3125;
        else 
            grp_fu_1046_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1050_ce_assign_proc : process(ap_CS_fsm_state132, memorybus_AWREADY, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state131) or ((memorybus_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state132)))) then 
            grp_fu_1050_ce <= ap_const_logic_1;
        else 
            grp_fu_1050_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1056_p0 <= xor_ln204_fu_2405_p2;
    grp_fu_1081_p2 <= "1" when (unsigned(loads_left_0_fu_342) < unsigned(zext_ln887_1_reg_2646)) else "0";
    grp_fu_1089_p2 <= std_logic_vector(unsigned(MemoryController_la_3) + unsigned(ap_const_lv23_1));
    grp_fu_1105_p2 <= "1" when (ImageCache_curr_img = MAX_ADDR_V_reg_2661) else "0";
    grp_fu_1110_p2 <= std_logic_vector(unsigned(ImageCache_curr_img) + unsigned(ap_const_lv16_1));
    grp_fu_1116_p3 <= 
        ap_const_lv16_0 when (grp_fu_1105_p2(0) = '1') else 
        grp_fu_1110_p2;
    grp_fu_1130_p2 <= std_logic_vector(unsigned(loads_left_0_load_reg_2793) - unsigned(zext_ln887_1_reg_2646));
    grp_fu_1286_p0 <= grp_fu_1286_p00(16 - 1 downto 0);
    grp_fu_1286_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln209_reg_2535),21));
    grp_fu_1286_p1 <= grp_fu_1286_p10(9 - 1 downto 0);
    grp_fu_1286_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer_height_V_read_reg_2516),21));
    grp_fu_1365_p0 <= zext_ln209_5_reg_2584(10 - 1 downto 0);
    grp_fu_1365_p1 <= grp_fu_1365_p10(10 - 1 downto 0);
    grp_fu_1365_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_1_reg_837),19));
    grp_fu_2034_p0 <= grp_fu_2034_p00(9 - 1 downto 0);
    grp_fu_2034_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(MemoryController_wi),18));
    grp_fu_2034_p1 <= zext_ln887_3_reg_2919(9 - 1 downto 0);
    grp_fu_2090_p0 <= grp_fu_2090_p00(18 - 1 downto 0);
    grp_fu_2090_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xy_offset_V_reg_2990),23));
    grp_fu_2090_p1 <= grp_fu_2090_p10(10 - 1 downto 0);
    grp_fu_2090_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(MemoryController_ch),23));
    grp_fu_2104_p0 <= grp_fu_2104_p00(10 - 1 downto 0);
    grp_fu_2104_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(WeightsCache_ch_out),19));
    grp_fu_2104_p1 <= zext_ln209_7_reg_2877(10 - 1 downto 0);

    grp_processInputChannel_s_fu_1003_ap_continue_assign_proc : process(ap_CS_fsm_state60, ap_block_state60_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state60_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            grp_processInputChannel_s_fu_1003_ap_continue <= ap_const_logic_1;
        else 
            grp_processInputChannel_s_fu_1003_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_processInputChannel_s_fu_1003_ap_start <= grp_processInputChannel_s_fu_1003_ap_start_reg;

    grp_reg_float_s_fu_1586_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage1_11001_ignoreCallOp343, ap_block_pp0_stage0_11001_ignoreCallOp347)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp347)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_ignoreCallOp343)))) then 
            grp_reg_float_s_fu_1586_ap_ce <= ap_const_logic_1;
        else 
            grp_reg_float_s_fu_1586_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_reg_float_s_fu_1676_ap_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001_ignoreCallOp451)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001_ignoreCallOp451))) then 
            grp_reg_float_s_fu_1676_ap_ce <= ap_const_logic_1;
        else 
            grp_reg_float_s_fu_1676_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_reg_float_s_fu_1727_ap_ce_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001_ignoreCallOp494)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001_ignoreCallOp494))) then 
            grp_reg_float_s_fu_1727_ap_ce <= ap_const_logic_1;
        else 
            grp_reg_float_s_fu_1727_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_reg_float_s_fu_1985_ap_ce_assign_proc : process(ap_CS_fsm_state57, ap_CS_fsm_state58)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            grp_reg_float_s_fu_1985_ap_ce <= ap_const_logic_1;
        else 
            grp_reg_float_s_fu_1985_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_2433_p2 <= std_logic_vector(unsigned(i_op_assign_1_reg_992) + unsigned(ap_const_lv10_1));
    icmp_ln107_fu_1798_p2 <= "1" when (ret_V_15_reg_946 = layer_width_V_read_reg_2522) else "0";
    icmp_ln130_fu_2015_p2 <= "1" when (t_V_12_reg_968 = layer_channels_in_V_s_reg_2504) else "0";
    icmp_ln164_fu_2165_p2 <= "1" when (t_V_14_reg_980 = layer_channels_out_V_1_reg_2494) else "0";
    icmp_ln178_fu_2073_p2 <= "1" when (or_ln178_fu_2068_p2 = ap_const_lv9_0) else "0";
    icmp_ln188_fu_2427_p2 <= "1" when (i_op_assign_1_reg_992 = MemoryController_ch_1_fu_354) else "0";
    icmp_ln191_fu_2444_p2 <= "1" when (reg_1141 = ap_const_lv10_0) else "0";
    icmp_ln217_1_fu_2320_p2 <= "1" when (select_ln879_reg_3047 = ap_const_lv3_1) else "0";
    icmp_ln217_2_fu_2333_p2 <= "1" when (select_ln879_reg_3047 = ap_const_lv3_2) else "0";
    icmp_ln217_3_fu_2346_p2 <= "1" when (select_ln879_reg_3047 = ap_const_lv3_3) else "0";
    icmp_ln217_4_fu_2359_p2 <= "1" when (select_ln879_reg_3047 = ap_const_lv3_4) else "0";
    icmp_ln217_5_fu_2372_p2 <= "1" when (select_ln879_reg_3047 = ap_const_lv3_5) else "0";
    icmp_ln217_6_fu_2385_p2 <= "1" when (select_ln879_reg_3047 = ap_const_lv3_6) else "0";
    icmp_ln217_fu_2307_p2 <= "1" when (select_ln879_reg_3047 = ap_const_lv3_0) else "0";
    icmp_ln68_1_fu_1641_p2 <= "1" when (t_V_3_reg_893 = layer_channels_in_V_s_reg_2504) else "0";
    icmp_ln68_2_fu_1931_p2 <= "1" when (t_V_11_reg_957 = ImageCache_ch_in_V_s_reg_2929) else "0";
    icmp_ln68_fu_1692_p2 <= "1" when (t_V_5_reg_904 = layer_channels_in_V_s_reg_2504) else "0";
    icmp_ln879_1_fu_1370_p2 <= "1" when (t_V_1_reg_837 = layer_channels_in_V_s_reg_2504) else "0";
    icmp_ln879_2_fu_1341_p2 <= "1" when (layer_kernel_V_read_reg_2488 = ap_const_lv2_3) else "0";
    icmp_ln879_3_fu_1553_p2 <= "1" when (weight_index_V_fu_1547_p2 = weights_per_filter_V_reg_2666) else "0";
    icmp_ln879_4_fu_1228_p2 <= "1" when (layer_stride_V_0_data_reg = ap_const_lv2_2) else "0";
    icmp_ln879_5_fu_2180_p2 <= "1" when (WeightsCache_kernel = ap_const_lv2_3) else "0";
    icmp_ln879_8_fu_1996_p2 <= "1" when (ImageCache_curr_img = MAX_ADDR_V_1_reg_2943) else "0";
    icmp_ln879_fu_1313_p2 <= "1" when (layer_kernel_V_read_reg_2488 = ap_const_lv2_1) else "0";
    icmp_ln887_3_fu_1874_p2 <= "1" when (unsigned(loads_left_4_fu_346) < unsigned(zext_ln887_2_fu_1870_p1)) else "0";
    icmp_ln887_fu_1350_p2 <= "1" when (unsigned(zext_ln887_fu_1346_p1) < unsigned(ret_V_reg_2579)) else "0";
    icmp_ln90_fu_1616_p2 <= "1" when (t_V_8_reg_882 = layer_width_V_read_reg_2522) else "0";
    icmp_ln96_fu_1787_p2 <= "1" when (indvar_flatten_reg_924 = mul_ln92_reg_2882) else "0";
    icmp_ln99_fu_1453_p2 <= "1" when (trunc_ln99_fu_1449_p1 = add_ln99_reg_2691) else "0";

    input_offset_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state157)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state157) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            input_offset_0_ack_out <= ap_const_logic_1;
        else 
            input_offset_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    is_split_layer_fu_2117_p2 <= (MemoryController_is_1 or MemoryController_is);

    layer_channels_in_V_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state157)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state157) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            layer_channels_in_V_0_ack_out <= ap_const_logic_1;
        else 
            layer_channels_in_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    layer_channels_out_V_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state157)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state157) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            layer_channels_out_V_0_ack_out <= ap_const_logic_1;
        else 
            layer_channels_out_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    layer_global_pool_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state157)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state157) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            layer_global_pool_0_ack_out <= ap_const_logic_1;
        else 
            layer_global_pool_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    layer_height_V_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state157)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state157) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            layer_height_V_0_ack_out <= ap_const_logic_1;
        else 
            layer_height_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    layer_is_first_split_layer_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state157)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state157) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            layer_is_first_split_layer_0_ack_out <= ap_const_logic_1;
        else 
            layer_is_first_split_layer_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    layer_is_second_split_layer_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state157)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state157) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            layer_is_second_split_layer_0_ack_out <= ap_const_logic_1;
        else 
            layer_is_second_split_layer_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    layer_kernel_V_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state157)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state157) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            layer_kernel_V_0_ack_out <= ap_const_logic_1;
        else 
            layer_kernel_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    layer_mem_addr_input_V_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state157)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state157) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            layer_mem_addr_input_V_0_ack_out <= ap_const_logic_1;
        else 
            layer_mem_addr_input_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    layer_mem_addr_output_V_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state157)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state157) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            layer_mem_addr_output_V_0_ack_out <= ap_const_logic_1;
        else 
            layer_mem_addr_output_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    layer_mem_addr_weights_V_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state157)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state157) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            layer_mem_addr_weights_V_0_ack_out <= ap_const_logic_1;
        else 
            layer_mem_addr_weights_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    layer_relu_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state157)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state157) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            layer_relu_0_ack_out <= ap_const_logic_1;
        else 
            layer_relu_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    layer_stride_V_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state157)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state157) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            layer_stride_V_0_ack_out <= ap_const_logic_1;
        else 
            layer_stride_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    layer_width_V_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state157)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state157) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            layer_width_V_0_ack_out <= ap_const_logic_1;
        else 
            layer_width_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    lhs_V_1_fu_1338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_offset_read_reg_2468),33));
    lhs_V_2_fu_1394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_offset_read_reg_2463),33));
    lhs_V_fu_1318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer_channels_out_V_1_reg_2494),14));
    lshr_ln_fu_1234_p4 <= layer_width_V_0_data_reg(8 downto 1);

    memorybus_ARADDR_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln99_reg_2696, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln68_1_reg_2816, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln68_reg_2836, ap_CS_fsm_state49, memorybus_ARREADY, memorybus_addr_reg_2700, ap_block_pp0_stage1_11001, ap_block_pp1_stage0_11001, memorybus_addr_2_reg_2825, ap_block_pp2_stage0_11001, memorybus_addr_1_reg_2845, memorybus_addr_4_reg_2962)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) and (memorybus_ARREADY = ap_const_logic_1))) then 
            memorybus_ARADDR <= memorybus_addr_4_reg_2962;
        elsif (((icmp_ln68_reg_2836 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            memorybus_ARADDR <= memorybus_addr_1_reg_2845;
        elsif (((icmp_ln68_1_reg_2816 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            memorybus_ARADDR <= memorybus_addr_2_reg_2825;
        elsif (((icmp_ln99_reg_2696 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            memorybus_ARADDR <= memorybus_addr_reg_2700;
        else 
            memorybus_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    memorybus_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln99_reg_2696, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln68_1_reg_2816, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln68_reg_2836, ap_CS_fsm_state49, memorybus_ARREADY, ap_block_pp0_stage1_11001, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state49) and (memorybus_ARREADY = ap_const_logic_1)) or ((icmp_ln68_reg_2836 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((icmp_ln68_1_reg_2816 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((icmp_ln99_reg_2696 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            memorybus_ARVALID <= ap_const_logic_1;
        else 
            memorybus_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    memorybus_AWADDR_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state147, memorybus_AWREADY, memorybus_addr_3_reg_2948, memorybus_addr_5_reg_3098)
    begin
        if ((memorybus_AWREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state147)) then 
                memorybus_AWADDR <= memorybus_addr_3_reg_2948;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
                memorybus_AWADDR <= memorybus_addr_5_reg_3098;
            else 
                memorybus_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            memorybus_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    memorybus_AWLEN_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state147, memorybus_AWREADY, empty_36_fu_2422_p1)
    begin
        if ((memorybus_AWREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state147)) then 
                memorybus_AWLEN <= empty_36_fu_2422_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
                memorybus_AWLEN <= ap_const_lv32_1;
            else 
                memorybus_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            memorybus_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    memorybus_AWVALID_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state147, memorybus_AWREADY)
    begin
        if ((((memorybus_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state147)) or ((memorybus_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state132)))) then 
            memorybus_AWVALID <= ap_const_logic_1;
        else 
            memorybus_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    memorybus_BREADY_assign_proc : process(ap_CS_fsm_state138, ap_CS_fsm_state156, memorybus_BVALID, ap_predicate_op904_writeresp_state156)
    begin
        if (((not(((memorybus_BVALID = ap_const_logic_0) and (ap_predicate_op904_writeresp_state156 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state156) and (ap_predicate_op904_writeresp_state156 = ap_const_boolean_1)) or ((ap_const_logic_1 = ap_CS_fsm_state138) and (memorybus_BVALID = ap_const_logic_1)))) then 
            memorybus_BREADY <= ap_const_logic_1;
        else 
            memorybus_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    memorybus_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, icmp_ln99_reg_2696_pp0_iter3_reg, ap_enable_reg_pp1_iter8, icmp_ln68_1_reg_2816_pp1_iter7_reg, ap_enable_reg_pp2_iter8, icmp_ln68_reg_2836_pp2_iter7_reg, ap_CS_fsm_state56, memorybus_RVALID, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state56) and (memorybus_RVALID = ap_const_logic_1)) or ((icmp_ln68_reg_2836_pp2_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((icmp_ln68_1_reg_2816_pp1_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((icmp_ln99_reg_2696_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            memorybus_RREADY <= ap_const_logic_1;
        else 
            memorybus_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    memorybus_WDATA_assign_proc : process(ap_CS_fsm_state133, ap_enable_reg_pp3_iter3, icmp_ln188_reg_3201_pp3_iter2_reg, reg_1145, result_reg_3184, ap_block_pp3_stage0_01001)
    begin
        if (((icmp_ln188_reg_3201_pp3_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_01001) and (ap_enable_reg_pp3_iter3 = ap_const_logic_1))) then 
            memorybus_WDATA <= reg_1145;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state133)) then 
            memorybus_WDATA <= result_reg_3184;
        else 
            memorybus_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    memorybus_WVALID_assign_proc : process(ap_CS_fsm_state133, ap_enable_reg_pp3_iter3, icmp_ln188_reg_3201_pp3_iter2_reg, memorybus_WREADY, ap_block_pp3_stage0_11001)
    begin
        if ((((icmp_ln188_reg_3201_pp3_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_state133) and (memorybus_WREADY = ap_const_logic_1)))) then 
            memorybus_WVALID <= ap_const_logic_1;
        else 
            memorybus_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    memorybus_blk_n_AR_assign_proc : process(m_axi_memorybus_ARREADY, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln99_reg_2696, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln68_1_reg_2816, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, icmp_ln68_reg_2836, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or ((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln68_reg_2836 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln68_1_reg_2816 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (icmp_ln99_reg_2696 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            memorybus_blk_n_AR <= m_axi_memorybus_ARREADY;
        else 
            memorybus_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    memorybus_blk_n_AW_assign_proc : process(m_axi_memorybus_AWREADY, ap_CS_fsm_state132, ap_CS_fsm_state147)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state147) or (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            memorybus_blk_n_AW <= m_axi_memorybus_AWREADY;
        else 
            memorybus_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    memorybus_blk_n_B_assign_proc : process(m_axi_memorybus_BVALID, ap_CS_fsm_state138, ap_CS_fsm_state156, layer_global_pool_re_reg_2479, icmp_ln191_reg_3215)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state138) or ((layer_global_pool_re_reg_2479 = ap_const_lv1_1) and (icmp_ln191_reg_3215 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state156)))) then 
            memorybus_blk_n_B <= m_axi_memorybus_BVALID;
        else 
            memorybus_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    memorybus_blk_n_R_assign_proc : process(m_axi_memorybus_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, icmp_ln99_reg_2696_pp0_iter3_reg, ap_block_pp1_stage0, ap_enable_reg_pp1_iter8, icmp_ln68_1_reg_2816_pp1_iter7_reg, ap_block_pp2_stage0, ap_enable_reg_pp2_iter8, icmp_ln68_reg_2836_pp2_iter7_reg, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) or ((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln68_reg_2836_pp2_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter8 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln68_1_reg_2816_pp1_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln99_reg_2696_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            memorybus_blk_n_R <= m_axi_memorybus_RVALID;
        else 
            memorybus_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    memorybus_blk_n_W_assign_proc : process(m_axi_memorybus_WREADY, ap_CS_fsm_state133, ap_enable_reg_pp3_iter3, ap_block_pp3_stage0, icmp_ln188_reg_3201_pp3_iter2_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state133) or ((ap_const_boolean_0 = ap_block_pp3_stage0) and (icmp_ln188_reg_3201_pp3_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_1)))) then 
            memorybus_blk_n_W <= m_axi_memorybus_WREADY;
        else 
            memorybus_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    mul_ln209_2_fu_2457_p0 <= mul_ln209_2_fu_2457_p00(10 - 1 downto 0);
    mul_ln209_2_fu_2457_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer_channels_in_V_s_reg_2504),14));
    mul_ln209_2_fu_2457_p1 <= mul_ln209_2_fu_2457_p10(9 - 1 downto 0);
    mul_ln209_2_fu_2457_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer_width_V_read_reg_2522),14));
    mul_ln209_fu_2450_p0 <= mul_ln209_fu_2450_p00(10 - 1 downto 0);
    mul_ln209_fu_2450_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer_channels_in_V_0_data_reg),16));
    mul_ln209_fu_2450_p1 <= mul_ln209_fu_2450_p10(9 - 1 downto 0);
    mul_ln209_fu_2450_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer_width_V_0_data_reg),16));
    mul_ln92_fu_1747_p0 <= mul_ln92_fu_1747_p00(9 - 1 downto 0);
    mul_ln92_fu_1747_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer_width_V_read_reg_2522),18));
    mul_ln92_fu_1747_p1 <= mul_ln92_fu_1747_p10(9 - 1 downto 0);
    mul_ln92_fu_1747_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer_height_V_read_reg_2516),18));
    mul_ln92_fu_1747_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln92_fu_1747_p0) * unsigned(mul_ln92_fu_1747_p1), 18));
    or_ln178_fu_2068_p2 <= (x_out_V_fu_2052_p3 or select_ln887_2_reg_2914);
    p_cast_fu_1292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_reg_2530),33));
    px_offset_V_1_fu_2129_p3 <= 
        shl_ln214_2_fu_2123_p2 when (is_split_layer_fu_2117_p2(0) = '1') else 
        grp_fu_2090_p2;
    result_fu_2416_p3 <= 
        grp_fu_1050_p1 when (ProcessingElement_r_1_reg_3137(0) = '1') else 
        biased_reg_3130;
    ret_V_11_fu_1980_p2 <= (ret_V_16_fu_1976_p2 and icmp_ln879_4_reg_2541);
    ret_V_13_fu_2190_p2 <= std_logic_vector(unsigned(trunc_ln215_1_reg_3024) + unsigned(zext_ln1353_2_fu_2186_p1));
    ret_V_14_fu_2269_p2 <= std_logic_vector(unsigned(zext_ln1353_6_fu_2265_p1) + unsigned(lhs_V_2_reg_2652));
    ret_V_16_fu_1976_p2 <= (trunc_ln887_reg_2909 or trunc_ln887_1_reg_2924);
    ret_V_1_fu_1380_p3 <= 
        lhs_V_reg_2594 when (bias_or_1x1_fu_1375_p2(0) = '1') else 
        add_ln1352_reg_2599;
    ret_V_2_fu_1480_p2 <= std_logic_vector(unsigned(zext_ln1353_4_fu_1476_p1) + unsigned(lhs_V_1_reg_2604));
    ret_V_3_fu_1504_p2 <= std_logic_vector(unsigned(trunc_ln215_reg_2676) + unsigned(zext_ln1353_fu_1500_p1));
    ret_V_4_fu_1707_p2 <= std_logic_vector(unsigned(rhs_V_fu_1703_p1) + unsigned(lhs_V_2_reg_2652));
    ret_V_5_fu_1656_p2 <= std_logic_vector(unsigned(rhs_V_1_fu_1652_p1) + unsigned(lhs_V_2_reg_2652));
    ret_V_6_fu_1911_p2 <= std_logic_vector(unsigned(rhs_V_2_fu_1907_p1) + unsigned(lhs_V_2_reg_2652));
    ret_V_7_fu_1946_p2 <= std_logic_vector(unsigned(rhs_V_3_fu_1942_p1) + unsigned(lhs_V_2_reg_2652));
    ret_V_fu_1304_p2 <= std_logic_vector(unsigned(zext_ln215_fu_1301_p1) + unsigned(ap_const_lv11_1));
    rhs_V_1_fu_1652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(MemoryController_la_3),33));
    rhs_V_2_fu_1907_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(split_offset_V_fu_1899_p3),33));
    rhs_V_3_fu_1942_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(MemoryController_la_3),33));
    rhs_V_fu_1703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(MemoryController_la_3),33));
    rowID_V_1_fu_2227_p3 <= 
        add_ln321_1_fu_2195_p2 when (icmp_ln879_5_fu_2180_p2(0) = '1') else 
        trunc_ln321_3_fu_2200_p4;
    rowID_V_fu_1533_p3 <= 
        add_ln321_fu_1509_p2 when (icmp_ln879_2_reg_2609(0) = '1') else 
        trunc_ln321_1_fu_1514_p4;
    select_ln101_fu_1248_p3 <= 
        zext_ln214_3_fu_1244_p1 when (icmp_ln879_4_fu_1228_p2(0) = '1') else 
        layer_width_V_0_data_reg;
    select_ln126_1_fu_1572_p3 <= 
        co_V_fu_1558_p2 when (icmp_ln879_3_fu_1553_p2(0) = '1') else 
        ap_phi_mux_empty_24_phi_fu_875_p4;
    select_ln126_fu_1564_p3 <= 
        ap_const_lv4_0 when (icmp_ln879_3_fu_1553_p2(0) = '1') else 
        weight_index_V_fu_1547_p2;
    select_ln152_1_fu_1843_p3 <= 
        zext_ln152_1_fu_1839_p1 when (icmp_ln879_4_reg_2541(0) = '1') else 
        add_ln700_12_fu_1811_p2;
    select_ln217_1_fu_2325_p3 <= 
        WBRAM_0_0_1_q0 when (icmp_ln217_1_fu_2320_p2(0) = '1') else 
        select_ln217_fu_2312_p3;
    select_ln217_2_fu_2338_p3 <= 
        WBRAM_0_0_2_q0 when (icmp_ln217_2_fu_2333_p2(0) = '1') else 
        select_ln217_1_fu_2325_p3;
    select_ln217_3_fu_2351_p3 <= 
        WBRAM_0_0_3_q0 when (icmp_ln217_3_fu_2346_p2(0) = '1') else 
        select_ln217_2_fu_2338_p3;
    select_ln217_4_fu_2364_p3 <= 
        WBRAM_0_0_4_q0 when (icmp_ln217_4_fu_2359_p2(0) = '1') else 
        select_ln217_3_fu_2351_p3;
    select_ln217_5_fu_2377_p3 <= 
        WBRAM_0_0_5_q0 when (icmp_ln217_5_fu_2372_p2(0) = '1') else 
        select_ln217_4_fu_2364_p3;
    select_ln217_fu_2312_p3 <= 
        WBRAM_0_0_0_q0 when (icmp_ln217_fu_2307_p2(0) = '1') else 
        WBRAM_0_0_7_q0;
    select_ln51_2_fu_2001_p3 <= 
        ap_const_lv16_0 when (icmp_ln879_8_fu_1996_p2(0) = '1') else 
        grp_fu_1110_p2;
    select_ln879_fu_2219_p3 <= 
        ap_const_lv3_0 when (icmp_ln879_5_fu_2180_p2(0) = '1') else 
        weightID_V_1_fu_2214_p2;
    select_ln887_1_fu_1817_p3 <= 
        add_ln700_12_fu_1811_p2 when (icmp_ln107_fu_1798_p2(0) = '1') else 
        t_V_17_reg_935;
    select_ln887_2_fu_1850_p3 <= 
        select_ln152_1_fu_1843_p3 when (icmp_ln107_fu_1798_p2(0) = '1') else 
        y_out_V_fu_1780_p3;
    select_ln887_fu_1803_p3 <= 
        ap_const_lv9_0 when (icmp_ln107_fu_1798_p2(0) = '1') else 
        ret_V_15_reg_946;
    shl_ln214_1_fu_1884_p2 <= std_logic_vector(shift_left(unsigned(ImageCache_line_wid),to_integer(unsigned('0' & ap_const_lv16_2(16-1 downto 0)))));
    shl_ln214_2_fu_2123_p2 <= std_logic_vector(shift_left(unsigned(grp_fu_2090_p2),to_integer(unsigned('0' & ap_const_lv23_1(23-1 downto 0)))));
    shl_ln214_fu_1397_p2 <= std_logic_vector(shift_left(unsigned(mul_ln209_reg_2535),to_integer(unsigned('0' & ap_const_lv16_2(16-1 downto 0)))));
    shl_ln_fu_1321_p3 <= (layer_channels_out_V_1_reg_2494 & ap_const_lv3_0);
    split_offset_V_fu_1899_p3 <= 
        MemoryController_ch_1_fu_354 when (MemoryController_is_2_fu_350(0) = '1') else 
        ap_const_lv10_0;
    sub_ln214_2_fu_1966_p2 <= std_logic_vector(unsigned(loads_left_4_fu_346) - unsigned(zext_ln887_2_reg_2934));
    trunc_ln152_mid1_fu_1829_p4 <= add_ln700_12_fu_1811_p2(8 downto 1);
    trunc_ln214_2_fu_1524_p1 <= ap_phi_mux_empty_24_phi_fu_875_p4(3 - 1 downto 0);
    trunc_ln214_3_fu_2161_p1 <= grp_fu_2104_p2(3 - 1 downto 0);
    trunc_ln214_4_fu_2210_p1 <= t_V_14_reg_980(3 - 1 downto 0);
    trunc_ln214_fu_1436_p1 <= grp_fu_1365_p2(3 - 1 downto 0);
    trunc_ln215_1_fu_2153_p1 <= grp_fu_2104_p2(14 - 1 downto 0);
    trunc_ln215_fu_1428_p1 <= grp_fu_1365_p2(14 - 1 downto 0);
    trunc_ln321_1_fu_1514_p4 <= ret_V_3_fu_1504_p2(12 downto 3);
    trunc_ln321_2_fu_2157_p1 <= grp_fu_2104_p2(10 - 1 downto 0);
    trunc_ln321_3_fu_2200_p4 <= ret_V_13_fu_2190_p2(12 downto 3);
    trunc_ln321_fu_1432_p1 <= grp_fu_1365_p2(10 - 1 downto 0);
    trunc_ln6_fu_1766_p4 <= t_V_17_reg_935(8 downto 1);
    trunc_ln7_fu_2039_p4 <= select_ln887_reg_2895(8 downto 1);
    trunc_ln887_1_fu_1862_p1 <= select_ln887_fu_1803_p3(1 - 1 downto 0);
    trunc_ln887_fu_1825_p1 <= select_ln887_1_fu_1817_p3(1 - 1 downto 0);
    trunc_ln99_fu_1449_p1 <= ap_phi_mux_t_V_phi_fu_851_p4(14 - 1 downto 0);
    weightID_V_1_fu_2214_p2 <= std_logic_vector(unsigned(trunc_ln214_3_reg_3034) + unsigned(trunc_ln214_4_fu_2210_p1));
    weightID_V_fu_1540_p3 <= 
        ap_const_lv3_0 when (icmp_ln879_2_reg_2609(0) = '1') else 
        add_ln214_1_fu_1528_p2;
    weight_1_fu_2390_p3 <= 
        WBRAM_0_0_6_q0 when (icmp_ln217_6_fu_2385_p2(0) = '1') else 
        select_ln217_5_fu_2377_p3;
    weight_index_V_fu_1547_p2 <= std_logic_vector(unsigned(ap_phi_mux_t_V_6_phi_fu_863_p4) + unsigned(ap_const_lv4_1));

    weights_offset_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state157)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state157) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            weights_offset_0_ack_out <= ap_const_logic_1;
        else 
            weights_offset_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    weights_per_filter_V_fu_1412_p3 <= 
        ap_const_lv4_1 when (bias_or_1x1_reg_2628(0) = '1') else 
        ap_const_lv4_9;
    x_V_1_fu_2297_p2 <= std_logic_vector(unsigned(select_ln887_reg_2895) + unsigned(ap_const_lv9_1));
    x_V_fu_1621_p2 <= std_logic_vector(unsigned(t_V_8_reg_882) + unsigned(ap_const_lv9_1));
    x_out_V_fu_2052_p3 <= 
        zext_ln153_fu_2048_p1 when (icmp_ln879_4_reg_2541(0) = '1') else 
        select_ln887_reg_2895;
    xor_ln204_fu_2405_p2 <= (bitcast_ln204_fu_2402_p1 xor ap_const_lv32_80000000);
    xy_offset_V_fu_2062_p2 <= std_logic_vector(unsigned(zext_ln214_fu_2058_p1) + unsigned(grp_fu_2034_p2));
    y_out_V_fu_1780_p3 <= 
        zext_ln152_fu_1776_p1 when (icmp_ln879_4_reg_2541(0) = '1') else 
        t_V_17_reg_935;
    zext_ln123_fu_1490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln123_fu_1485_p2),64));
    zext_ln1352_1_fu_1328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_1321_p3),14));
    zext_ln1353_1_fu_1627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln209_2_reg_2574),23));
    zext_ln1353_2_fu_2186_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_14_reg_980),14));
    zext_ln1353_3_fu_1466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_t_V_phi_fu_851_p4),24));
    zext_ln1353_4_fu_1476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1353_fu_1470_p2),33));
    zext_ln1353_5_fu_2255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_14_reg_980),24));
    zext_ln1353_6_fu_2265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1353_9_fu_2259_p2),33));
    zext_ln1353_fu_1500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_empty_24_phi_fu_875_p4),14));
    zext_ln138_1_fu_1666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln138_1_fu_1661_p2),64));
    zext_ln138_2_fu_1956_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln138_2_fu_1951_p2),64));
    zext_ln138_fu_1717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln138_fu_1712_p2),64));
    zext_ln152_1_fu_1839_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln152_mid1_fu_1829_p4),9));
    zext_ln152_fu_1776_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln6_fu_1766_p4),9));
    zext_ln153_fu_2048_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln7_fu_2039_p4),9));
    zext_ln174_fu_2279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln174_fu_2274_p2),64));
    zext_ln191_fu_1921_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln191_fu_1916_p2),64));
    zext_ln209_5_fu_1310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer_channels_out_V_1_reg_2494),19));
    zext_ln209_7_fu_1738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer_channels_in_V_s_reg_2504),19));
    zext_ln214_3_fu_1244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_1234_p4),9));
    zext_ln214_fu_2058_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_out_V_fu_2052_p3),18));
    zext_ln215_3_fu_1462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(MemoryController_la),24));
    zext_ln215_9_fu_2251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(MemoryController_pi),24));
    zext_ln215_fu_1301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer_channels_in_V_s_reg_2504),11));
    zext_ln544_10_fu_1682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ImageCache_curr_img),64));
    zext_ln544_11_fu_1991_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ImageCache_curr_img),64));
    zext_ln544_2_fu_1600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rowID_V_reg_2706_pp0_iter4_reg),64));
    zext_ln544_6_fu_2439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_1_reg_992),64));
    zext_ln544_7_fu_2302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_14_reg_980),64));
    zext_ln544_8_fu_2235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rowID_V_1_fu_2227_p3),64));
    zext_ln544_fu_1733_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ImageCache_curr_img),64));
    zext_ln887_1_fu_1391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer_channels_in_V_s_reg_2504),21));
    zext_ln887_2_fu_1870_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ImageCache_ch_in_V),21));
    zext_ln887_3_fu_1858_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln887_2_fu_1850_p3),18));
    zext_ln887_fu_1346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_1_reg_837),11));
end behav;
