-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity processInputChannel_s is
port (
    y_V : IN STD_LOGIC_VECTOR (8 downto 0);
    x_V : IN STD_LOGIC_VECTOR (8 downto 0);
    ci_in_V : IN STD_LOGIC_VECTOR (9 downto 0);
    ch_out_V : IN STD_LOGIC_VECTOR (9 downto 0);
    ImageCache_line_wid : IN STD_LOGIC_VECTOR (15 downto 0);
    ImageCache_ch_in_V : IN STD_LOGIC_VECTOR (9 downto 0);
    ImageCache_width_in : IN STD_LOGIC_VECTOR (8 downto 0);
    ImageCache_height_i : IN STD_LOGIC_VECTOR (8 downto 0);
    ImageCache_IBRAM_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    ImageCache_IBRAM_ce0 : OUT STD_LOGIC;
    ImageCache_IBRAM_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ImageCache_IBRAM_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ImageCache_IBRAM_we0 : OUT STD_LOGIC;
    ImageCache_IBRAM_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    ImageCache_IBRAM_ce1 : OUT STD_LOGIC;
    ImageCache_IBRAM_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ImageCache_IBRAM_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    ImageCache_IBRAM_we1 : OUT STD_LOGIC;
    WeightsCache_ch_out : IN STD_LOGIC_VECTOR (9 downto 0);
    WeightsCache_kernel : IN STD_LOGIC_VECTOR (1 downto 0);
    WBRAM_0_0_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    WBRAM_0_0_0_ce0 : OUT STD_LOGIC;
    WBRAM_0_0_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    WBRAM_0_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    WBRAM_0_0_0_we0 : OUT STD_LOGIC;
    WBRAM_0_0_0_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    WBRAM_0_0_0_ce1 : OUT STD_LOGIC;
    WBRAM_0_0_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    WBRAM_0_0_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    WBRAM_0_0_0_we1 : OUT STD_LOGIC;
    WBRAM_0_0_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    WBRAM_0_0_1_ce0 : OUT STD_LOGIC;
    WBRAM_0_0_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    WBRAM_0_0_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    WBRAM_0_0_1_we0 : OUT STD_LOGIC;
    WBRAM_0_0_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    WBRAM_0_0_1_ce1 : OUT STD_LOGIC;
    WBRAM_0_0_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    WBRAM_0_0_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    WBRAM_0_0_1_we1 : OUT STD_LOGIC;
    WBRAM_0_0_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    WBRAM_0_0_2_ce0 : OUT STD_LOGIC;
    WBRAM_0_0_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    WBRAM_0_0_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    WBRAM_0_0_2_we0 : OUT STD_LOGIC;
    WBRAM_0_0_2_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    WBRAM_0_0_2_ce1 : OUT STD_LOGIC;
    WBRAM_0_0_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    WBRAM_0_0_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    WBRAM_0_0_2_we1 : OUT STD_LOGIC;
    WBRAM_0_0_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    WBRAM_0_0_3_ce0 : OUT STD_LOGIC;
    WBRAM_0_0_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    WBRAM_0_0_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    WBRAM_0_0_3_we0 : OUT STD_LOGIC;
    WBRAM_0_0_3_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    WBRAM_0_0_3_ce1 : OUT STD_LOGIC;
    WBRAM_0_0_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    WBRAM_0_0_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    WBRAM_0_0_3_we1 : OUT STD_LOGIC;
    WBRAM_0_0_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    WBRAM_0_0_4_ce0 : OUT STD_LOGIC;
    WBRAM_0_0_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    WBRAM_0_0_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    WBRAM_0_0_4_we0 : OUT STD_LOGIC;
    WBRAM_0_0_4_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    WBRAM_0_0_4_ce1 : OUT STD_LOGIC;
    WBRAM_0_0_4_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    WBRAM_0_0_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    WBRAM_0_0_4_we1 : OUT STD_LOGIC;
    WBRAM_0_0_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    WBRAM_0_0_5_ce0 : OUT STD_LOGIC;
    WBRAM_0_0_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    WBRAM_0_0_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    WBRAM_0_0_5_we0 : OUT STD_LOGIC;
    WBRAM_0_0_5_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    WBRAM_0_0_5_ce1 : OUT STD_LOGIC;
    WBRAM_0_0_5_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    WBRAM_0_0_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    WBRAM_0_0_5_we1 : OUT STD_LOGIC;
    WBRAM_0_0_6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    WBRAM_0_0_6_ce0 : OUT STD_LOGIC;
    WBRAM_0_0_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    WBRAM_0_0_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    WBRAM_0_0_6_we0 : OUT STD_LOGIC;
    WBRAM_0_0_6_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    WBRAM_0_0_6_ce1 : OUT STD_LOGIC;
    WBRAM_0_0_6_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    WBRAM_0_0_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    WBRAM_0_0_6_we1 : OUT STD_LOGIC;
    WBRAM_0_0_7_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    WBRAM_0_0_7_ce0 : OUT STD_LOGIC;
    WBRAM_0_0_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    WBRAM_0_0_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    WBRAM_0_0_7_we0 : OUT STD_LOGIC;
    WBRAM_0_0_7_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    WBRAM_0_0_7_ce1 : OUT STD_LOGIC;
    WBRAM_0_0_7_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    WBRAM_0_0_7_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    WBRAM_0_0_7_we1 : OUT STD_LOGIC;
    WBRAM_0_0_8_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    WBRAM_0_0_8_ce0 : OUT STD_LOGIC;
    WBRAM_0_0_8_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    WBRAM_0_0_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    WBRAM_0_0_8_we0 : OUT STD_LOGIC;
    WBRAM_0_0_8_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    WBRAM_0_0_8_ce1 : OUT STD_LOGIC;
    WBRAM_0_0_8_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    WBRAM_0_0_8_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    WBRAM_0_0_8_we1 : OUT STD_LOGIC;
    OutputCache_OBRAM_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    OutputCache_OBRAM_ce0 : OUT STD_LOGIC;
    OutputCache_OBRAM_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OutputCache_OBRAM_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    OutputCache_OBRAM_we0 : OUT STD_LOGIC;
    OutputCache_OBRAM_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    OutputCache_OBRAM_ce1 : OUT STD_LOGIC;
    OutputCache_OBRAM_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OutputCache_OBRAM_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    OutputCache_OBRAM_we1 : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    y_V_ap_vld : IN STD_LOGIC;
    x_V_ap_vld : IN STD_LOGIC;
    ci_in_V_ap_vld : IN STD_LOGIC;
    ch_out_V_ap_vld : IN STD_LOGIC;
    ImageCache_line_wid_ap_vld : IN STD_LOGIC;
    ImageCache_ch_in_V_ap_vld : IN STD_LOGIC;
    ImageCache_width_in_ap_vld : IN STD_LOGIC;
    ImageCache_height_i_ap_vld : IN STD_LOGIC;
    WeightsCache_ch_out_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    WeightsCache_kernel_ap_vld : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of processInputChannel_s is 
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal preloadPixelsAndPrec_U0_ap_start : STD_LOGIC;
    signal preloadPixelsAndPrec_U0_ap_done : STD_LOGIC;
    signal preloadPixelsAndPrec_U0_ap_continue : STD_LOGIC;
    signal preloadPixelsAndPrec_U0_ap_idle : STD_LOGIC;
    signal preloadPixelsAndPrec_U0_ap_ready : STD_LOGIC;
    signal preloadPixelsAndPrec_U0_ci_V_out_din : STD_LOGIC_VECTOR (9 downto 0);
    signal preloadPixelsAndPrec_U0_ci_V_out_write : STD_LOGIC;
    signal preloadPixelsAndPrec_U0_ch_out_V_out_din : STD_LOGIC_VECTOR (9 downto 0);
    signal preloadPixelsAndPrec_U0_ch_out_V_out_write : STD_LOGIC;
    signal preloadPixelsAndPrec_U0_ImageCache_IBRAM_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal preloadPixelsAndPrec_U0_ImageCache_IBRAM_ce0 : STD_LOGIC;
    signal preloadPixelsAndPrec_U0_ap_return_0 : STD_LOGIC_VECTOR (18 downto 0);
    signal preloadPixelsAndPrec_U0_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal preloadPixelsAndPrec_U0_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal preloadPixelsAndPrec_U0_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal preloadPixelsAndPrec_U0_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal preloadPixelsAndPrec_U0_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal preloadPixelsAndPrec_U0_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal preloadPixelsAndPrec_U0_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal preloadPixelsAndPrec_U0_ap_return_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal preloadPixelsAndPrec_U0_ap_return_9 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_pixel_buffer_8 : STD_LOGIC;
    signal pixel_buffer_8_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_pixel_buffer_8 : STD_LOGIC := '0';
    signal ap_sync_channel_write_pixel_buffer_8 : STD_LOGIC;
    signal ap_channel_done_pixel_buffer_7 : STD_LOGIC;
    signal pixel_buffer_7_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_pixel_buffer_7 : STD_LOGIC := '0';
    signal ap_sync_channel_write_pixel_buffer_7 : STD_LOGIC;
    signal ap_channel_done_pixel_buffer_6 : STD_LOGIC;
    signal pixel_buffer_6_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_pixel_buffer_6 : STD_LOGIC := '0';
    signal ap_sync_channel_write_pixel_buffer_6 : STD_LOGIC;
    signal ap_channel_done_pixel_buffer_5 : STD_LOGIC;
    signal pixel_buffer_5_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_pixel_buffer_5 : STD_LOGIC := '0';
    signal ap_sync_channel_write_pixel_buffer_5 : STD_LOGIC;
    signal ap_channel_done_pixel_buffer_4 : STD_LOGIC;
    signal pixel_buffer_4_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_pixel_buffer_4 : STD_LOGIC := '0';
    signal ap_sync_channel_write_pixel_buffer_4 : STD_LOGIC;
    signal ap_channel_done_pixel_buffer_3 : STD_LOGIC;
    signal pixel_buffer_3_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_pixel_buffer_3 : STD_LOGIC := '0';
    signal ap_sync_channel_write_pixel_buffer_3 : STD_LOGIC;
    signal ap_channel_done_pixel_buffer_2 : STD_LOGIC;
    signal pixel_buffer_2_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_pixel_buffer_2 : STD_LOGIC := '0';
    signal ap_sync_channel_write_pixel_buffer_2 : STD_LOGIC;
    signal ap_channel_done_pixel_buffer_1 : STD_LOGIC;
    signal pixel_buffer_1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_pixel_buffer_1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_pixel_buffer_1 : STD_LOGIC;
    signal ap_channel_done_pixel_buffer_0 : STD_LOGIC;
    signal pixel_buffer_0_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_pixel_buffer_0 : STD_LOGIC := '0';
    signal ap_sync_channel_write_pixel_buffer_0 : STD_LOGIC;
    signal ap_channel_done_ci_offset_V : STD_LOGIC;
    signal ci_offset_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_ci_offset_V : STD_LOGIC := '0';
    signal ap_sync_channel_write_ci_offset_V : STD_LOGIC;
    signal processAllCHout_U0_ap_start : STD_LOGIC;
    signal processAllCHout_U0_ap_done : STD_LOGIC;
    signal processAllCHout_U0_ap_continue : STD_LOGIC;
    signal processAllCHout_U0_ap_idle : STD_LOGIC;
    signal processAllCHout_U0_ap_ready : STD_LOGIC;
    signal processAllCHout_U0_ch_out_V_read : STD_LOGIC;
    signal processAllCHout_U0_ci_in_V_read : STD_LOGIC;
    signal processAllCHout_U0_WBRAM_0_0_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal processAllCHout_U0_WBRAM_0_0_0_ce0 : STD_LOGIC;
    signal processAllCHout_U0_WBRAM_0_0_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal processAllCHout_U0_WBRAM_0_0_1_ce0 : STD_LOGIC;
    signal processAllCHout_U0_WBRAM_0_0_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal processAllCHout_U0_WBRAM_0_0_2_ce0 : STD_LOGIC;
    signal processAllCHout_U0_WBRAM_0_0_3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal processAllCHout_U0_WBRAM_0_0_3_ce0 : STD_LOGIC;
    signal processAllCHout_U0_WBRAM_0_0_4_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal processAllCHout_U0_WBRAM_0_0_4_ce0 : STD_LOGIC;
    signal processAllCHout_U0_WBRAM_0_0_5_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal processAllCHout_U0_WBRAM_0_0_5_ce0 : STD_LOGIC;
    signal processAllCHout_U0_WBRAM_0_0_6_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal processAllCHout_U0_WBRAM_0_0_6_ce0 : STD_LOGIC;
    signal processAllCHout_U0_WBRAM_0_0_7_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal processAllCHout_U0_WBRAM_0_0_7_ce0 : STD_LOGIC;
    signal processAllCHout_U0_WBRAM_0_0_8_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal processAllCHout_U0_WBRAM_0_0_8_ce0 : STD_LOGIC;
    signal processAllCHout_U0_OutputCache_OBRAM_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal processAllCHout_U0_OutputCache_OBRAM_ce0 : STD_LOGIC;
    signal processAllCHout_U0_OutputCache_OBRAM_we0 : STD_LOGIC;
    signal processAllCHout_U0_OutputCache_OBRAM_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal processAllCHout_U0_OutputCache_OBRAM_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal processAllCHout_U0_OutputCache_OBRAM_ce1 : STD_LOGIC;
    signal processAllCHout_U0_OutputCache_OBRAM_we1 : STD_LOGIC;
    signal processAllCHout_U0_OutputCache_OBRAM_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal ci_in_V_c_full_n : STD_LOGIC;
    signal ci_in_V_c_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal ci_in_V_c_empty_n : STD_LOGIC;
    signal ch_out_V_c_full_n : STD_LOGIC;
    signal ch_out_V_c_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal ch_out_V_c_empty_n : STD_LOGIC;
    signal ci_offset_V_dout : STD_LOGIC_VECTOR (18 downto 0);
    signal ci_offset_V_empty_n : STD_LOGIC;
    signal pixel_buffer_0_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal pixel_buffer_0_empty_n : STD_LOGIC;
    signal pixel_buffer_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal pixel_buffer_1_empty_n : STD_LOGIC;
    signal pixel_buffer_2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal pixel_buffer_2_empty_n : STD_LOGIC;
    signal pixel_buffer_3_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal pixel_buffer_3_empty_n : STD_LOGIC;
    signal pixel_buffer_4_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal pixel_buffer_4_empty_n : STD_LOGIC;
    signal pixel_buffer_5_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal pixel_buffer_5_empty_n : STD_LOGIC;
    signal pixel_buffer_6_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal pixel_buffer_6_empty_n : STD_LOGIC;
    signal pixel_buffer_7_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal pixel_buffer_7_empty_n : STD_LOGIC;
    signal pixel_buffer_8_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal pixel_buffer_8_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_preloadPixelsAndPrec_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_preloadPixelsAndPrec_U0_ap_ready : STD_LOGIC;
    signal preloadPixelsAndPrec_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_processAllCHout_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_processAllCHout_U0_ap_ready : STD_LOGIC;
    signal processAllCHout_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal preloadPixelsAndPrec_U0_start_full_n : STD_LOGIC;
    signal preloadPixelsAndPrec_U0_start_write : STD_LOGIC;
    signal processAllCHout_U0_start_full_n : STD_LOGIC;
    signal processAllCHout_U0_start_write : STD_LOGIC;

    component preloadPixelsAndPrec IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        y_V_2 : IN STD_LOGIC_VECTOR (8 downto 0);
        x_V_3 : IN STD_LOGIC_VECTOR (8 downto 0);
        ci_V : IN STD_LOGIC_VECTOR (9 downto 0);
        ch_out_V : IN STD_LOGIC_VECTOR (9 downto 0);
        ci_V_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        ci_V_out_full_n : IN STD_LOGIC;
        ci_V_out_write : OUT STD_LOGIC;
        ch_out_V_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        ch_out_V_out_full_n : IN STD_LOGIC;
        ch_out_V_out_write : OUT STD_LOGIC;
        ImageCache_line_wid : IN STD_LOGIC_VECTOR (15 downto 0);
        ImageCache_ch_in_V : IN STD_LOGIC_VECTOR (9 downto 0);
        ImageCache_width_in : IN STD_LOGIC_VECTOR (8 downto 0);
        ImageCache_height_i : IN STD_LOGIC_VECTOR (8 downto 0);
        ImageCache_IBRAM_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        ImageCache_IBRAM_ce0 : OUT STD_LOGIC;
        ImageCache_IBRAM_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        WeightsCache_ch_out : IN STD_LOGIC_VECTOR (9 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component processAllCHout IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ch_out_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        ch_out_V_empty_n : IN STD_LOGIC;
        ch_out_V_read : OUT STD_LOGIC;
        ci_in_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        ci_in_V_empty_n : IN STD_LOGIC;
        ci_in_V_read : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (18 downto 0);
        pixels_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        pixels_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        pixels_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        pixels_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        pixels_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
        pixels_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
        pixels_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
        pixels_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
        pixels_8_read : IN STD_LOGIC_VECTOR (31 downto 0);
        WeightsCache_kernel : IN STD_LOGIC_VECTOR (1 downto 0);
        WBRAM_0_0_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        WBRAM_0_0_0_ce0 : OUT STD_LOGIC;
        WBRAM_0_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        WBRAM_0_0_1_ce0 : OUT STD_LOGIC;
        WBRAM_0_0_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        WBRAM_0_0_2_ce0 : OUT STD_LOGIC;
        WBRAM_0_0_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        WBRAM_0_0_3_ce0 : OUT STD_LOGIC;
        WBRAM_0_0_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        WBRAM_0_0_4_ce0 : OUT STD_LOGIC;
        WBRAM_0_0_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        WBRAM_0_0_5_ce0 : OUT STD_LOGIC;
        WBRAM_0_0_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        WBRAM_0_0_6_ce0 : OUT STD_LOGIC;
        WBRAM_0_0_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_7_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        WBRAM_0_0_7_ce0 : OUT STD_LOGIC;
        WBRAM_0_0_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        WBRAM_0_0_8_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        WBRAM_0_0_8_ce0 : OUT STD_LOGIC;
        WBRAM_0_0_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        OutputCache_OBRAM_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        OutputCache_OBRAM_ce0 : OUT STD_LOGIC;
        OutputCache_OBRAM_we0 : OUT STD_LOGIC;
        OutputCache_OBRAM_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        OutputCache_OBRAM_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        OutputCache_OBRAM_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        OutputCache_OBRAM_ce1 : OUT STD_LOGIC;
        OutputCache_OBRAM_we1 : OUT STD_LOGIC;
        OutputCache_OBRAM_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fifo_w10_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (9 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w19_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (18 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (18 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    preloadPixelsAndPrec_U0 : component preloadPixelsAndPrec
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => preloadPixelsAndPrec_U0_ap_start,
        ap_done => preloadPixelsAndPrec_U0_ap_done,
        ap_continue => preloadPixelsAndPrec_U0_ap_continue,
        ap_idle => preloadPixelsAndPrec_U0_ap_idle,
        ap_ready => preloadPixelsAndPrec_U0_ap_ready,
        y_V_2 => y_V,
        x_V_3 => x_V,
        ci_V => ci_in_V,
        ch_out_V => ch_out_V,
        ci_V_out_din => preloadPixelsAndPrec_U0_ci_V_out_din,
        ci_V_out_full_n => ci_in_V_c_full_n,
        ci_V_out_write => preloadPixelsAndPrec_U0_ci_V_out_write,
        ch_out_V_out_din => preloadPixelsAndPrec_U0_ch_out_V_out_din,
        ch_out_V_out_full_n => ch_out_V_c_full_n,
        ch_out_V_out_write => preloadPixelsAndPrec_U0_ch_out_V_out_write,
        ImageCache_line_wid => ImageCache_line_wid,
        ImageCache_ch_in_V => ImageCache_ch_in_V,
        ImageCache_width_in => ImageCache_width_in,
        ImageCache_height_i => ImageCache_height_i,
        ImageCache_IBRAM_address0 => preloadPixelsAndPrec_U0_ImageCache_IBRAM_address0,
        ImageCache_IBRAM_ce0 => preloadPixelsAndPrec_U0_ImageCache_IBRAM_ce0,
        ImageCache_IBRAM_q0 => ImageCache_IBRAM_q0,
        WeightsCache_ch_out => WeightsCache_ch_out,
        ap_return_0 => preloadPixelsAndPrec_U0_ap_return_0,
        ap_return_1 => preloadPixelsAndPrec_U0_ap_return_1,
        ap_return_2 => preloadPixelsAndPrec_U0_ap_return_2,
        ap_return_3 => preloadPixelsAndPrec_U0_ap_return_3,
        ap_return_4 => preloadPixelsAndPrec_U0_ap_return_4,
        ap_return_5 => preloadPixelsAndPrec_U0_ap_return_5,
        ap_return_6 => preloadPixelsAndPrec_U0_ap_return_6,
        ap_return_7 => preloadPixelsAndPrec_U0_ap_return_7,
        ap_return_8 => preloadPixelsAndPrec_U0_ap_return_8,
        ap_return_9 => preloadPixelsAndPrec_U0_ap_return_9);

    processAllCHout_U0 : component processAllCHout
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => processAllCHout_U0_ap_start,
        ap_done => processAllCHout_U0_ap_done,
        ap_continue => processAllCHout_U0_ap_continue,
        ap_idle => processAllCHout_U0_ap_idle,
        ap_ready => processAllCHout_U0_ap_ready,
        ch_out_V_dout => ch_out_V_c_dout,
        ch_out_V_empty_n => ch_out_V_c_empty_n,
        ch_out_V_read => processAllCHout_U0_ch_out_V_read,
        ci_in_V_dout => ci_in_V_c_dout,
        ci_in_V_empty_n => ci_in_V_c_empty_n,
        ci_in_V_read => processAllCHout_U0_ci_in_V_read,
        p_read => ci_offset_V_dout,
        pixels_0_read => pixel_buffer_0_dout,
        pixels_1_read => pixel_buffer_1_dout,
        pixels_2_read => pixel_buffer_2_dout,
        pixels_3_read => pixel_buffer_3_dout,
        pixels_4_read => pixel_buffer_4_dout,
        pixels_5_read => pixel_buffer_5_dout,
        pixels_6_read => pixel_buffer_6_dout,
        pixels_7_read => pixel_buffer_7_dout,
        pixels_8_read => pixel_buffer_8_dout,
        WeightsCache_kernel => WeightsCache_kernel,
        WBRAM_0_0_0_address0 => processAllCHout_U0_WBRAM_0_0_0_address0,
        WBRAM_0_0_0_ce0 => processAllCHout_U0_WBRAM_0_0_0_ce0,
        WBRAM_0_0_0_q0 => WBRAM_0_0_0_q0,
        WBRAM_0_0_1_address0 => processAllCHout_U0_WBRAM_0_0_1_address0,
        WBRAM_0_0_1_ce0 => processAllCHout_U0_WBRAM_0_0_1_ce0,
        WBRAM_0_0_1_q0 => WBRAM_0_0_1_q0,
        WBRAM_0_0_2_address0 => processAllCHout_U0_WBRAM_0_0_2_address0,
        WBRAM_0_0_2_ce0 => processAllCHout_U0_WBRAM_0_0_2_ce0,
        WBRAM_0_0_2_q0 => WBRAM_0_0_2_q0,
        WBRAM_0_0_3_address0 => processAllCHout_U0_WBRAM_0_0_3_address0,
        WBRAM_0_0_3_ce0 => processAllCHout_U0_WBRAM_0_0_3_ce0,
        WBRAM_0_0_3_q0 => WBRAM_0_0_3_q0,
        WBRAM_0_0_4_address0 => processAllCHout_U0_WBRAM_0_0_4_address0,
        WBRAM_0_0_4_ce0 => processAllCHout_U0_WBRAM_0_0_4_ce0,
        WBRAM_0_0_4_q0 => WBRAM_0_0_4_q0,
        WBRAM_0_0_5_address0 => processAllCHout_U0_WBRAM_0_0_5_address0,
        WBRAM_0_0_5_ce0 => processAllCHout_U0_WBRAM_0_0_5_ce0,
        WBRAM_0_0_5_q0 => WBRAM_0_0_5_q0,
        WBRAM_0_0_6_address0 => processAllCHout_U0_WBRAM_0_0_6_address0,
        WBRAM_0_0_6_ce0 => processAllCHout_U0_WBRAM_0_0_6_ce0,
        WBRAM_0_0_6_q0 => WBRAM_0_0_6_q0,
        WBRAM_0_0_7_address0 => processAllCHout_U0_WBRAM_0_0_7_address0,
        WBRAM_0_0_7_ce0 => processAllCHout_U0_WBRAM_0_0_7_ce0,
        WBRAM_0_0_7_q0 => WBRAM_0_0_7_q0,
        WBRAM_0_0_8_address0 => processAllCHout_U0_WBRAM_0_0_8_address0,
        WBRAM_0_0_8_ce0 => processAllCHout_U0_WBRAM_0_0_8_ce0,
        WBRAM_0_0_8_q0 => WBRAM_0_0_8_q0,
        OutputCache_OBRAM_address0 => processAllCHout_U0_OutputCache_OBRAM_address0,
        OutputCache_OBRAM_ce0 => processAllCHout_U0_OutputCache_OBRAM_ce0,
        OutputCache_OBRAM_we0 => processAllCHout_U0_OutputCache_OBRAM_we0,
        OutputCache_OBRAM_d0 => processAllCHout_U0_OutputCache_OBRAM_d0,
        OutputCache_OBRAM_q0 => OutputCache_OBRAM_q0,
        OutputCache_OBRAM_address1 => processAllCHout_U0_OutputCache_OBRAM_address1,
        OutputCache_OBRAM_ce1 => processAllCHout_U0_OutputCache_OBRAM_ce1,
        OutputCache_OBRAM_we1 => processAllCHout_U0_OutputCache_OBRAM_we1,
        OutputCache_OBRAM_d1 => processAllCHout_U0_OutputCache_OBRAM_d1);

    ci_in_V_c_U : component fifo_w10_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => preloadPixelsAndPrec_U0_ci_V_out_din,
        if_full_n => ci_in_V_c_full_n,
        if_write => preloadPixelsAndPrec_U0_ci_V_out_write,
        if_dout => ci_in_V_c_dout,
        if_empty_n => ci_in_V_c_empty_n,
        if_read => processAllCHout_U0_ci_in_V_read);

    ch_out_V_c_U : component fifo_w10_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => preloadPixelsAndPrec_U0_ch_out_V_out_din,
        if_full_n => ch_out_V_c_full_n,
        if_write => preloadPixelsAndPrec_U0_ch_out_V_out_write,
        if_dout => ch_out_V_c_dout,
        if_empty_n => ch_out_V_c_empty_n,
        if_read => processAllCHout_U0_ch_out_V_read);

    ci_offset_V_U : component fifo_w19_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => preloadPixelsAndPrec_U0_ap_return_0,
        if_full_n => ci_offset_V_full_n,
        if_write => ap_channel_done_ci_offset_V,
        if_dout => ci_offset_V_dout,
        if_empty_n => ci_offset_V_empty_n,
        if_read => processAllCHout_U0_ap_ready);

    pixel_buffer_0_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => preloadPixelsAndPrec_U0_ap_return_1,
        if_full_n => pixel_buffer_0_full_n,
        if_write => ap_channel_done_pixel_buffer_0,
        if_dout => pixel_buffer_0_dout,
        if_empty_n => pixel_buffer_0_empty_n,
        if_read => processAllCHout_U0_ap_ready);

    pixel_buffer_1_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => preloadPixelsAndPrec_U0_ap_return_2,
        if_full_n => pixel_buffer_1_full_n,
        if_write => ap_channel_done_pixel_buffer_1,
        if_dout => pixel_buffer_1_dout,
        if_empty_n => pixel_buffer_1_empty_n,
        if_read => processAllCHout_U0_ap_ready);

    pixel_buffer_2_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => preloadPixelsAndPrec_U0_ap_return_3,
        if_full_n => pixel_buffer_2_full_n,
        if_write => ap_channel_done_pixel_buffer_2,
        if_dout => pixel_buffer_2_dout,
        if_empty_n => pixel_buffer_2_empty_n,
        if_read => processAllCHout_U0_ap_ready);

    pixel_buffer_3_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => preloadPixelsAndPrec_U0_ap_return_4,
        if_full_n => pixel_buffer_3_full_n,
        if_write => ap_channel_done_pixel_buffer_3,
        if_dout => pixel_buffer_3_dout,
        if_empty_n => pixel_buffer_3_empty_n,
        if_read => processAllCHout_U0_ap_ready);

    pixel_buffer_4_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => preloadPixelsAndPrec_U0_ap_return_5,
        if_full_n => pixel_buffer_4_full_n,
        if_write => ap_channel_done_pixel_buffer_4,
        if_dout => pixel_buffer_4_dout,
        if_empty_n => pixel_buffer_4_empty_n,
        if_read => processAllCHout_U0_ap_ready);

    pixel_buffer_5_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => preloadPixelsAndPrec_U0_ap_return_6,
        if_full_n => pixel_buffer_5_full_n,
        if_write => ap_channel_done_pixel_buffer_5,
        if_dout => pixel_buffer_5_dout,
        if_empty_n => pixel_buffer_5_empty_n,
        if_read => processAllCHout_U0_ap_ready);

    pixel_buffer_6_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => preloadPixelsAndPrec_U0_ap_return_7,
        if_full_n => pixel_buffer_6_full_n,
        if_write => ap_channel_done_pixel_buffer_6,
        if_dout => pixel_buffer_6_dout,
        if_empty_n => pixel_buffer_6_empty_n,
        if_read => processAllCHout_U0_ap_ready);

    pixel_buffer_7_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => preloadPixelsAndPrec_U0_ap_return_8,
        if_full_n => pixel_buffer_7_full_n,
        if_write => ap_channel_done_pixel_buffer_7,
        if_dout => pixel_buffer_7_dout,
        if_empty_n => pixel_buffer_7_empty_n,
        if_read => processAllCHout_U0_ap_ready);

    pixel_buffer_8_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => preloadPixelsAndPrec_U0_ap_return_9,
        if_full_n => pixel_buffer_8_full_n,
        if_write => ap_channel_done_pixel_buffer_8,
        if_dout => pixel_buffer_8_dout,
        if_empty_n => pixel_buffer_8_empty_n,
        if_read => processAllCHout_U0_ap_ready);





    ap_sync_reg_channel_write_ci_offset_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_ci_offset_V <= ap_const_logic_0;
            else
                if (((preloadPixelsAndPrec_U0_ap_done and preloadPixelsAndPrec_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_ci_offset_V <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_ci_offset_V <= ap_sync_channel_write_ci_offset_V;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_pixel_buffer_0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_pixel_buffer_0 <= ap_const_logic_0;
            else
                if (((preloadPixelsAndPrec_U0_ap_done and preloadPixelsAndPrec_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_pixel_buffer_0 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_pixel_buffer_0 <= ap_sync_channel_write_pixel_buffer_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_pixel_buffer_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_pixel_buffer_1 <= ap_const_logic_0;
            else
                if (((preloadPixelsAndPrec_U0_ap_done and preloadPixelsAndPrec_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_pixel_buffer_1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_pixel_buffer_1 <= ap_sync_channel_write_pixel_buffer_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_pixel_buffer_2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_pixel_buffer_2 <= ap_const_logic_0;
            else
                if (((preloadPixelsAndPrec_U0_ap_done and preloadPixelsAndPrec_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_pixel_buffer_2 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_pixel_buffer_2 <= ap_sync_channel_write_pixel_buffer_2;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_pixel_buffer_3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_pixel_buffer_3 <= ap_const_logic_0;
            else
                if (((preloadPixelsAndPrec_U0_ap_done and preloadPixelsAndPrec_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_pixel_buffer_3 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_pixel_buffer_3 <= ap_sync_channel_write_pixel_buffer_3;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_pixel_buffer_4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_pixel_buffer_4 <= ap_const_logic_0;
            else
                if (((preloadPixelsAndPrec_U0_ap_done and preloadPixelsAndPrec_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_pixel_buffer_4 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_pixel_buffer_4 <= ap_sync_channel_write_pixel_buffer_4;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_pixel_buffer_5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_pixel_buffer_5 <= ap_const_logic_0;
            else
                if (((preloadPixelsAndPrec_U0_ap_done and preloadPixelsAndPrec_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_pixel_buffer_5 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_pixel_buffer_5 <= ap_sync_channel_write_pixel_buffer_5;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_pixel_buffer_6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_pixel_buffer_6 <= ap_const_logic_0;
            else
                if (((preloadPixelsAndPrec_U0_ap_done and preloadPixelsAndPrec_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_pixel_buffer_6 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_pixel_buffer_6 <= ap_sync_channel_write_pixel_buffer_6;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_pixel_buffer_7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_pixel_buffer_7 <= ap_const_logic_0;
            else
                if (((preloadPixelsAndPrec_U0_ap_done and preloadPixelsAndPrec_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_pixel_buffer_7 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_pixel_buffer_7 <= ap_sync_channel_write_pixel_buffer_7;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_pixel_buffer_8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_pixel_buffer_8 <= ap_const_logic_0;
            else
                if (((preloadPixelsAndPrec_U0_ap_done and preloadPixelsAndPrec_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_pixel_buffer_8 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_pixel_buffer_8 <= ap_sync_channel_write_pixel_buffer_8;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_preloadPixelsAndPrec_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_preloadPixelsAndPrec_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_preloadPixelsAndPrec_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_preloadPixelsAndPrec_U0_ap_ready <= ap_sync_preloadPixelsAndPrec_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_processAllCHout_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_processAllCHout_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_processAllCHout_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_processAllCHout_U0_ap_ready <= ap_sync_processAllCHout_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    preloadPixelsAndPrec_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (preloadPixelsAndPrec_U0_ap_ready = ap_const_logic_0))) then 
                preloadPixelsAndPrec_U0_ap_ready_count <= std_logic_vector(unsigned(preloadPixelsAndPrec_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((preloadPixelsAndPrec_U0_ap_ready = ap_const_logic_1) and (ap_sync_ready = ap_const_logic_0))) then 
                preloadPixelsAndPrec_U0_ap_ready_count <= std_logic_vector(unsigned(preloadPixelsAndPrec_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    processAllCHout_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (processAllCHout_U0_ap_ready = ap_const_logic_0))) then 
                processAllCHout_U0_ap_ready_count <= std_logic_vector(unsigned(processAllCHout_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((processAllCHout_U0_ap_ready = ap_const_logic_1) and (ap_sync_ready = ap_const_logic_0))) then 
                processAllCHout_U0_ap_ready_count <= std_logic_vector(unsigned(processAllCHout_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    ImageCache_IBRAM_address0 <= preloadPixelsAndPrec_U0_ImageCache_IBRAM_address0;
    ImageCache_IBRAM_address1 <= ap_const_lv15_0;
    ImageCache_IBRAM_ce0 <= preloadPixelsAndPrec_U0_ImageCache_IBRAM_ce0;
    ImageCache_IBRAM_ce1 <= ap_const_logic_0;
    ImageCache_IBRAM_d0 <= ap_const_lv32_0;
    ImageCache_IBRAM_d1 <= ap_const_lv32_0;
    ImageCache_IBRAM_we0 <= ap_const_logic_0;
    ImageCache_IBRAM_we1 <= ap_const_logic_0;
    OutputCache_OBRAM_address0 <= processAllCHout_U0_OutputCache_OBRAM_address0;
    OutputCache_OBRAM_address1 <= processAllCHout_U0_OutputCache_OBRAM_address1;
    OutputCache_OBRAM_ce0 <= processAllCHout_U0_OutputCache_OBRAM_ce0;
    OutputCache_OBRAM_ce1 <= processAllCHout_U0_OutputCache_OBRAM_ce1;
    OutputCache_OBRAM_d0 <= processAllCHout_U0_OutputCache_OBRAM_d0;
    OutputCache_OBRAM_d1 <= processAllCHout_U0_OutputCache_OBRAM_d1;
    OutputCache_OBRAM_we0 <= processAllCHout_U0_OutputCache_OBRAM_we0;
    OutputCache_OBRAM_we1 <= processAllCHout_U0_OutputCache_OBRAM_we1;
    WBRAM_0_0_0_address0 <= processAllCHout_U0_WBRAM_0_0_0_address0;
    WBRAM_0_0_0_address1 <= ap_const_lv10_0;
    WBRAM_0_0_0_ce0 <= processAllCHout_U0_WBRAM_0_0_0_ce0;
    WBRAM_0_0_0_ce1 <= ap_const_logic_0;
    WBRAM_0_0_0_d0 <= ap_const_lv32_0;
    WBRAM_0_0_0_d1 <= ap_const_lv32_0;
    WBRAM_0_0_0_we0 <= ap_const_logic_0;
    WBRAM_0_0_0_we1 <= ap_const_logic_0;
    WBRAM_0_0_1_address0 <= processAllCHout_U0_WBRAM_0_0_1_address0;
    WBRAM_0_0_1_address1 <= ap_const_lv10_0;
    WBRAM_0_0_1_ce0 <= processAllCHout_U0_WBRAM_0_0_1_ce0;
    WBRAM_0_0_1_ce1 <= ap_const_logic_0;
    WBRAM_0_0_1_d0 <= ap_const_lv32_0;
    WBRAM_0_0_1_d1 <= ap_const_lv32_0;
    WBRAM_0_0_1_we0 <= ap_const_logic_0;
    WBRAM_0_0_1_we1 <= ap_const_logic_0;
    WBRAM_0_0_2_address0 <= processAllCHout_U0_WBRAM_0_0_2_address0;
    WBRAM_0_0_2_address1 <= ap_const_lv10_0;
    WBRAM_0_0_2_ce0 <= processAllCHout_U0_WBRAM_0_0_2_ce0;
    WBRAM_0_0_2_ce1 <= ap_const_logic_0;
    WBRAM_0_0_2_d0 <= ap_const_lv32_0;
    WBRAM_0_0_2_d1 <= ap_const_lv32_0;
    WBRAM_0_0_2_we0 <= ap_const_logic_0;
    WBRAM_0_0_2_we1 <= ap_const_logic_0;
    WBRAM_0_0_3_address0 <= processAllCHout_U0_WBRAM_0_0_3_address0;
    WBRAM_0_0_3_address1 <= ap_const_lv10_0;
    WBRAM_0_0_3_ce0 <= processAllCHout_U0_WBRAM_0_0_3_ce0;
    WBRAM_0_0_3_ce1 <= ap_const_logic_0;
    WBRAM_0_0_3_d0 <= ap_const_lv32_0;
    WBRAM_0_0_3_d1 <= ap_const_lv32_0;
    WBRAM_0_0_3_we0 <= ap_const_logic_0;
    WBRAM_0_0_3_we1 <= ap_const_logic_0;
    WBRAM_0_0_4_address0 <= processAllCHout_U0_WBRAM_0_0_4_address0;
    WBRAM_0_0_4_address1 <= ap_const_lv10_0;
    WBRAM_0_0_4_ce0 <= processAllCHout_U0_WBRAM_0_0_4_ce0;
    WBRAM_0_0_4_ce1 <= ap_const_logic_0;
    WBRAM_0_0_4_d0 <= ap_const_lv32_0;
    WBRAM_0_0_4_d1 <= ap_const_lv32_0;
    WBRAM_0_0_4_we0 <= ap_const_logic_0;
    WBRAM_0_0_4_we1 <= ap_const_logic_0;
    WBRAM_0_0_5_address0 <= processAllCHout_U0_WBRAM_0_0_5_address0;
    WBRAM_0_0_5_address1 <= ap_const_lv10_0;
    WBRAM_0_0_5_ce0 <= processAllCHout_U0_WBRAM_0_0_5_ce0;
    WBRAM_0_0_5_ce1 <= ap_const_logic_0;
    WBRAM_0_0_5_d0 <= ap_const_lv32_0;
    WBRAM_0_0_5_d1 <= ap_const_lv32_0;
    WBRAM_0_0_5_we0 <= ap_const_logic_0;
    WBRAM_0_0_5_we1 <= ap_const_logic_0;
    WBRAM_0_0_6_address0 <= processAllCHout_U0_WBRAM_0_0_6_address0;
    WBRAM_0_0_6_address1 <= ap_const_lv10_0;
    WBRAM_0_0_6_ce0 <= processAllCHout_U0_WBRAM_0_0_6_ce0;
    WBRAM_0_0_6_ce1 <= ap_const_logic_0;
    WBRAM_0_0_6_d0 <= ap_const_lv32_0;
    WBRAM_0_0_6_d1 <= ap_const_lv32_0;
    WBRAM_0_0_6_we0 <= ap_const_logic_0;
    WBRAM_0_0_6_we1 <= ap_const_logic_0;
    WBRAM_0_0_7_address0 <= processAllCHout_U0_WBRAM_0_0_7_address0;
    WBRAM_0_0_7_address1 <= ap_const_lv10_0;
    WBRAM_0_0_7_ce0 <= processAllCHout_U0_WBRAM_0_0_7_ce0;
    WBRAM_0_0_7_ce1 <= ap_const_logic_0;
    WBRAM_0_0_7_d0 <= ap_const_lv32_0;
    WBRAM_0_0_7_d1 <= ap_const_lv32_0;
    WBRAM_0_0_7_we0 <= ap_const_logic_0;
    WBRAM_0_0_7_we1 <= ap_const_logic_0;
    WBRAM_0_0_8_address0 <= processAllCHout_U0_WBRAM_0_0_8_address0;
    WBRAM_0_0_8_address1 <= ap_const_lv10_0;
    WBRAM_0_0_8_ce0 <= processAllCHout_U0_WBRAM_0_0_8_ce0;
    WBRAM_0_0_8_ce1 <= ap_const_logic_0;
    WBRAM_0_0_8_d0 <= ap_const_lv32_0;
    WBRAM_0_0_8_d1 <= ap_const_lv32_0;
    WBRAM_0_0_8_we0 <= ap_const_logic_0;
    WBRAM_0_0_8_we1 <= ap_const_logic_0;
    ap_channel_done_ci_offset_V <= (preloadPixelsAndPrec_U0_ap_done and (ap_sync_reg_channel_write_ci_offset_V xor ap_const_logic_1));
    ap_channel_done_pixel_buffer_0 <= (preloadPixelsAndPrec_U0_ap_done and (ap_sync_reg_channel_write_pixel_buffer_0 xor ap_const_logic_1));
    ap_channel_done_pixel_buffer_1 <= (preloadPixelsAndPrec_U0_ap_done and (ap_sync_reg_channel_write_pixel_buffer_1 xor ap_const_logic_1));
    ap_channel_done_pixel_buffer_2 <= (preloadPixelsAndPrec_U0_ap_done and (ap_sync_reg_channel_write_pixel_buffer_2 xor ap_const_logic_1));
    ap_channel_done_pixel_buffer_3 <= (preloadPixelsAndPrec_U0_ap_done and (ap_sync_reg_channel_write_pixel_buffer_3 xor ap_const_logic_1));
    ap_channel_done_pixel_buffer_4 <= (preloadPixelsAndPrec_U0_ap_done and (ap_sync_reg_channel_write_pixel_buffer_4 xor ap_const_logic_1));
    ap_channel_done_pixel_buffer_5 <= (preloadPixelsAndPrec_U0_ap_done and (ap_sync_reg_channel_write_pixel_buffer_5 xor ap_const_logic_1));
    ap_channel_done_pixel_buffer_6 <= (preloadPixelsAndPrec_U0_ap_done and (ap_sync_reg_channel_write_pixel_buffer_6 xor ap_const_logic_1));
    ap_channel_done_pixel_buffer_7 <= (preloadPixelsAndPrec_U0_ap_done and (ap_sync_reg_channel_write_pixel_buffer_7 xor ap_const_logic_1));
    ap_channel_done_pixel_buffer_8 <= (preloadPixelsAndPrec_U0_ap_done and (ap_sync_reg_channel_write_pixel_buffer_8 xor ap_const_logic_1));
    ap_done <= processAllCHout_U0_ap_done;
    ap_idle <= (processAllCHout_U0_ap_idle and preloadPixelsAndPrec_U0_ap_idle and (pixel_buffer_8_empty_n xor ap_const_logic_1) and (pixel_buffer_7_empty_n xor ap_const_logic_1) and (pixel_buffer_6_empty_n xor ap_const_logic_1) and (pixel_buffer_5_empty_n xor ap_const_logic_1) and (pixel_buffer_4_empty_n xor ap_const_logic_1) and (pixel_buffer_3_empty_n xor ap_const_logic_1) and (pixel_buffer_2_empty_n xor ap_const_logic_1) and (pixel_buffer_1_empty_n xor ap_const_logic_1) and (pixel_buffer_0_empty_n xor ap_const_logic_1) and (ci_offset_V_empty_n xor ap_const_logic_1));
    ap_ready <= ap_sync_ready;
    ap_sync_channel_write_ci_offset_V <= ((ci_offset_V_full_n and ap_channel_done_ci_offset_V) or ap_sync_reg_channel_write_ci_offset_V);
    ap_sync_channel_write_pixel_buffer_0 <= ((pixel_buffer_0_full_n and ap_channel_done_pixel_buffer_0) or ap_sync_reg_channel_write_pixel_buffer_0);
    ap_sync_channel_write_pixel_buffer_1 <= ((pixel_buffer_1_full_n and ap_channel_done_pixel_buffer_1) or ap_sync_reg_channel_write_pixel_buffer_1);
    ap_sync_channel_write_pixel_buffer_2 <= ((pixel_buffer_2_full_n and ap_channel_done_pixel_buffer_2) or ap_sync_reg_channel_write_pixel_buffer_2);
    ap_sync_channel_write_pixel_buffer_3 <= ((pixel_buffer_3_full_n and ap_channel_done_pixel_buffer_3) or ap_sync_reg_channel_write_pixel_buffer_3);
    ap_sync_channel_write_pixel_buffer_4 <= ((pixel_buffer_4_full_n and ap_channel_done_pixel_buffer_4) or ap_sync_reg_channel_write_pixel_buffer_4);
    ap_sync_channel_write_pixel_buffer_5 <= ((pixel_buffer_5_full_n and ap_channel_done_pixel_buffer_5) or ap_sync_reg_channel_write_pixel_buffer_5);
    ap_sync_channel_write_pixel_buffer_6 <= ((pixel_buffer_6_full_n and ap_channel_done_pixel_buffer_6) or ap_sync_reg_channel_write_pixel_buffer_6);
    ap_sync_channel_write_pixel_buffer_7 <= ((pixel_buffer_7_full_n and ap_channel_done_pixel_buffer_7) or ap_sync_reg_channel_write_pixel_buffer_7);
    ap_sync_channel_write_pixel_buffer_8 <= ((pixel_buffer_8_full_n and ap_channel_done_pixel_buffer_8) or ap_sync_reg_channel_write_pixel_buffer_8);
    ap_sync_continue <= ap_continue;
    ap_sync_done <= processAllCHout_U0_ap_done;
    ap_sync_preloadPixelsAndPrec_U0_ap_ready <= (preloadPixelsAndPrec_U0_ap_ready or ap_sync_reg_preloadPixelsAndPrec_U0_ap_ready);
    ap_sync_processAllCHout_U0_ap_ready <= (processAllCHout_U0_ap_ready or ap_sync_reg_processAllCHout_U0_ap_ready);
    ap_sync_ready <= (ap_sync_processAllCHout_U0_ap_ready and ap_sync_preloadPixelsAndPrec_U0_ap_ready);
    preloadPixelsAndPrec_U0_ap_continue <= (ap_sync_channel_write_pixel_buffer_8 and ap_sync_channel_write_pixel_buffer_7 and ap_sync_channel_write_pixel_buffer_6 and ap_sync_channel_write_pixel_buffer_5 and ap_sync_channel_write_pixel_buffer_4 and ap_sync_channel_write_pixel_buffer_3 and ap_sync_channel_write_pixel_buffer_2 and ap_sync_channel_write_pixel_buffer_1 and ap_sync_channel_write_pixel_buffer_0 and ap_sync_channel_write_ci_offset_V);
    preloadPixelsAndPrec_U0_ap_start <= ((ap_sync_reg_preloadPixelsAndPrec_U0_ap_ready xor ap_const_logic_1) and ap_start);
    preloadPixelsAndPrec_U0_start_full_n <= ap_const_logic_1;
    preloadPixelsAndPrec_U0_start_write <= ap_const_logic_0;
    processAllCHout_U0_ap_continue <= ap_continue;
    processAllCHout_U0_ap_start <= (pixel_buffer_8_empty_n and pixel_buffer_7_empty_n and pixel_buffer_6_empty_n and pixel_buffer_5_empty_n and pixel_buffer_4_empty_n and pixel_buffer_3_empty_n and pixel_buffer_2_empty_n and pixel_buffer_1_empty_n and pixel_buffer_0_empty_n and (ap_sync_reg_processAllCHout_U0_ap_ready xor ap_const_logic_1) and ci_offset_V_empty_n and ap_start);
    processAllCHout_U0_start_full_n <= ap_const_logic_1;
    processAllCHout_U0_start_write <= ap_const_logic_0;
end behav;
