// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fpga_top,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=103026748,HLS_SYN_TPT=none,HLS_SYN_MEM=89,HLS_SYN_DSP=114,HLS_SYN_FF=19850,HLS_SYN_LUT=27280,HLS_VERSION=2019_1}" *)

module fpga_top (
        ap_clk,
        ap_rst_n,
        m_axi_memorybus_AWVALID,
        m_axi_memorybus_AWREADY,
        m_axi_memorybus_AWADDR,
        m_axi_memorybus_AWID,
        m_axi_memorybus_AWLEN,
        m_axi_memorybus_AWSIZE,
        m_axi_memorybus_AWBURST,
        m_axi_memorybus_AWLOCK,
        m_axi_memorybus_AWCACHE,
        m_axi_memorybus_AWPROT,
        m_axi_memorybus_AWQOS,
        m_axi_memorybus_AWREGION,
        m_axi_memorybus_AWUSER,
        m_axi_memorybus_WVALID,
        m_axi_memorybus_WREADY,
        m_axi_memorybus_WDATA,
        m_axi_memorybus_WSTRB,
        m_axi_memorybus_WLAST,
        m_axi_memorybus_WID,
        m_axi_memorybus_WUSER,
        m_axi_memorybus_ARVALID,
        m_axi_memorybus_ARREADY,
        m_axi_memorybus_ARADDR,
        m_axi_memorybus_ARID,
        m_axi_memorybus_ARLEN,
        m_axi_memorybus_ARSIZE,
        m_axi_memorybus_ARBURST,
        m_axi_memorybus_ARLOCK,
        m_axi_memorybus_ARCACHE,
        m_axi_memorybus_ARPROT,
        m_axi_memorybus_ARQOS,
        m_axi_memorybus_ARREGION,
        m_axi_memorybus_ARUSER,
        m_axi_memorybus_RVALID,
        m_axi_memorybus_RREADY,
        m_axi_memorybus_RDATA,
        m_axi_memorybus_RLAST,
        m_axi_memorybus_RID,
        m_axi_memorybus_RUSER,
        m_axi_memorybus_RRESP,
        m_axi_memorybus_BVALID,
        m_axi_memorybus_BREADY,
        m_axi_memorybus_BRESP,
        m_axi_memorybus_BID,
        m_axi_memorybus_BUSER,
        s_axi_axilite_AWVALID,
        s_axi_axilite_AWREADY,
        s_axi_axilite_AWADDR,
        s_axi_axilite_WVALID,
        s_axi_axilite_WREADY,
        s_axi_axilite_WDATA,
        s_axi_axilite_WSTRB,
        s_axi_axilite_ARVALID,
        s_axi_axilite_ARREADY,
        s_axi_axilite_ARADDR,
        s_axi_axilite_RVALID,
        s_axi_axilite_RREADY,
        s_axi_axilite_RDATA,
        s_axi_axilite_RRESP,
        s_axi_axilite_BVALID,
        s_axi_axilite_BREADY,
        s_axi_axilite_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 124'd1;
parameter    ap_ST_fsm_state2 = 124'd2;
parameter    ap_ST_fsm_state3 = 124'd4;
parameter    ap_ST_fsm_state4 = 124'd8;
parameter    ap_ST_fsm_state5 = 124'd16;
parameter    ap_ST_fsm_state6 = 124'd32;
parameter    ap_ST_fsm_state7 = 124'd64;
parameter    ap_ST_fsm_state8 = 124'd128;
parameter    ap_ST_fsm_pp0_stage0 = 124'd256;
parameter    ap_ST_fsm_pp0_stage1 = 124'd512;
parameter    ap_ST_fsm_state21 = 124'd1024;
parameter    ap_ST_fsm_state22 = 124'd2048;
parameter    ap_ST_fsm_pp1_stage0 = 124'd4096;
parameter    ap_ST_fsm_state34 = 124'd8192;
parameter    ap_ST_fsm_pp2_stage0 = 124'd16384;
parameter    ap_ST_fsm_state46 = 124'd32768;
parameter    ap_ST_fsm_state47 = 124'd65536;
parameter    ap_ST_fsm_state48 = 124'd131072;
parameter    ap_ST_fsm_state49 = 124'd262144;
parameter    ap_ST_fsm_state50 = 124'd524288;
parameter    ap_ST_fsm_state51 = 124'd1048576;
parameter    ap_ST_fsm_state52 = 124'd2097152;
parameter    ap_ST_fsm_state53 = 124'd4194304;
parameter    ap_ST_fsm_state54 = 124'd8388608;
parameter    ap_ST_fsm_state55 = 124'd16777216;
parameter    ap_ST_fsm_state56 = 124'd33554432;
parameter    ap_ST_fsm_state57 = 124'd67108864;
parameter    ap_ST_fsm_state58 = 124'd134217728;
parameter    ap_ST_fsm_state59 = 124'd268435456;
parameter    ap_ST_fsm_state60 = 124'd536870912;
parameter    ap_ST_fsm_state61 = 124'd1073741824;
parameter    ap_ST_fsm_state62 = 124'd2147483648;
parameter    ap_ST_fsm_state63 = 124'd4294967296;
parameter    ap_ST_fsm_state64 = 124'd8589934592;
parameter    ap_ST_fsm_state65 = 124'd17179869184;
parameter    ap_ST_fsm_state66 = 124'd34359738368;
parameter    ap_ST_fsm_state67 = 124'd68719476736;
parameter    ap_ST_fsm_state68 = 124'd137438953472;
parameter    ap_ST_fsm_state69 = 124'd274877906944;
parameter    ap_ST_fsm_state70 = 124'd549755813888;
parameter    ap_ST_fsm_state71 = 124'd1099511627776;
parameter    ap_ST_fsm_state72 = 124'd2199023255552;
parameter    ap_ST_fsm_state73 = 124'd4398046511104;
parameter    ap_ST_fsm_state74 = 124'd8796093022208;
parameter    ap_ST_fsm_state75 = 124'd17592186044416;
parameter    ap_ST_fsm_state76 = 124'd35184372088832;
parameter    ap_ST_fsm_state77 = 124'd70368744177664;
parameter    ap_ST_fsm_state78 = 124'd140737488355328;
parameter    ap_ST_fsm_state79 = 124'd281474976710656;
parameter    ap_ST_fsm_state80 = 124'd562949953421312;
parameter    ap_ST_fsm_state81 = 124'd1125899906842624;
parameter    ap_ST_fsm_state82 = 124'd2251799813685248;
parameter    ap_ST_fsm_state83 = 124'd4503599627370496;
parameter    ap_ST_fsm_state84 = 124'd9007199254740992;
parameter    ap_ST_fsm_state85 = 124'd18014398509481984;
parameter    ap_ST_fsm_state86 = 124'd36028797018963968;
parameter    ap_ST_fsm_state87 = 124'd72057594037927936;
parameter    ap_ST_fsm_state88 = 124'd144115188075855872;
parameter    ap_ST_fsm_state89 = 124'd288230376151711744;
parameter    ap_ST_fsm_state90 = 124'd576460752303423488;
parameter    ap_ST_fsm_state91 = 124'd1152921504606846976;
parameter    ap_ST_fsm_state92 = 124'd2305843009213693952;
parameter    ap_ST_fsm_state93 = 124'd4611686018427387904;
parameter    ap_ST_fsm_state94 = 124'd9223372036854775808;
parameter    ap_ST_fsm_state95 = 124'd18446744073709551616;
parameter    ap_ST_fsm_state96 = 124'd36893488147419103232;
parameter    ap_ST_fsm_state97 = 124'd73786976294838206464;
parameter    ap_ST_fsm_state98 = 124'd147573952589676412928;
parameter    ap_ST_fsm_state99 = 124'd295147905179352825856;
parameter    ap_ST_fsm_state100 = 124'd590295810358705651712;
parameter    ap_ST_fsm_state101 = 124'd1180591620717411303424;
parameter    ap_ST_fsm_state102 = 124'd2361183241434822606848;
parameter    ap_ST_fsm_state103 = 124'd4722366482869645213696;
parameter    ap_ST_fsm_state104 = 124'd9444732965739290427392;
parameter    ap_ST_fsm_state105 = 124'd18889465931478580854784;
parameter    ap_ST_fsm_state106 = 124'd37778931862957161709568;
parameter    ap_ST_fsm_state107 = 124'd75557863725914323419136;
parameter    ap_ST_fsm_state108 = 124'd151115727451828646838272;
parameter    ap_ST_fsm_state109 = 124'd302231454903657293676544;
parameter    ap_ST_fsm_state110 = 124'd604462909807314587353088;
parameter    ap_ST_fsm_state111 = 124'd1208925819614629174706176;
parameter    ap_ST_fsm_state112 = 124'd2417851639229258349412352;
parameter    ap_ST_fsm_state113 = 124'd4835703278458516698824704;
parameter    ap_ST_fsm_state114 = 124'd9671406556917033397649408;
parameter    ap_ST_fsm_state115 = 124'd19342813113834066795298816;
parameter    ap_ST_fsm_state116 = 124'd38685626227668133590597632;
parameter    ap_ST_fsm_state117 = 124'd77371252455336267181195264;
parameter    ap_ST_fsm_state118 = 124'd154742504910672534362390528;
parameter    ap_ST_fsm_state119 = 124'd309485009821345068724781056;
parameter    ap_ST_fsm_state120 = 124'd618970019642690137449562112;
parameter    ap_ST_fsm_state121 = 124'd1237940039285380274899124224;
parameter    ap_ST_fsm_state122 = 124'd2475880078570760549798248448;
parameter    ap_ST_fsm_state123 = 124'd4951760157141521099596496896;
parameter    ap_ST_fsm_state124 = 124'd9903520314283042199192993792;
parameter    ap_ST_fsm_state125 = 124'd19807040628566084398385987584;
parameter    ap_ST_fsm_state126 = 124'd39614081257132168796771975168;
parameter    ap_ST_fsm_state127 = 124'd79228162514264337593543950336;
parameter    ap_ST_fsm_state128 = 124'd158456325028528675187087900672;
parameter    ap_ST_fsm_state129 = 124'd316912650057057350374175801344;
parameter    ap_ST_fsm_state130 = 124'd633825300114114700748351602688;
parameter    ap_ST_fsm_state131 = 124'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state132 = 124'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state133 = 124'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state134 = 124'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state135 = 124'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state136 = 124'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state137 = 124'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state138 = 124'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state139 = 124'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state140 = 124'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state141 = 124'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state142 = 124'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state143 = 124'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state144 = 124'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state145 = 124'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state146 = 124'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state147 = 124'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_pp3_stage0 = 124'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state152 = 124'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state153 = 124'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state154 = 124'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state155 = 124'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state156 = 124'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state157 = 124'd10633823966279326983230456482242756608;
parameter    C_S_AXI_AXILITE_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITE_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_MEMORYBUS_ID_WIDTH = 1;
parameter    C_M_AXI_MEMORYBUS_ADDR_WIDTH = 32;
parameter    C_M_AXI_MEMORYBUS_DATA_WIDTH = 32;
parameter    C_M_AXI_MEMORYBUS_AWUSER_WIDTH = 1;
parameter    C_M_AXI_MEMORYBUS_ARUSER_WIDTH = 1;
parameter    C_M_AXI_MEMORYBUS_WUSER_WIDTH = 1;
parameter    C_M_AXI_MEMORYBUS_RUSER_WIDTH = 1;
parameter    C_M_AXI_MEMORYBUS_BUSER_WIDTH = 1;
parameter    C_M_AXI_MEMORYBUS_USER_VALUE = 0;
parameter    C_M_AXI_MEMORYBUS_PROT_VALUE = 0;
parameter    C_M_AXI_MEMORYBUS_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITE_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_MEMORYBUS_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_memorybus_AWVALID;
input   m_axi_memorybus_AWREADY;
output  [C_M_AXI_MEMORYBUS_ADDR_WIDTH - 1:0] m_axi_memorybus_AWADDR;
output  [C_M_AXI_MEMORYBUS_ID_WIDTH - 1:0] m_axi_memorybus_AWID;
output  [7:0] m_axi_memorybus_AWLEN;
output  [2:0] m_axi_memorybus_AWSIZE;
output  [1:0] m_axi_memorybus_AWBURST;
output  [1:0] m_axi_memorybus_AWLOCK;
output  [3:0] m_axi_memorybus_AWCACHE;
output  [2:0] m_axi_memorybus_AWPROT;
output  [3:0] m_axi_memorybus_AWQOS;
output  [3:0] m_axi_memorybus_AWREGION;
output  [C_M_AXI_MEMORYBUS_AWUSER_WIDTH - 1:0] m_axi_memorybus_AWUSER;
output   m_axi_memorybus_WVALID;
input   m_axi_memorybus_WREADY;
output  [C_M_AXI_MEMORYBUS_DATA_WIDTH - 1:0] m_axi_memorybus_WDATA;
output  [C_M_AXI_MEMORYBUS_WSTRB_WIDTH - 1:0] m_axi_memorybus_WSTRB;
output   m_axi_memorybus_WLAST;
output  [C_M_AXI_MEMORYBUS_ID_WIDTH - 1:0] m_axi_memorybus_WID;
output  [C_M_AXI_MEMORYBUS_WUSER_WIDTH - 1:0] m_axi_memorybus_WUSER;
output   m_axi_memorybus_ARVALID;
input   m_axi_memorybus_ARREADY;
output  [C_M_AXI_MEMORYBUS_ADDR_WIDTH - 1:0] m_axi_memorybus_ARADDR;
output  [C_M_AXI_MEMORYBUS_ID_WIDTH - 1:0] m_axi_memorybus_ARID;
output  [7:0] m_axi_memorybus_ARLEN;
output  [2:0] m_axi_memorybus_ARSIZE;
output  [1:0] m_axi_memorybus_ARBURST;
output  [1:0] m_axi_memorybus_ARLOCK;
output  [3:0] m_axi_memorybus_ARCACHE;
output  [2:0] m_axi_memorybus_ARPROT;
output  [3:0] m_axi_memorybus_ARQOS;
output  [3:0] m_axi_memorybus_ARREGION;
output  [C_M_AXI_MEMORYBUS_ARUSER_WIDTH - 1:0] m_axi_memorybus_ARUSER;
input   m_axi_memorybus_RVALID;
output   m_axi_memorybus_RREADY;
input  [C_M_AXI_MEMORYBUS_DATA_WIDTH - 1:0] m_axi_memorybus_RDATA;
input   m_axi_memorybus_RLAST;
input  [C_M_AXI_MEMORYBUS_ID_WIDTH - 1:0] m_axi_memorybus_RID;
input  [C_M_AXI_MEMORYBUS_RUSER_WIDTH - 1:0] m_axi_memorybus_RUSER;
input  [1:0] m_axi_memorybus_RRESP;
input   m_axi_memorybus_BVALID;
output   m_axi_memorybus_BREADY;
input  [1:0] m_axi_memorybus_BRESP;
input  [C_M_AXI_MEMORYBUS_ID_WIDTH - 1:0] m_axi_memorybus_BID;
input  [C_M_AXI_MEMORYBUS_BUSER_WIDTH - 1:0] m_axi_memorybus_BUSER;
input   s_axi_axilite_AWVALID;
output   s_axi_axilite_AWREADY;
input  [C_S_AXI_AXILITE_ADDR_WIDTH - 1:0] s_axi_axilite_AWADDR;
input   s_axi_axilite_WVALID;
output   s_axi_axilite_WREADY;
input  [C_S_AXI_AXILITE_DATA_WIDTH - 1:0] s_axi_axilite_WDATA;
input  [C_S_AXI_AXILITE_WSTRB_WIDTH - 1:0] s_axi_axilite_WSTRB;
input   s_axi_axilite_ARVALID;
output   s_axi_axilite_ARREADY;
input  [C_S_AXI_AXILITE_ADDR_WIDTH - 1:0] s_axi_axilite_ARADDR;
output   s_axi_axilite_RVALID;
input   s_axi_axilite_RREADY;
output  [C_S_AXI_AXILITE_DATA_WIDTH - 1:0] s_axi_axilite_RDATA;
output  [1:0] s_axi_axilite_RRESP;
output   s_axi_axilite_BVALID;
input   s_axi_axilite_BREADY;
output  [1:0] s_axi_axilite_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [123:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [8:0] layer_width_V;
reg   [8:0] layer_width_V_0_data_reg;
reg    layer_width_V_0_vld_reg;
reg    layer_width_V_0_ack_out;
wire   [8:0] layer_height_V;
reg   [8:0] layer_height_V_0_data_reg;
reg    layer_height_V_0_vld_reg;
reg    layer_height_V_0_ack_out;
wire   [9:0] layer_channels_in_V;
reg   [9:0] layer_channels_in_V_0_data_reg;
reg    layer_channels_in_V_0_vld_reg;
reg    layer_channels_in_V_0_ack_out;
wire   [9:0] layer_channels_out_V;
reg   [9:0] layer_channels_out_V_0_data_reg;
reg    layer_channels_out_V_0_vld_reg;
reg    layer_channels_out_V_0_ack_out;
wire   [1:0] layer_kernel_V;
reg   [1:0] layer_kernel_V_0_data_reg;
reg    layer_kernel_V_0_vld_reg;
reg    layer_kernel_V_0_ack_out;
wire   [1:0] layer_stride_V;
reg   [1:0] layer_stride_V_0_data_reg;
reg    layer_stride_V_0_vld_reg;
reg    layer_stride_V_0_ack_out;
wire    layer_pad;
wire    layer_relu;
reg    layer_relu_0_data_reg;
reg    layer_relu_0_vld_reg;
reg    layer_relu_0_ack_out;
wire    layer_is_first_split_layer;
reg    layer_is_first_split_layer_0_data_reg;
reg    layer_is_first_split_layer_0_vld_reg;
reg    layer_is_first_split_layer_0_ack_out;
wire    layer_is_second_split_layer;
reg    layer_is_second_split_layer_0_data_reg;
reg    layer_is_second_split_layer_0_vld_reg;
reg    layer_is_second_split_layer_0_ack_out;
wire    layer_global_pool;
reg    layer_global_pool_0_data_reg;
reg    layer_global_pool_0_vld_reg;
reg    layer_global_pool_0_ack_out;
wire   [22:0] layer_mem_addr_input_V;
reg   [22:0] layer_mem_addr_input_V_0_data_reg;
reg    layer_mem_addr_input_V_0_vld_reg;
reg    layer_mem_addr_input_V_0_ack_out;
wire   [22:0] layer_mem_addr_output_V;
reg   [22:0] layer_mem_addr_output_V_0_data_reg;
reg    layer_mem_addr_output_V_0_vld_reg;
reg    layer_mem_addr_output_V_0_ack_out;
wire   [22:0] layer_mem_addr_weights_V;
reg   [22:0] layer_mem_addr_weights_V_0_data_reg;
reg    layer_mem_addr_weights_V_0_vld_reg;
reg    layer_mem_addr_weights_V_0_ack_out;
wire   [31:0] SHARED_DRAM;
reg   [31:0] SHARED_DRAM_0_data_reg;
reg    SHARED_DRAM_0_vld_reg;
reg    SHARED_DRAM_0_ack_out;
wire   [31:0] weights_offset;
reg   [31:0] weights_offset_0_data_reg;
reg    weights_offset_0_vld_reg;
reg    weights_offset_0_ack_out;
wire   [18:0] num_weights_V;
wire   [31:0] input_offset;
reg   [31:0] input_offset_0_data_reg;
reg    input_offset_0_vld_reg;
reg    input_offset_0_ack_out;
reg   [8:0] ImageCache_width_in;
reg   [8:0] ImageCache_height_i;
reg   [9:0] ImageCache_ch_in_V;
reg   [15:0] ImageCache_line_wid;
reg   [15:0] ImageCache_curr_img;
reg   [1:0] WeightsCache_kernel;
reg   [9:0] WeightsCache_ch_out;
reg   [22:0] MemoryController_la;
reg   [22:0] MemoryController_la_2;
reg   [9:0] MemoryController_ch;
reg   [8:0] MemoryController_wi;
reg   [0:0] MemoryController_is_1;
reg   [0:0] MemoryController_is;
reg   [0:0] ProcessingElement_r;
reg   [22:0] MemoryController_la_3;
reg    ImageCache_IBRAM_ce0;
wire   [31:0] ImageCache_IBRAM_q0;
reg   [14:0] ImageCache_IBRAM_address1;
reg    ImageCache_IBRAM_ce1;
reg    ImageCache_IBRAM_we1;
reg   [31:0] ImageCache_IBRAM_d1;
reg   [9:0] WBRAM_0_0_0_address0;
reg    WBRAM_0_0_0_ce0;
wire   [31:0] WBRAM_0_0_0_q0;
wire   [9:0] WBRAM_0_0_0_address1;
reg    WBRAM_0_0_0_ce1;
reg    WBRAM_0_0_0_we1;
reg   [9:0] WBRAM_0_0_1_address0;
reg    WBRAM_0_0_1_ce0;
wire   [31:0] WBRAM_0_0_1_q0;
wire   [9:0] WBRAM_0_0_1_address1;
reg    WBRAM_0_0_1_ce1;
reg    WBRAM_0_0_1_we1;
reg   [9:0] WBRAM_0_0_2_address0;
reg    WBRAM_0_0_2_ce0;
wire   [31:0] WBRAM_0_0_2_q0;
wire   [9:0] WBRAM_0_0_2_address1;
reg    WBRAM_0_0_2_ce1;
reg    WBRAM_0_0_2_we1;
reg   [9:0] WBRAM_0_0_3_address0;
reg    WBRAM_0_0_3_ce0;
wire   [31:0] WBRAM_0_0_3_q0;
wire   [9:0] WBRAM_0_0_3_address1;
reg    WBRAM_0_0_3_ce1;
reg    WBRAM_0_0_3_we1;
reg   [9:0] WBRAM_0_0_4_address0;
reg    WBRAM_0_0_4_ce0;
wire   [31:0] WBRAM_0_0_4_q0;
wire   [9:0] WBRAM_0_0_4_address1;
reg    WBRAM_0_0_4_ce1;
reg    WBRAM_0_0_4_we1;
reg   [9:0] WBRAM_0_0_5_address0;
reg    WBRAM_0_0_5_ce0;
wire   [31:0] WBRAM_0_0_5_q0;
wire   [9:0] WBRAM_0_0_5_address1;
reg    WBRAM_0_0_5_ce1;
reg    WBRAM_0_0_5_we1;
reg   [9:0] WBRAM_0_0_6_address0;
reg    WBRAM_0_0_6_ce0;
wire   [31:0] WBRAM_0_0_6_q0;
wire   [9:0] WBRAM_0_0_6_address1;
reg    WBRAM_0_0_6_ce1;
reg    WBRAM_0_0_6_we1;
reg   [9:0] WBRAM_0_0_7_address0;
reg    WBRAM_0_0_7_ce0;
wire   [31:0] WBRAM_0_0_7_q0;
wire   [9:0] WBRAM_0_0_7_address1;
reg    WBRAM_0_0_7_ce1;
reg    WBRAM_0_0_7_we1;
reg    WBRAM_0_0_8_ce0;
wire   [31:0] WBRAM_0_0_8_q0;
wire   [9:0] WBRAM_0_0_8_address1;
reg    WBRAM_0_0_8_ce1;
reg    WBRAM_0_0_8_we1;
reg   [8:0] OutputCache_OBRAM_address0;
reg    OutputCache_OBRAM_ce0;
reg    OutputCache_OBRAM_we0;
wire   [31:0] OutputCache_OBRAM_q0;
reg    OutputCache_OBRAM_ce1;
reg    OutputCache_OBRAM_we1;
reg   [22:0] MemoryController_pi;
reg   [8:0] GPoolCache_GBRAM_address0;
reg    GPoolCache_GBRAM_ce0;
reg    GPoolCache_GBRAM_we0;
reg   [31:0] GPoolCache_GBRAM_d0;
wire   [31:0] GPoolCache_GBRAM_q0;
reg    memorybus_blk_n_AR;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln99_reg_2696;
reg    memorybus_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter4;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln99_reg_2696_pp0_iter3_reg;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln68_1_reg_2816;
reg    ap_enable_reg_pp1_iter8;
reg   [0:0] icmp_ln68_1_reg_2816_pp1_iter7_reg;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln68_reg_2836;
reg    ap_enable_reg_pp2_iter8;
reg   [0:0] icmp_ln68_reg_2836_pp2_iter7_reg;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state56;
reg    memorybus_blk_n_AW;
wire    ap_CS_fsm_state132;
reg    memorybus_blk_n_W;
wire    ap_CS_fsm_state133;
reg    memorybus_blk_n_B;
wire    ap_CS_fsm_state138;
wire    ap_CS_fsm_state147;
reg    ap_enable_reg_pp3_iter3;
wire    ap_block_pp3_stage0;
reg   [0:0] icmp_ln188_reg_3201;
reg   [0:0] icmp_ln188_reg_3201_pp3_iter2_reg;
wire    ap_CS_fsm_state156;
reg   [0:0] layer_global_pool_re_reg_2479;
reg   [0:0] icmp_ln191_reg_3215;
reg    memorybus_AWVALID;
wire    memorybus_AWREADY;
reg   [31:0] memorybus_AWADDR;
reg   [31:0] memorybus_AWLEN;
reg    memorybus_WVALID;
wire    memorybus_WREADY;
reg   [31:0] memorybus_WDATA;
reg    memorybus_ARVALID;
wire    memorybus_ARREADY;
reg   [31:0] memorybus_ARADDR;
wire    memorybus_RVALID;
reg    memorybus_RREADY;
wire   [31:0] memorybus_RDATA;
wire    memorybus_RLAST;
wire   [0:0] memorybus_RID;
wire   [0:0] memorybus_RUSER;
wire   [1:0] memorybus_RRESP;
wire    memorybus_BVALID;
reg    memorybus_BREADY;
wire   [1:0] memorybus_BRESP;
wire   [0:0] memorybus_BID;
wire   [0:0] memorybus_BUSER;
reg   [18:0] t_V_reg_848;
reg   [3:0] t_V_6_reg_859;
reg   [3:0] t_V_6_reg_859_pp0_iter1_reg;
wire    ap_block_state9_pp0_stage0_iter0;
wire    ap_block_state11_pp0_stage0_iter1;
wire    ap_block_state13_pp0_stage0_iter2;
wire    ap_block_state15_pp0_stage0_iter3;
reg    ap_block_state17_pp0_stage0_iter4;
wire    ap_block_state19_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_11001;
reg   [3:0] t_V_6_reg_859_pp0_iter2_reg;
reg   [3:0] t_V_6_reg_859_pp0_iter3_reg;
reg   [3:0] t_V_6_reg_859_pp0_iter4_reg;
reg   [9:0] empty_24_reg_871;
reg   [9:0] t_V_3_reg_893;
reg   [9:0] t_V_5_reg_904;
reg   [9:0] i_op_assign_1_reg_992;
reg   [9:0] reg_1141;
wire    ap_CS_fsm_state47;
wire   [0:0] icmp_ln96_fu_1787_p2;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_state148_pp3_stage0_iter0;
wire    ap_block_state149_pp3_stage0_iter1;
wire    ap_block_state150_pp3_stage0_iter2;
wire    ap_block_state151_pp3_stage0_iter3;
reg    ap_block_state151_io;
reg    ap_block_pp3_stage0_11001;
reg   [31:0] reg_1145;
wire    ap_CS_fsm_state140;
reg    ap_enable_reg_pp3_iter2;
reg   [0:0] icmp_ln188_reg_3201_pp3_iter1_reg;
reg   [31:0] input_offset_read_reg_2463;
wire    ap_CS_fsm_state2;
reg   [31:0] weights_offset_read_reg_2468;
reg   [22:0] layer_mem_addr_input_reg_2473;
reg   [0:0] layer_is_second_spli_reg_2483;
reg   [1:0] layer_kernel_V_read_reg_2488;
reg   [9:0] layer_channels_out_V_1_reg_2494;
reg   [9:0] layer_channels_in_V_s_reg_2504;
reg   [8:0] layer_height_V_read_reg_2516;
reg   [8:0] layer_width_V_read_reg_2522;
reg   [29:0] tmp_13_reg_2530;
wire   [15:0] mul_ln209_fu_2450_p2;
reg   [15:0] mul_ln209_reg_2535;
wire   [0:0] icmp_ln879_4_fu_1228_p2;
reg   [0:0] icmp_ln879_4_reg_2541;
wire    ap_CS_fsm_state3;
wire   [32:0] p_cast_fu_1292_p1;
reg   [32:0] p_cast_reg_2559;
wire    ap_CS_fsm_state5;
wire   [20:0] grp_fu_1286_p2;
reg   [20:0] mul_ln209_1_reg_2569;
wire   [13:0] mul_ln209_2_fu_2457_p2;
reg   [13:0] mul_ln209_2_reg_2574;
wire   [10:0] ret_V_fu_1304_p2;
reg   [10:0] ret_V_reg_2579;
wire   [18:0] zext_ln209_5_fu_1310_p1;
reg   [18:0] zext_ln209_5_reg_2584;
wire   [0:0] icmp_ln879_fu_1313_p2;
reg   [0:0] icmp_ln879_reg_2589;
wire   [13:0] lhs_V_fu_1318_p1;
reg   [13:0] lhs_V_reg_2594;
wire   [13:0] add_ln1352_fu_1332_p2;
reg   [13:0] add_ln1352_reg_2599;
wire   [32:0] lhs_V_1_fu_1338_p1;
reg   [32:0] lhs_V_1_reg_2604;
wire   [0:0] icmp_ln879_2_fu_1341_p2;
reg   [0:0] icmp_ln879_2_reg_2609;
wire   [9:0] ci_V_fu_1355_p2;
reg   [9:0] ci_V_reg_2618;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln887_fu_1350_p2;
wire   [0:0] bias_or_1x1_fu_1375_p2;
reg   [0:0] bias_or_1x1_reg_2628;
wire   [13:0] ret_V_1_fu_1380_p3;
reg   [13:0] ret_V_1_reg_2633;
wire   [20:0] zext_ln887_1_fu_1391_p1;
reg   [20:0] zext_ln887_1_reg_2646;
wire   [32:0] lhs_V_2_fu_1394_p1;
reg   [32:0] lhs_V_2_reg_2652;
wire   [15:0] MAX_ADDR_V_fu_1402_p2;
reg   [15:0] MAX_ADDR_V_reg_2661;
wire   [3:0] weights_per_filter_V_fu_1412_p3;
reg   [3:0] weights_per_filter_V_reg_2666;
wire    ap_CS_fsm_state8;
wire   [18:0] dram_addr_V_fu_1422_p2;
reg   [18:0] dram_addr_V_reg_2671;
wire   [13:0] trunc_ln215_fu_1428_p1;
reg   [13:0] trunc_ln215_reg_2676;
wire   [9:0] trunc_ln321_fu_1432_p1;
reg   [9:0] trunc_ln321_reg_2681;
wire   [2:0] trunc_ln214_fu_1436_p1;
reg   [2:0] trunc_ln214_reg_2686;
wire   [13:0] add_ln99_fu_1444_p2;
reg   [13:0] add_ln99_reg_2691;
wire   [0:0] icmp_ln99_fu_1453_p2;
reg   [0:0] icmp_ln99_reg_2696_pp0_iter1_reg;
reg   [0:0] icmp_ln99_reg_2696_pp0_iter2_reg;
reg   [0:0] icmp_ln99_reg_2696_pp0_iter4_reg;
reg   [31:0] memorybus_addr_reg_2700;
wire   [9:0] rowID_V_fu_1533_p3;
reg   [9:0] rowID_V_reg_2706;
reg   [9:0] rowID_V_reg_2706_pp0_iter1_reg;
reg   [9:0] rowID_V_reg_2706_pp0_iter2_reg;
reg   [9:0] rowID_V_reg_2706_pp0_iter3_reg;
reg   [9:0] rowID_V_reg_2706_pp0_iter4_reg;
wire   [2:0] weightID_V_fu_1540_p3;
reg   [2:0] weightID_V_reg_2711;
reg   [2:0] weightID_V_reg_2711_pp0_iter1_reg;
reg   [2:0] weightID_V_reg_2711_pp0_iter2_reg;
reg   [2:0] weightID_V_reg_2711_pp0_iter3_reg;
reg   [2:0] weightID_V_reg_2711_pp0_iter4_reg;
wire   [3:0] select_ln126_fu_1564_p3;
reg   [3:0] select_ln126_reg_2715;
wire   [9:0] select_ln126_1_fu_1572_p3;
reg   [9:0] select_ln126_1_reg_2720;
wire   [18:0] add_ln700_fu_1580_p2;
reg   [18:0] add_ln700_reg_2725;
wire    ap_block_state10_pp0_stage1_iter0;
reg    ap_block_state10_io;
wire    ap_block_state12_pp0_stage1_iter1;
wire    ap_block_state14_pp0_stage1_iter2;
wire    ap_block_state16_pp0_stage1_iter3;
wire    ap_block_state18_pp0_stage1_iter4;
wire    ap_block_state20_pp0_stage1_iter5;
reg    ap_block_pp0_stage1_11001;
reg   [31:0] memorybus_addr_read_reg_2730;
wire   [31:0] grp_reg_float_s_fu_1586_ap_return;
reg   [20:0] loads_left_0_load_reg_2793;
wire    ap_CS_fsm_state22;
wire   [0:0] icmp_ln90_fu_1616_p2;
wire   [8:0] x_V_fu_1621_p2;
reg   [8:0] x_V_reg_2803;
wire   [0:0] grp_fu_1081_p2;
reg   [0:0] icmp_ln887_2_reg_2808;
reg   [0:0] icmp_ln887_1_reg_2812;
wire   [0:0] icmp_ln68_1_fu_1641_p2;
wire    ap_block_state23_pp1_stage0_iter0;
wire    ap_block_state24_pp1_stage0_iter1;
reg    ap_block_state24_io;
wire    ap_block_state25_pp1_stage0_iter2;
wire    ap_block_state26_pp1_stage0_iter3;
wire    ap_block_state27_pp1_stage0_iter4;
wire    ap_block_state28_pp1_stage0_iter5;
wire    ap_block_state29_pp1_stage0_iter6;
wire    ap_block_state30_pp1_stage0_iter7;
reg    ap_block_state31_pp1_stage0_iter8;
wire    ap_block_state32_pp1_stage0_iter9;
wire    ap_block_state33_pp1_stage0_iter10;
reg    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln68_1_reg_2816_pp1_iter1_reg;
reg   [0:0] icmp_ln68_1_reg_2816_pp1_iter2_reg;
reg   [0:0] icmp_ln68_1_reg_2816_pp1_iter3_reg;
reg   [0:0] icmp_ln68_1_reg_2816_pp1_iter4_reg;
reg   [0:0] icmp_ln68_1_reg_2816_pp1_iter5_reg;
reg   [0:0] icmp_ln68_1_reg_2816_pp1_iter6_reg;
reg   [0:0] icmp_ln68_1_reg_2816_pp1_iter8_reg;
reg   [0:0] icmp_ln68_1_reg_2816_pp1_iter9_reg;
wire   [9:0] ci_V_2_fu_1646_p2;
reg    ap_enable_reg_pp1_iter0;
reg   [31:0] memorybus_addr_2_reg_2825;
reg   [31:0] memorybus_addr_2_rea_reg_2831;
wire   [0:0] icmp_ln68_fu_1692_p2;
wire    ap_block_state35_pp2_stage0_iter0;
wire    ap_block_state36_pp2_stage0_iter1;
reg    ap_block_state36_io;
wire    ap_block_state37_pp2_stage0_iter2;
wire    ap_block_state38_pp2_stage0_iter3;
wire    ap_block_state39_pp2_stage0_iter4;
wire    ap_block_state40_pp2_stage0_iter5;
wire    ap_block_state41_pp2_stage0_iter6;
wire    ap_block_state42_pp2_stage0_iter7;
reg    ap_block_state43_pp2_stage0_iter8;
wire    ap_block_state44_pp2_stage0_iter9;
wire    ap_block_state45_pp2_stage0_iter10;
reg    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln68_reg_2836_pp2_iter1_reg;
reg   [0:0] icmp_ln68_reg_2836_pp2_iter2_reg;
reg   [0:0] icmp_ln68_reg_2836_pp2_iter3_reg;
reg   [0:0] icmp_ln68_reg_2836_pp2_iter4_reg;
reg   [0:0] icmp_ln68_reg_2836_pp2_iter5_reg;
reg   [0:0] icmp_ln68_reg_2836_pp2_iter6_reg;
reg   [0:0] icmp_ln68_reg_2836_pp2_iter8_reg;
reg   [0:0] icmp_ln68_reg_2836_pp2_iter9_reg;
wire   [9:0] ci_V_1_fu_1697_p2;
reg    ap_enable_reg_pp2_iter0;
reg   [31:0] memorybus_addr_1_reg_2845;
reg   [31:0] memorybus_addr_1_rea_reg_2851;
wire   [18:0] zext_ln209_7_fu_1738_p1;
reg   [18:0] zext_ln209_7_reg_2877;
wire    ap_CS_fsm_state46;
wire   [17:0] mul_ln92_fu_1747_p2;
reg   [17:0] mul_ln92_reg_2882;
wire   [17:0] add_ln96_fu_1792_p2;
reg   [17:0] add_ln96_reg_2890;
wire   [8:0] select_ln887_fu_1803_p3;
reg   [8:0] select_ln887_reg_2895;
wire   [8:0] select_ln887_1_fu_1817_p3;
reg   [8:0] select_ln887_1_reg_2903;
wire   [0:0] trunc_ln887_fu_1825_p1;
reg   [0:0] trunc_ln887_reg_2909;
wire   [8:0] select_ln887_2_fu_1850_p3;
reg   [8:0] select_ln887_2_reg_2914;
wire   [17:0] zext_ln887_3_fu_1858_p1;
reg   [17:0] zext_ln887_3_reg_2919;
wire   [0:0] trunc_ln887_1_fu_1862_p1;
reg   [0:0] trunc_ln887_1_reg_2924;
reg   [9:0] ImageCache_ch_in_V_s_reg_2929;
wire   [20:0] zext_ln887_2_fu_1870_p1;
reg   [20:0] zext_ln887_2_reg_2934;
wire   [0:0] icmp_ln887_3_fu_1874_p2;
reg   [0:0] icmp_ln887_3_reg_2939;
wire   [15:0] MAX_ADDR_V_1_fu_1890_p2;
reg   [15:0] MAX_ADDR_V_1_reg_2943;
reg   [31:0] memorybus_addr_3_reg_2948;
wire   [9:0] ci_V_3_fu_1936_p2;
reg   [9:0] ci_V_3_reg_2957;
wire    ap_CS_fsm_state48;
reg   [31:0] memorybus_addr_4_reg_2962;
wire   [0:0] icmp_ln68_2_fu_1931_p2;
wire   [0:0] ret_V_11_fu_1980_p2;
reg   [0:0] ret_V_11_reg_2968;
reg   [31:0] memorybus_addr_4_rea_reg_2972;
wire   [9:0] ci_V_4_fu_2020_p2;
reg   [9:0] ci_V_4_reg_2980;
wire    ap_CS_fsm_state59;
wire   [0:0] icmp_ln130_fu_2015_p2;
wire   [17:0] xy_offset_V_fu_2062_p2;
reg   [17:0] xy_offset_V_reg_2990;
wire    ap_CS_fsm_state62;
wire   [0:0] icmp_ln178_fu_2073_p2;
reg   [0:0] icmp_ln178_reg_2995;
wire    ap_CS_fsm_state63;
reg   [9:0] MemoryController_ch_2_reg_3004;
reg   [0:0] MemoryController_is_4_reg_3019;
wire    ap_CS_fsm_state65;
wire   [13:0] trunc_ln215_1_fu_2153_p1;
reg   [13:0] trunc_ln215_1_reg_3024;
wire   [9:0] trunc_ln321_2_fu_2157_p1;
reg   [9:0] trunc_ln321_2_reg_3029;
wire   [2:0] trunc_ln214_3_fu_2161_p1;
reg   [2:0] trunc_ln214_3_reg_3034;
wire   [9:0] co_V_1_fu_2170_p2;
reg   [9:0] co_V_1_reg_3042;
wire    ap_CS_fsm_state66;
wire   [2:0] select_ln879_fu_2219_p3;
reg   [2:0] select_ln879_reg_3047;
wire   [0:0] icmp_ln164_fu_2165_p2;
reg   [31:0] memorybus_addr_5_reg_3098;
wire   [8:0] x_V_1_fu_2297_p2;
wire   [63:0] zext_ln544_7_fu_2302_p1;
reg   [63:0] zext_ln544_7_reg_3109;
wire    ap_CS_fsm_state67;
reg   [31:0] raw_reg_3120;
wire    ap_CS_fsm_state69;
wire   [31:0] weight_1_fu_2390_p3;
reg   [31:0] weight_1_reg_3125;
wire   [31:0] grp_fu_1046_p2;
reg   [31:0] biased_reg_3130;
wire    ap_CS_fsm_state74;
reg   [0:0] ProcessingElement_r_1_reg_3137;
wire    ap_CS_fsm_state75;
wire   [63:0] grp_fu_1053_p1;
reg   [63:0] tmp_reg_3147;
wire    ap_CS_fsm_state76;
wire   [63:0] grp_fu_1056_p1;
reg   [63:0] tmp_3_reg_3152;
wire   [63:0] grp_fu_1071_p2;
reg   [63:0] tmp_1_reg_3157;
wire    ap_CS_fsm_state94;
wire   [63:0] grp_fu_1076_p2;
reg   [63:0] tmp_4_reg_3163;
wire   [63:0] grp_fu_1059_p2;
reg   [63:0] tmp_5_reg_3169;
wire    ap_CS_fsm_state99;
wire   [63:0] grp_fu_1063_p2;
reg   [63:0] tmp_6_reg_3174;
wire   [63:0] grp_fu_1067_p2;
reg   [63:0] tmp_7_reg_3179;
wire    ap_CS_fsm_state130;
wire   [31:0] result_fu_2416_p3;
reg   [31:0] result_reg_3184;
reg   [8:0] GPoolCache_GBRAM_ad_1_reg_3191;
reg   [31:0] new_ch_reg_3196;
wire    ap_CS_fsm_state145;
wire   [0:0] icmp_ln188_fu_2427_p2;
wire   [9:0] i_fu_2433_p2;
wire   [0:0] icmp_ln191_fu_2444_p2;
wire    ap_CS_fsm_state152;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter5;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state23;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
reg    ap_enable_reg_pp1_iter9;
reg    ap_enable_reg_pp1_iter10;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state35;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter5;
reg    ap_enable_reg_pp2_iter6;
reg    ap_enable_reg_pp2_iter7;
reg    ap_enable_reg_pp2_iter9;
reg    ap_enable_reg_pp2_iter10;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state148;
reg    ap_enable_reg_pp3_iter1;
wire   [14:0] grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_address0;
wire    grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_ce0;
wire   [31:0] grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_d0;
wire    grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_we0;
wire   [14:0] grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_address1;
wire    grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_ce1;
wire   [31:0] grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_d1;
wire    grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_we1;
wire   [9:0] grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_address0;
wire    grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_ce0;
wire   [31:0] grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_d0;
wire    grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_we0;
wire   [9:0] grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_address1;
wire    grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_ce1;
wire   [31:0] grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_d1;
wire    grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_we1;
wire   [9:0] grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_address0;
wire    grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_ce0;
wire   [31:0] grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_d0;
wire    grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_we0;
wire   [9:0] grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_address1;
wire    grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_ce1;
wire   [31:0] grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_d1;
wire    grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_we1;
wire   [9:0] grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_address0;
wire    grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_ce0;
wire   [31:0] grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_d0;
wire    grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_we0;
wire   [9:0] grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_address1;
wire    grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_ce1;
wire   [31:0] grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_d1;
wire    grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_we1;
wire   [9:0] grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_address0;
wire    grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_ce0;
wire   [31:0] grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_d0;
wire    grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_we0;
wire   [9:0] grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_address1;
wire    grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_ce1;
wire   [31:0] grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_d1;
wire    grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_we1;
wire   [9:0] grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_address0;
wire    grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_ce0;
wire   [31:0] grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_d0;
wire    grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_we0;
wire   [9:0] grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_address1;
wire    grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_ce1;
wire   [31:0] grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_d1;
wire    grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_we1;
wire   [9:0] grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_address0;
wire    grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_ce0;
wire   [31:0] grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_d0;
wire    grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_we0;
wire   [9:0] grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_address1;
wire    grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_ce1;
wire   [31:0] grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_d1;
wire    grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_we1;
wire   [9:0] grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_address0;
wire    grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_ce0;
wire   [31:0] grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_d0;
wire    grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_we0;
wire   [9:0] grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_address1;
wire    grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_ce1;
wire   [31:0] grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_d1;
wire    grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_we1;
wire   [9:0] grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_address0;
wire    grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_ce0;
wire   [31:0] grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_d0;
wire    grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_we0;
wire   [9:0] grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_address1;
wire    grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_ce1;
wire   [31:0] grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_d1;
wire    grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_we1;
wire   [9:0] grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_address0;
wire    grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_ce0;
wire   [31:0] grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_d0;
wire    grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_we0;
wire   [9:0] grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_address1;
wire    grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_ce1;
wire   [31:0] grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_d1;
wire    grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_we1;
wire   [8:0] grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_address0;
wire    grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_ce0;
wire   [31:0] grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_d0;
wire    grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_we0;
wire   [8:0] grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_address1;
wire    grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_ce1;
wire   [31:0] grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_d1;
wire    grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_we1;
wire    grp_processInputChannel_s_fu_1003_ap_start;
wire    grp_processInputChannel_s_fu_1003_ap_done;
wire    grp_processInputChannel_s_fu_1003_ap_ready;
wire    grp_processInputChannel_s_fu_1003_ap_idle;
reg    grp_processInputChannel_s_fu_1003_ap_continue;
reg    grp_reg_float_s_fu_1586_ap_ce;
wire    ap_block_state10_pp0_stage1_iter0_ignore_call15;
wire    ap_block_state12_pp0_stage1_iter1_ignore_call15;
wire    ap_block_state14_pp0_stage1_iter2_ignore_call15;
wire    ap_block_state16_pp0_stage1_iter3_ignore_call15;
wire    ap_block_state18_pp0_stage1_iter4_ignore_call15;
wire    ap_block_state20_pp0_stage1_iter5_ignore_call15;
reg    ap_block_pp0_stage1_11001_ignoreCallOp343;
wire    ap_block_state9_pp0_stage0_iter0_ignore_call15;
wire    ap_block_state11_pp0_stage0_iter1_ignore_call15;
wire    ap_block_state13_pp0_stage0_iter2_ignore_call15;
wire    ap_block_state15_pp0_stage0_iter3_ignore_call15;
reg    ap_block_state17_pp0_stage0_iter4_ignore_call15;
wire    ap_block_state19_pp0_stage0_iter5_ignore_call15;
reg    ap_block_pp0_stage0_11001_ignoreCallOp347;
wire   [31:0] grp_reg_float_s_fu_1676_ap_return;
reg    grp_reg_float_s_fu_1676_ap_ce;
wire    ap_block_state23_pp1_stage0_iter0_ignore_call13;
wire    ap_block_state24_pp1_stage0_iter1_ignore_call13;
wire    ap_block_state25_pp1_stage0_iter2_ignore_call13;
wire    ap_block_state26_pp1_stage0_iter3_ignore_call13;
wire    ap_block_state27_pp1_stage0_iter4_ignore_call13;
wire    ap_block_state28_pp1_stage0_iter5_ignore_call13;
wire    ap_block_state29_pp1_stage0_iter6_ignore_call13;
wire    ap_block_state30_pp1_stage0_iter7_ignore_call13;
reg    ap_block_state31_pp1_stage0_iter8_ignore_call13;
wire    ap_block_state32_pp1_stage0_iter9_ignore_call13;
wire    ap_block_state33_pp1_stage0_iter10_ignore_call13;
reg    ap_block_pp1_stage0_11001_ignoreCallOp451;
wire   [31:0] grp_reg_float_s_fu_1727_ap_return;
reg    grp_reg_float_s_fu_1727_ap_ce;
wire    ap_block_state35_pp2_stage0_iter0_ignore_call13;
wire    ap_block_state36_pp2_stage0_iter1_ignore_call13;
wire    ap_block_state37_pp2_stage0_iter2_ignore_call13;
wire    ap_block_state38_pp2_stage0_iter3_ignore_call13;
wire    ap_block_state39_pp2_stage0_iter4_ignore_call13;
wire    ap_block_state40_pp2_stage0_iter5_ignore_call13;
wire    ap_block_state41_pp2_stage0_iter6_ignore_call13;
wire    ap_block_state42_pp2_stage0_iter7_ignore_call13;
reg    ap_block_state43_pp2_stage0_iter8_ignore_call13;
wire    ap_block_state44_pp2_stage0_iter9_ignore_call13;
wire    ap_block_state45_pp2_stage0_iter10_ignore_call13;
reg    ap_block_pp2_stage0_11001_ignoreCallOp494;
wire   [31:0] grp_reg_float_s_fu_1985_ap_return;
reg    grp_reg_float_s_fu_1985_ap_ce;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state58;
reg   [18:0] p_0137_0_i_reg_825;
wire    ap_CS_fsm_state21;
reg   [9:0] t_V_1_reg_837;
reg   [18:0] ap_phi_mux_t_V_phi_fu_851_p4;
reg   [3:0] ap_phi_mux_t_V_6_phi_fu_863_p4;
reg   [9:0] ap_phi_mux_empty_24_phi_fu_875_p4;
reg   [8:0] t_V_8_reg_882;
wire    ap_CS_fsm_state34;
reg   [20:0] ap_phi_mux_loads_left_2_phi_fu_918_p4;
reg   [20:0] loads_left_2_reg_915;
wire   [20:0] grp_fu_1130_p2;
reg   [17:0] indvar_flatten_reg_924;
reg   [8:0] t_V_17_reg_935;
reg   [8:0] ret_V_15_reg_946;
reg   [9:0] t_V_11_reg_957;
reg   [9:0] t_V_12_reg_968;
wire    ap_CS_fsm_state60;
wire    ap_sync_grp_processInputChannel_s_fu_1003_ap_ready;
wire    ap_sync_grp_processInputChannel_s_fu_1003_ap_done;
reg    ap_block_state60_on_subcall_done;
reg   [9:0] t_V_14_reg_980;
wire    ap_CS_fsm_state146;
reg    grp_processInputChannel_s_fu_1003_ap_start_reg;
reg    ap_sync_reg_grp_processInputChannel_s_fu_1003_ap_ready;
reg    ap_sync_reg_grp_processInputChannel_s_fu_1003_ap_done;
wire   [63:0] zext_ln544_2_fu_1600_p1;
wire   [63:0] zext_ln544_10_fu_1682_p1;
wire   [63:0] zext_ln544_fu_1733_p1;
wire   [63:0] zext_ln544_11_fu_1991_p1;
wire   [63:0] zext_ln544_8_fu_2235_p1;
wire   [8:0] GPoolCache_GBRAM_ad_gep_fu_809_p3;
wire   [63:0] zext_ln544_6_fu_2439_p1;
wire   [63:0] zext_ln123_fu_1490_p1;
wire   [63:0] zext_ln138_1_fu_1666_p1;
wire   [63:0] zext_ln138_fu_1717_p1;
wire   [63:0] zext_ln191_fu_1921_p1;
wire   [63:0] zext_ln138_2_fu_1956_p1;
wire   [63:0] zext_ln174_fu_2279_p1;
wire   [31:0] empty_36_fu_2422_p1;
reg    ap_predicate_op904_writeresp_state156;
reg    ap_block_state156;
wire    ap_block_pp3_stage0_01001;
wire   [15:0] grp_fu_1116_p3;
wire   [15:0] select_ln51_2_fu_2001_p3;
wire   [8:0] select_ln101_fu_1248_p3;
wire   [22:0] add_ln214_3_fu_1630_p2;
wire   [22:0] grp_fu_1089_p2;
wire   [22:0] add_ln214_fu_2141_p2;
reg   [20:0] loads_left_0_fu_342;
reg   [20:0] loads_left_4_fu_346;
wire   [20:0] sub_ln214_2_fu_1966_p2;
reg   [0:0] MemoryController_is_2_fu_350;
reg   [9:0] MemoryController_ch_1_fu_354;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state139;
reg   [31:0] grp_fu_1046_p0;
reg   [31:0] grp_fu_1046_p1;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state141;
wire    ap_CS_fsm_state131;
wire   [31:0] grp_fu_1056_p0;
wire    ap_CS_fsm_state95;
wire    ap_CS_fsm_state100;
wire    ap_CS_fsm_state77;
wire   [0:0] grp_fu_1105_p2;
wire   [15:0] grp_fu_1110_p2;
wire   [7:0] lshr_ln_fu_1234_p4;
wire   [8:0] zext_ln214_3_fu_1244_p1;
wire   [15:0] grp_fu_1286_p0;
wire   [8:0] grp_fu_1286_p1;
wire   [10:0] zext_ln215_fu_1301_p1;
wire   [12:0] shl_ln_fu_1321_p3;
wire   [13:0] zext_ln1352_1_fu_1328_p1;
wire   [10:0] zext_ln887_fu_1346_p1;
wire   [9:0] grp_fu_1365_p0;
wire   [9:0] grp_fu_1365_p1;
wire   [0:0] icmp_ln879_1_fu_1370_p2;
wire   [15:0] shl_ln214_fu_1397_p2;
wire   [18:0] empty_22_fu_1419_p1;
wire   [18:0] grp_fu_1365_p2;
wire   [13:0] empty_23_fu_1440_p1;
wire   [13:0] trunc_ln99_fu_1449_p1;
wire   [23:0] zext_ln215_3_fu_1462_p1;
wire   [23:0] zext_ln1353_3_fu_1466_p1;
wire   [23:0] add_ln1353_fu_1470_p2;
wire   [32:0] zext_ln1353_4_fu_1476_p1;
wire   [32:0] ret_V_2_fu_1480_p2;
wire   [32:0] add_ln123_fu_1485_p2;
wire   [13:0] zext_ln1353_fu_1500_p1;
wire   [13:0] ret_V_3_fu_1504_p2;
wire   [2:0] trunc_ln214_2_fu_1524_p1;
wire   [9:0] add_ln321_fu_1509_p2;
wire   [9:0] trunc_ln321_1_fu_1514_p4;
wire   [2:0] add_ln214_1_fu_1528_p2;
wire   [3:0] weight_index_V_fu_1547_p2;
wire   [0:0] icmp_ln879_3_fu_1553_p2;
wire   [9:0] co_V_fu_1558_p2;
wire   [22:0] zext_ln1353_1_fu_1627_p1;
wire   [32:0] rhs_V_1_fu_1652_p1;
wire   [32:0] ret_V_5_fu_1656_p2;
wire   [32:0] add_ln138_1_fu_1661_p2;
wire   [32:0] rhs_V_fu_1703_p1;
wire   [32:0] ret_V_4_fu_1707_p2;
wire   [32:0] add_ln138_fu_1712_p2;
wire   [8:0] mul_ln92_fu_1747_p0;
wire   [8:0] mul_ln92_fu_1747_p1;
wire   [7:0] trunc_ln6_fu_1766_p4;
wire   [8:0] zext_ln152_fu_1776_p1;
wire   [0:0] icmp_ln107_fu_1798_p2;
wire   [8:0] add_ln700_12_fu_1811_p2;
wire   [7:0] trunc_ln152_mid1_fu_1829_p4;
wire   [8:0] zext_ln152_1_fu_1839_p1;
wire   [8:0] select_ln152_1_fu_1843_p3;
wire   [8:0] y_out_V_fu_1780_p3;
wire   [15:0] shl_ln214_1_fu_1884_p2;
wire   [9:0] split_offset_V_fu_1899_p3;
wire   [32:0] rhs_V_2_fu_1907_p1;
wire   [32:0] ret_V_6_fu_1911_p2;
wire   [32:0] add_ln191_fu_1916_p2;
wire   [32:0] rhs_V_3_fu_1942_p1;
wire   [32:0] ret_V_7_fu_1946_p2;
wire   [32:0] add_ln138_2_fu_1951_p2;
wire   [0:0] ret_V_16_fu_1976_p2;
wire   [0:0] icmp_ln879_8_fu_1996_p2;
wire   [8:0] grp_fu_2034_p0;
wire   [8:0] grp_fu_2034_p1;
wire   [7:0] trunc_ln7_fu_2039_p4;
wire   [8:0] zext_ln153_fu_2048_p1;
wire   [8:0] x_out_V_fu_2052_p3;
wire   [17:0] zext_ln214_fu_2058_p1;
wire   [17:0] grp_fu_2034_p2;
wire   [8:0] or_ln178_fu_2068_p2;
wire   [17:0] grp_fu_2090_p0;
wire   [9:0] grp_fu_2090_p1;
wire   [9:0] grp_fu_2104_p0;
wire   [9:0] grp_fu_2104_p1;
wire   [22:0] grp_fu_2090_p2;
wire   [0:0] is_split_layer_fu_2117_p2;
wire   [22:0] shl_ln214_2_fu_2123_p2;
wire   [22:0] px_offset_V_1_fu_2129_p3;
wire   [18:0] grp_fu_2104_p2;
wire   [13:0] zext_ln1353_2_fu_2186_p1;
wire   [13:0] ret_V_13_fu_2190_p2;
wire   [2:0] trunc_ln214_4_fu_2210_p1;
wire   [0:0] icmp_ln879_5_fu_2180_p2;
wire   [2:0] weightID_V_1_fu_2214_p2;
wire   [9:0] add_ln321_1_fu_2195_p2;
wire   [9:0] trunc_ln321_3_fu_2200_p4;
wire   [9:0] rowID_V_1_fu_2227_p3;
wire   [23:0] zext_ln215_9_fu_2251_p1;
wire   [23:0] zext_ln1353_5_fu_2255_p1;
wire   [23:0] add_ln1353_9_fu_2259_p2;
wire   [32:0] zext_ln1353_6_fu_2265_p1;
wire   [32:0] ret_V_14_fu_2269_p2;
wire   [32:0] add_ln174_fu_2274_p2;
wire   [0:0] icmp_ln217_fu_2307_p2;
wire   [0:0] icmp_ln217_1_fu_2320_p2;
wire   [31:0] select_ln217_fu_2312_p3;
wire   [0:0] icmp_ln217_2_fu_2333_p2;
wire   [31:0] select_ln217_1_fu_2325_p3;
wire   [0:0] icmp_ln217_3_fu_2346_p2;
wire   [31:0] select_ln217_2_fu_2338_p3;
wire   [0:0] icmp_ln217_4_fu_2359_p2;
wire   [31:0] select_ln217_3_fu_2351_p3;
wire   [0:0] icmp_ln217_5_fu_2372_p2;
wire   [31:0] select_ln217_4_fu_2364_p3;
wire   [0:0] icmp_ln217_6_fu_2385_p2;
wire   [31:0] select_ln217_5_fu_2377_p3;
wire   [31:0] bitcast_ln204_fu_2402_p1;
wire   [31:0] xor_ln204_fu_2405_p2;
wire   [31:0] grp_fu_1050_p1;
wire   [9:0] mul_ln209_fu_2450_p0;
wire   [8:0] mul_ln209_fu_2450_p1;
wire   [9:0] mul_ln209_2_fu_2457_p0;
wire   [8:0] mul_ln209_2_fu_2457_p1;
reg    grp_fu_1050_ce;
wire    ap_CS_fsm_state157;
reg   [123:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
wire   [20:0] grp_fu_1286_p00;
wire   [20:0] grp_fu_1286_p10;
wire   [18:0] grp_fu_1365_p10;
wire   [17:0] grp_fu_2034_p00;
wire   [22:0] grp_fu_2090_p00;
wire   [22:0] grp_fu_2090_p10;
wire   [18:0] grp_fu_2104_p00;
wire   [13:0] mul_ln209_2_fu_2457_p00;
wire   [13:0] mul_ln209_2_fu_2457_p10;
wire   [15:0] mul_ln209_fu_2450_p00;
wire   [15:0] mul_ln209_fu_2450_p10;
wire   [17:0] mul_ln92_fu_1747_p00;
wire   [17:0] mul_ln92_fu_1747_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 124'd1;
#0 layer_width_V_0_data_reg = 9'd0;
#0 layer_width_V_0_vld_reg = 1'b0;
#0 layer_height_V_0_data_reg = 9'd0;
#0 layer_height_V_0_vld_reg = 1'b0;
#0 layer_channels_in_V_0_data_reg = 10'd0;
#0 layer_channels_in_V_0_vld_reg = 1'b0;
#0 layer_channels_out_V_0_data_reg = 10'd0;
#0 layer_channels_out_V_0_vld_reg = 1'b0;
#0 layer_kernel_V_0_data_reg = 2'd0;
#0 layer_kernel_V_0_vld_reg = 1'b0;
#0 layer_stride_V_0_data_reg = 2'd0;
#0 layer_stride_V_0_vld_reg = 1'b0;
#0 layer_relu_0_data_reg = 1'b0;
#0 layer_relu_0_vld_reg = 1'b0;
#0 layer_is_first_split_layer_0_data_reg = 1'b0;
#0 layer_is_first_split_layer_0_vld_reg = 1'b0;
#0 layer_is_second_split_layer_0_data_reg = 1'b0;
#0 layer_is_second_split_layer_0_vld_reg = 1'b0;
#0 layer_global_pool_0_data_reg = 1'b0;
#0 layer_global_pool_0_vld_reg = 1'b0;
#0 layer_mem_addr_input_V_0_data_reg = 23'd0;
#0 layer_mem_addr_input_V_0_vld_reg = 1'b0;
#0 layer_mem_addr_output_V_0_data_reg = 23'd0;
#0 layer_mem_addr_output_V_0_vld_reg = 1'b0;
#0 layer_mem_addr_weights_V_0_data_reg = 23'd0;
#0 layer_mem_addr_weights_V_0_vld_reg = 1'b0;
#0 SHARED_DRAM_0_data_reg = 32'd0;
#0 SHARED_DRAM_0_vld_reg = 1'b0;
#0 weights_offset_0_data_reg = 32'd0;
#0 weights_offset_0_vld_reg = 1'b0;
#0 input_offset_0_data_reg = 32'd0;
#0 input_offset_0_vld_reg = 1'b0;
#0 ImageCache_width_in = 9'd0;
#0 ImageCache_height_i = 9'd0;
#0 ImageCache_ch_in_V = 10'd0;
#0 ImageCache_line_wid = 16'd0;
#0 ImageCache_curr_img = 16'd0;
#0 WeightsCache_kernel = 2'd0;
#0 WeightsCache_ch_out = 10'd0;
#0 MemoryController_la = 23'd0;
#0 MemoryController_la_2 = 23'd0;
#0 MemoryController_ch = 10'd0;
#0 MemoryController_wi = 9'd0;
#0 MemoryController_is_1 = 1'd0;
#0 MemoryController_is = 1'd0;
#0 ProcessingElement_r = 1'd0;
#0 MemoryController_la_3 = 23'd0;
#0 MemoryController_pi = 23'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter8 = 1'b0;
#0 ap_enable_reg_pp3_iter3 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter10 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter9 = 1'b0;
#0 ap_enable_reg_pp2_iter10 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 grp_processInputChannel_s_fu_1003_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_processInputChannel_s_fu_1003_ap_ready = 1'b0;
#0 ap_sync_reg_grp_processInputChannel_s_fu_1003_ap_done = 1'b0;
end

fpga_top_ImageCache_IBRAM #(
    .DataWidth( 32 ),
    .AddressRange( 32768 ),
    .AddressWidth( 15 ))
ImageCache_IBRAM_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_address0),
    .ce0(ImageCache_IBRAM_ce0),
    .q0(ImageCache_IBRAM_q0),
    .address1(ImageCache_IBRAM_address1),
    .ce1(ImageCache_IBRAM_ce1),
    .we1(ImageCache_IBRAM_we1),
    .d1(ImageCache_IBRAM_d1)
);

fpga_top_WBRAM_0_0_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
WBRAM_0_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(WBRAM_0_0_0_address0),
    .ce0(WBRAM_0_0_0_ce0),
    .q0(WBRAM_0_0_0_q0),
    .address1(WBRAM_0_0_0_address1),
    .ce1(WBRAM_0_0_0_ce1),
    .we1(WBRAM_0_0_0_we1),
    .d1(grp_reg_float_s_fu_1586_ap_return)
);

fpga_top_WBRAM_0_0_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
WBRAM_0_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(WBRAM_0_0_1_address0),
    .ce0(WBRAM_0_0_1_ce0),
    .q0(WBRAM_0_0_1_q0),
    .address1(WBRAM_0_0_1_address1),
    .ce1(WBRAM_0_0_1_ce1),
    .we1(WBRAM_0_0_1_we1),
    .d1(grp_reg_float_s_fu_1586_ap_return)
);

fpga_top_WBRAM_0_0_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
WBRAM_0_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(WBRAM_0_0_2_address0),
    .ce0(WBRAM_0_0_2_ce0),
    .q0(WBRAM_0_0_2_q0),
    .address1(WBRAM_0_0_2_address1),
    .ce1(WBRAM_0_0_2_ce1),
    .we1(WBRAM_0_0_2_we1),
    .d1(grp_reg_float_s_fu_1586_ap_return)
);

fpga_top_WBRAM_0_0_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
WBRAM_0_0_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(WBRAM_0_0_3_address0),
    .ce0(WBRAM_0_0_3_ce0),
    .q0(WBRAM_0_0_3_q0),
    .address1(WBRAM_0_0_3_address1),
    .ce1(WBRAM_0_0_3_ce1),
    .we1(WBRAM_0_0_3_we1),
    .d1(grp_reg_float_s_fu_1586_ap_return)
);

fpga_top_WBRAM_0_0_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
WBRAM_0_0_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(WBRAM_0_0_4_address0),
    .ce0(WBRAM_0_0_4_ce0),
    .q0(WBRAM_0_0_4_q0),
    .address1(WBRAM_0_0_4_address1),
    .ce1(WBRAM_0_0_4_ce1),
    .we1(WBRAM_0_0_4_we1),
    .d1(grp_reg_float_s_fu_1586_ap_return)
);

fpga_top_WBRAM_0_0_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
WBRAM_0_0_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(WBRAM_0_0_5_address0),
    .ce0(WBRAM_0_0_5_ce0),
    .q0(WBRAM_0_0_5_q0),
    .address1(WBRAM_0_0_5_address1),
    .ce1(WBRAM_0_0_5_ce1),
    .we1(WBRAM_0_0_5_we1),
    .d1(grp_reg_float_s_fu_1586_ap_return)
);

fpga_top_WBRAM_0_0_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
WBRAM_0_0_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(WBRAM_0_0_6_address0),
    .ce0(WBRAM_0_0_6_ce0),
    .q0(WBRAM_0_0_6_q0),
    .address1(WBRAM_0_0_6_address1),
    .ce1(WBRAM_0_0_6_ce1),
    .we1(WBRAM_0_0_6_we1),
    .d1(grp_reg_float_s_fu_1586_ap_return)
);

fpga_top_WBRAM_0_0_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
WBRAM_0_0_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(WBRAM_0_0_7_address0),
    .ce0(WBRAM_0_0_7_ce0),
    .q0(WBRAM_0_0_7_q0),
    .address1(WBRAM_0_0_7_address1),
    .ce1(WBRAM_0_0_7_ce1),
    .we1(WBRAM_0_0_7_we1),
    .d1(grp_reg_float_s_fu_1586_ap_return)
);

fpga_top_WBRAM_0_0_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
WBRAM_0_0_8_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_address0),
    .ce0(WBRAM_0_0_8_ce0),
    .q0(WBRAM_0_0_8_q0),
    .address1(WBRAM_0_0_8_address1),
    .ce1(WBRAM_0_0_8_ce1),
    .we1(WBRAM_0_0_8_we1),
    .d1(grp_reg_float_s_fu_1586_ap_return)
);

fpga_top_OutputCache_OBRAM #(
    .DataWidth( 32 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
OutputCache_OBRAM_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(OutputCache_OBRAM_address0),
    .ce0(OutputCache_OBRAM_ce0),
    .we0(OutputCache_OBRAM_we0),
    .d0(grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_d0),
    .q0(OutputCache_OBRAM_q0),
    .address1(grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_address1),
    .ce1(OutputCache_OBRAM_ce1),
    .we1(OutputCache_OBRAM_we1),
    .d1(grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_d1)
);

fpga_top_GPoolCache_GBRAM #(
    .DataWidth( 32 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
GPoolCache_GBRAM_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(GPoolCache_GBRAM_address0),
    .ce0(GPoolCache_GBRAM_ce0),
    .we0(GPoolCache_GBRAM_we0),
    .d0(GPoolCache_GBRAM_d0),
    .q0(GPoolCache_GBRAM_q0)
);

fpga_top_axilite_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITE_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITE_DATA_WIDTH ))
fpga_top_axilite_s_axi_U(
    .AWVALID(s_axi_axilite_AWVALID),
    .AWREADY(s_axi_axilite_AWREADY),
    .AWADDR(s_axi_axilite_AWADDR),
    .WVALID(s_axi_axilite_WVALID),
    .WREADY(s_axi_axilite_WREADY),
    .WDATA(s_axi_axilite_WDATA),
    .WSTRB(s_axi_axilite_WSTRB),
    .ARVALID(s_axi_axilite_ARVALID),
    .ARREADY(s_axi_axilite_ARREADY),
    .ARADDR(s_axi_axilite_ARADDR),
    .RVALID(s_axi_axilite_RVALID),
    .RREADY(s_axi_axilite_RREADY),
    .RDATA(s_axi_axilite_RDATA),
    .RRESP(s_axi_axilite_RRESP),
    .BVALID(s_axi_axilite_BVALID),
    .BREADY(s_axi_axilite_BREADY),
    .BRESP(s_axi_axilite_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .layer_width_V(layer_width_V),
    .layer_height_V(layer_height_V),
    .layer_channels_in_V(layer_channels_in_V),
    .layer_channels_out_V(layer_channels_out_V),
    .layer_kernel_V(layer_kernel_V),
    .layer_stride_V(layer_stride_V),
    .layer_pad(layer_pad),
    .layer_relu(layer_relu),
    .layer_is_first_split_layer(layer_is_first_split_layer),
    .layer_is_second_split_layer(layer_is_second_split_layer),
    .layer_global_pool(layer_global_pool),
    .layer_mem_addr_input_V(layer_mem_addr_input_V),
    .layer_mem_addr_output_V(layer_mem_addr_output_V),
    .layer_mem_addr_weights_V(layer_mem_addr_weights_V),
    .SHARED_DRAM(SHARED_DRAM),
    .weights_offset(weights_offset),
    .num_weights_V(num_weights_V),
    .input_offset(input_offset)
);

fpga_top_memorybus_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_MEMORYBUS_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_MEMORYBUS_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_MEMORYBUS_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_MEMORYBUS_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_MEMORYBUS_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_MEMORYBUS_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_MEMORYBUS_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_MEMORYBUS_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_MEMORYBUS_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_MEMORYBUS_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_MEMORYBUS_CACHE_VALUE ))
fpga_top_memorybus_m_axi_U(
    .AWVALID(m_axi_memorybus_AWVALID),
    .AWREADY(m_axi_memorybus_AWREADY),
    .AWADDR(m_axi_memorybus_AWADDR),
    .AWID(m_axi_memorybus_AWID),
    .AWLEN(m_axi_memorybus_AWLEN),
    .AWSIZE(m_axi_memorybus_AWSIZE),
    .AWBURST(m_axi_memorybus_AWBURST),
    .AWLOCK(m_axi_memorybus_AWLOCK),
    .AWCACHE(m_axi_memorybus_AWCACHE),
    .AWPROT(m_axi_memorybus_AWPROT),
    .AWQOS(m_axi_memorybus_AWQOS),
    .AWREGION(m_axi_memorybus_AWREGION),
    .AWUSER(m_axi_memorybus_AWUSER),
    .WVALID(m_axi_memorybus_WVALID),
    .WREADY(m_axi_memorybus_WREADY),
    .WDATA(m_axi_memorybus_WDATA),
    .WSTRB(m_axi_memorybus_WSTRB),
    .WLAST(m_axi_memorybus_WLAST),
    .WID(m_axi_memorybus_WID),
    .WUSER(m_axi_memorybus_WUSER),
    .ARVALID(m_axi_memorybus_ARVALID),
    .ARREADY(m_axi_memorybus_ARREADY),
    .ARADDR(m_axi_memorybus_ARADDR),
    .ARID(m_axi_memorybus_ARID),
    .ARLEN(m_axi_memorybus_ARLEN),
    .ARSIZE(m_axi_memorybus_ARSIZE),
    .ARBURST(m_axi_memorybus_ARBURST),
    .ARLOCK(m_axi_memorybus_ARLOCK),
    .ARCACHE(m_axi_memorybus_ARCACHE),
    .ARPROT(m_axi_memorybus_ARPROT),
    .ARQOS(m_axi_memorybus_ARQOS),
    .ARREGION(m_axi_memorybus_ARREGION),
    .ARUSER(m_axi_memorybus_ARUSER),
    .RVALID(m_axi_memorybus_RVALID),
    .RREADY(m_axi_memorybus_RREADY),
    .RDATA(m_axi_memorybus_RDATA),
    .RLAST(m_axi_memorybus_RLAST),
    .RID(m_axi_memorybus_RID),
    .RUSER(m_axi_memorybus_RUSER),
    .RRESP(m_axi_memorybus_RRESP),
    .BVALID(m_axi_memorybus_BVALID),
    .BREADY(m_axi_memorybus_BREADY),
    .BRESP(m_axi_memorybus_BRESP),
    .BID(m_axi_memorybus_BID),
    .BUSER(m_axi_memorybus_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(memorybus_ARVALID),
    .I_ARREADY(memorybus_ARREADY),
    .I_ARADDR(memorybus_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(memorybus_RVALID),
    .I_RREADY(memorybus_RREADY),
    .I_RDATA(memorybus_RDATA),
    .I_RID(memorybus_RID),
    .I_RUSER(memorybus_RUSER),
    .I_RRESP(memorybus_RRESP),
    .I_RLAST(memorybus_RLAST),
    .I_AWVALID(memorybus_AWVALID),
    .I_AWREADY(memorybus_AWREADY),
    .I_AWADDR(memorybus_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(memorybus_AWLEN),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(memorybus_WVALID),
    .I_WREADY(memorybus_WREADY),
    .I_WDATA(memorybus_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(memorybus_BVALID),
    .I_BREADY(memorybus_BREADY),
    .I_BRESP(memorybus_BRESP),
    .I_BID(memorybus_BID),
    .I_BUSER(memorybus_BUSER)
);

processInputChannel_s grp_processInputChannel_s_fu_1003(
    .y_V(select_ln887_1_reg_2903),
    .x_V(select_ln887_reg_2895),
    .ci_in_V(t_V_12_reg_968),
    .ch_out_V(layer_channels_out_V_1_reg_2494),
    .ImageCache_line_wid(ImageCache_line_wid),
    .ImageCache_ch_in_V(ImageCache_ch_in_V),
    .ImageCache_width_in(ImageCache_width_in),
    .ImageCache_height_i(ImageCache_height_i),
    .ImageCache_IBRAM_address0(grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_address0),
    .ImageCache_IBRAM_ce0(grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_ce0),
    .ImageCache_IBRAM_d0(grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_d0),
    .ImageCache_IBRAM_q0(ImageCache_IBRAM_q0),
    .ImageCache_IBRAM_we0(grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_we0),
    .ImageCache_IBRAM_address1(grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_address1),
    .ImageCache_IBRAM_ce1(grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_ce1),
    .ImageCache_IBRAM_d1(grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_d1),
    .ImageCache_IBRAM_q1(32'd0),
    .ImageCache_IBRAM_we1(grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_we1),
    .WeightsCache_ch_out(WeightsCache_ch_out),
    .WeightsCache_kernel(WeightsCache_kernel),
    .WBRAM_0_0_0_address0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_address0),
    .WBRAM_0_0_0_ce0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_ce0),
    .WBRAM_0_0_0_d0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_d0),
    .WBRAM_0_0_0_q0(WBRAM_0_0_0_q0),
    .WBRAM_0_0_0_we0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_we0),
    .WBRAM_0_0_0_address1(grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_address1),
    .WBRAM_0_0_0_ce1(grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_ce1),
    .WBRAM_0_0_0_d1(grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_d1),
    .WBRAM_0_0_0_q1(32'd0),
    .WBRAM_0_0_0_we1(grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_we1),
    .WBRAM_0_0_1_address0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_address0),
    .WBRAM_0_0_1_ce0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_ce0),
    .WBRAM_0_0_1_d0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_d0),
    .WBRAM_0_0_1_q0(WBRAM_0_0_1_q0),
    .WBRAM_0_0_1_we0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_we0),
    .WBRAM_0_0_1_address1(grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_address1),
    .WBRAM_0_0_1_ce1(grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_ce1),
    .WBRAM_0_0_1_d1(grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_d1),
    .WBRAM_0_0_1_q1(32'd0),
    .WBRAM_0_0_1_we1(grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_we1),
    .WBRAM_0_0_2_address0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_address0),
    .WBRAM_0_0_2_ce0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_ce0),
    .WBRAM_0_0_2_d0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_d0),
    .WBRAM_0_0_2_q0(WBRAM_0_0_2_q0),
    .WBRAM_0_0_2_we0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_we0),
    .WBRAM_0_0_2_address1(grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_address1),
    .WBRAM_0_0_2_ce1(grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_ce1),
    .WBRAM_0_0_2_d1(grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_d1),
    .WBRAM_0_0_2_q1(32'd0),
    .WBRAM_0_0_2_we1(grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_we1),
    .WBRAM_0_0_3_address0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_address0),
    .WBRAM_0_0_3_ce0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_ce0),
    .WBRAM_0_0_3_d0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_d0),
    .WBRAM_0_0_3_q0(WBRAM_0_0_3_q0),
    .WBRAM_0_0_3_we0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_we0),
    .WBRAM_0_0_3_address1(grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_address1),
    .WBRAM_0_0_3_ce1(grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_ce1),
    .WBRAM_0_0_3_d1(grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_d1),
    .WBRAM_0_0_3_q1(32'd0),
    .WBRAM_0_0_3_we1(grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_we1),
    .WBRAM_0_0_4_address0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_address0),
    .WBRAM_0_0_4_ce0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_ce0),
    .WBRAM_0_0_4_d0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_d0),
    .WBRAM_0_0_4_q0(WBRAM_0_0_4_q0),
    .WBRAM_0_0_4_we0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_we0),
    .WBRAM_0_0_4_address1(grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_address1),
    .WBRAM_0_0_4_ce1(grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_ce1),
    .WBRAM_0_0_4_d1(grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_d1),
    .WBRAM_0_0_4_q1(32'd0),
    .WBRAM_0_0_4_we1(grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_we1),
    .WBRAM_0_0_5_address0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_address0),
    .WBRAM_0_0_5_ce0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_ce0),
    .WBRAM_0_0_5_d0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_d0),
    .WBRAM_0_0_5_q0(WBRAM_0_0_5_q0),
    .WBRAM_0_0_5_we0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_we0),
    .WBRAM_0_0_5_address1(grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_address1),
    .WBRAM_0_0_5_ce1(grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_ce1),
    .WBRAM_0_0_5_d1(grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_d1),
    .WBRAM_0_0_5_q1(32'd0),
    .WBRAM_0_0_5_we1(grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_we1),
    .WBRAM_0_0_6_address0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_address0),
    .WBRAM_0_0_6_ce0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_ce0),
    .WBRAM_0_0_6_d0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_d0),
    .WBRAM_0_0_6_q0(WBRAM_0_0_6_q0),
    .WBRAM_0_0_6_we0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_we0),
    .WBRAM_0_0_6_address1(grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_address1),
    .WBRAM_0_0_6_ce1(grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_ce1),
    .WBRAM_0_0_6_d1(grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_d1),
    .WBRAM_0_0_6_q1(32'd0),
    .WBRAM_0_0_6_we1(grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_we1),
    .WBRAM_0_0_7_address0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_address0),
    .WBRAM_0_0_7_ce0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_ce0),
    .WBRAM_0_0_7_d0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_d0),
    .WBRAM_0_0_7_q0(WBRAM_0_0_7_q0),
    .WBRAM_0_0_7_we0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_we0),
    .WBRAM_0_0_7_address1(grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_address1),
    .WBRAM_0_0_7_ce1(grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_ce1),
    .WBRAM_0_0_7_d1(grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_d1),
    .WBRAM_0_0_7_q1(32'd0),
    .WBRAM_0_0_7_we1(grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_we1),
    .WBRAM_0_0_8_address0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_address0),
    .WBRAM_0_0_8_ce0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_ce0),
    .WBRAM_0_0_8_d0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_d0),
    .WBRAM_0_0_8_q0(WBRAM_0_0_8_q0),
    .WBRAM_0_0_8_we0(grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_we0),
    .WBRAM_0_0_8_address1(grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_address1),
    .WBRAM_0_0_8_ce1(grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_ce1),
    .WBRAM_0_0_8_d1(grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_d1),
    .WBRAM_0_0_8_q1(32'd0),
    .WBRAM_0_0_8_we1(grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_we1),
    .OutputCache_OBRAM_address0(grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_address0),
    .OutputCache_OBRAM_ce0(grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_ce0),
    .OutputCache_OBRAM_d0(grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_d0),
    .OutputCache_OBRAM_q0(OutputCache_OBRAM_q0),
    .OutputCache_OBRAM_we0(grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_we0),
    .OutputCache_OBRAM_address1(grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_address1),
    .OutputCache_OBRAM_ce1(grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_ce1),
    .OutputCache_OBRAM_d1(grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_d1),
    .OutputCache_OBRAM_q1(32'd0),
    .OutputCache_OBRAM_we1(grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_we1),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .y_V_ap_vld(1'b1),
    .x_V_ap_vld(1'b1),
    .ci_in_V_ap_vld(1'b1),
    .ch_out_V_ap_vld(1'b1),
    .ImageCache_line_wid_ap_vld(1'b1),
    .ImageCache_ch_in_V_ap_vld(1'b1),
    .ImageCache_width_in_ap_vld(1'b1),
    .ImageCache_height_i_ap_vld(1'b1),
    .WeightsCache_ch_out_ap_vld(1'b1),
    .ap_start(grp_processInputChannel_s_fu_1003_ap_start),
    .WeightsCache_kernel_ap_vld(1'b1),
    .ap_done(grp_processInputChannel_s_fu_1003_ap_done),
    .ap_ready(grp_processInputChannel_s_fu_1003_ap_ready),
    .ap_idle(grp_processInputChannel_s_fu_1003_ap_idle),
    .ap_continue(grp_processInputChannel_s_fu_1003_ap_continue)
);

reg_float_s grp_reg_float_s_fu_1586(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .in_r(memorybus_addr_read_reg_2730),
    .ap_return(grp_reg_float_s_fu_1586_ap_return),
    .ap_ce(grp_reg_float_s_fu_1586_ap_ce)
);

reg_float_s grp_reg_float_s_fu_1676(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .in_r(memorybus_addr_2_rea_reg_2831),
    .ap_return(grp_reg_float_s_fu_1676_ap_return),
    .ap_ce(grp_reg_float_s_fu_1676_ap_ce)
);

reg_float_s grp_reg_float_s_fu_1727(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .in_r(memorybus_addr_1_rea_reg_2851),
    .ap_return(grp_reg_float_s_fu_1727_ap_return),
    .ap_ce(grp_reg_float_s_fu_1727_ap_ce)
);

reg_float_s grp_reg_float_s_fu_1985(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .in_r(memorybus_addr_4_rea_reg_2972),
    .ap_return(grp_reg_float_s_fu_1985_ap_return),
    .ap_ce(grp_reg_float_s_fu_1985_ap_ce)
);

fpga_top_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fpga_top_fadd_32ns_32ns_32_5_full_dsp_1_U103(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1046_p0),
    .din1(grp_fu_1046_p1),
    .ce(1'b1),
    .dout(grp_fu_1046_p2)
);

fpga_top_fptrunc_64ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
fpga_top_fptrunc_64ns_32_2_1_U104(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_7_reg_3179),
    .ce(grp_fu_1050_ce),
    .dout(grp_fu_1050_p1)
);

fpga_top_fpext_32ns_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpga_top_fpext_32ns_64_2_1_U105(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(biased_reg_3130),
    .ce(1'b1),
    .dout(grp_fu_1053_p1)
);

fpga_top_fpext_32ns_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpga_top_fpext_32ns_64_2_1_U106(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1056_p0),
    .ce(1'b1),
    .dout(grp_fu_1056_p1)
);

fpga_top_dsub_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
fpga_top_dsub_64ns_64ns_64_5_full_dsp_1_U107(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_1_reg_3157),
    .din1(tmp_4_reg_3163),
    .ce(1'b1),
    .dout(grp_fu_1059_p2)
);

fpga_top_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
fpga_top_dadd_64ns_64ns_64_5_full_dsp_1_U108(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_1_reg_3157),
    .din1(tmp_4_reg_3163),
    .ce(1'b1),
    .dout(grp_fu_1063_p2)
);

fpga_top_ddiv_64ns_64ns_64_31_1 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
fpga_top_ddiv_64ns_64ns_64_31_1_U109(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_5_reg_3169),
    .din1(tmp_6_reg_3174),
    .ce(1'b1),
    .dout(grp_fu_1067_p2)
);

fpga_top_dexp_64ns_64ns_64_18_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 18 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
fpga_top_dexp_64ns_64ns_64_18_full_dsp_1_U110(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(64'd0),
    .din1(tmp_reg_3147),
    .ce(1'b1),
    .dout(grp_fu_1071_p2)
);

fpga_top_dexp_64ns_64ns_64_18_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 18 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
fpga_top_dexp_64ns_64ns_64_18_full_dsp_1_U111(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(64'd0),
    .din1(tmp_3_reg_3152),
    .ce(1'b1),
    .dout(grp_fu_1076_p2)
);

fpga_top_mul_16ns_9ns_21_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 21 ))
fpga_top_mul_16ns_9ns_21_3_1_U112(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1286_p0),
    .din1(grp_fu_1286_p1),
    .ce(1'b1),
    .dout(grp_fu_1286_p2)
);

fpga_top_mul_10ns_10ns_19_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 19 ))
fpga_top_mul_10ns_10ns_19_3_1_U113(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1365_p0),
    .din1(grp_fu_1365_p1),
    .ce(1'b1),
    .dout(grp_fu_1365_p2)
);

fpga_top_mul_9ns_9ns_18_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 18 ))
fpga_top_mul_9ns_9ns_18_3_1_U114(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_2034_p0),
    .din1(grp_fu_2034_p1),
    .ce(1'b1),
    .dout(grp_fu_2034_p2)
);

fpga_top_mul_18ns_10ns_23_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 23 ))
fpga_top_mul_18ns_10ns_23_3_1_U115(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_2090_p0),
    .din1(grp_fu_2090_p1),
    .ce(1'b1),
    .dout(grp_fu_2090_p2)
);

fpga_top_mul_10ns_10ns_19_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 19 ))
fpga_top_mul_10ns_10ns_19_3_1_U116(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_2104_p0),
    .din1(grp_fu_2104_p1),
    .ce(1'b1),
    .dout(grp_fu_2104_p2)
);

fpga_top_mul_mul_10ns_9ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 16 ))
fpga_top_mul_mul_10ns_9ns_16_1_1_U117(
    .din0(mul_ln209_fu_2450_p0),
    .din1(mul_ln209_fu_2450_p1),
    .dout(mul_ln209_fu_2450_p2)
);

fpga_top_mul_mul_10ns_9ns_14_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 14 ))
fpga_top_mul_mul_10ns_9ns_14_1_1_U118(
    .din0(mul_ln209_2_fu_2457_p0),
    .din1(mul_ln209_2_fu_2457_p1),
    .dout(mul_ln209_2_fu_2457_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state23) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((grp_fu_1081_p2 == 1'd0) & (icmp_ln90_fu_1616_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state23)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state23);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
        end else if (((grp_fu_1081_p2 == 1'd0) & (icmp_ln90_fu_1616_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
            ap_enable_reg_pp1_iter10 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state35) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((icmp_ln90_fu_1616_p2 == 1'd1) & (grp_fu_1081_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state35)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state35);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
        end else if (((icmp_ln90_fu_1616_p2 == 1'd1) & (grp_fu_1081_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
            ap_enable_reg_pp2_iter10 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp3_exit_iter0_state148) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((memorybus_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state147))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state148)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state148);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
        end else if (((memorybus_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state147))) begin
            ap_enable_reg_pp3_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_processInputChannel_s_fu_1003_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state60_on_subcall_done) & (1'b1 == ap_CS_fsm_state60))) begin
            ap_sync_reg_grp_processInputChannel_s_fu_1003_ap_done <= 1'b0;
        end else if ((grp_processInputChannel_s_fu_1003_ap_done == 1'b1)) begin
            ap_sync_reg_grp_processInputChannel_s_fu_1003_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_processInputChannel_s_fu_1003_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state60_on_subcall_done) & (1'b1 == ap_CS_fsm_state60))) begin
            ap_sync_reg_grp_processInputChannel_s_fu_1003_ap_ready <= 1'b0;
        end else if ((grp_processInputChannel_s_fu_1003_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_processInputChannel_s_fu_1003_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_processInputChannel_s_fu_1003_ap_start_reg <= 1'b0;
    end else begin
        if ((((ap_sync_grp_processInputChannel_s_fu_1003_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state60)) | ((icmp_ln130_fu_2015_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state59)))) begin
            grp_processInputChannel_s_fu_1003_ap_start_reg <= 1'b1;
        end else if ((grp_processInputChannel_s_fu_1003_ap_ready == 1'b1)) begin
            grp_processInputChannel_s_fu_1003_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        ImageCache_curr_img <= select_ln51_2_fu_2001_p3;
    end else if ((((icmp_ln68_reg_2836_pp2_iter9_reg == 1'd0) & (ap_enable_reg_pp2_iter10 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((icmp_ln68_1_reg_2816_pp1_iter9_reg == 1'd0) & (ap_enable_reg_pp1_iter10 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        ImageCache_curr_img <= grp_fu_1116_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ImageCache_curr_img <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln164_fu_2165_p2 == 1'd1) & (ret_V_11_reg_2968 == 1'd0) & (1'b1 == ap_CS_fsm_state66))) begin
        MemoryController_ch_1_fu_354 <= MemoryController_ch_2_reg_3004;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        MemoryController_ch_1_fu_354 <= layer_channels_out_V_1_reg_2494;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln164_fu_2165_p2 == 1'd1) & (ret_V_11_reg_2968 == 1'd0) & (1'b1 == ap_CS_fsm_state66))) begin
        MemoryController_is_2_fu_350 <= MemoryController_is_4_reg_3019;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        MemoryController_is_2_fu_350 <= layer_is_second_spli_reg_2483;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln68_fu_1692_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((icmp_ln68_1_fu_1641_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((icmp_ln68_2_fu_1931_p2 == 1'd0) & (icmp_ln887_3_reg_2939 == 1'd0) & (1'b1 == ap_CS_fsm_state48)))) begin
        MemoryController_la_3 <= grp_fu_1089_p2;
    end else if (((icmp_ln90_fu_1616_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        MemoryController_la_3 <= add_ln214_3_fu_1630_p2;
    end else if (((icmp_ln887_fu_1350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        MemoryController_la_3 <= layer_mem_addr_input_reg_2473;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln99_reg_2696 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_24_reg_871 <= select_ln126_1_reg_2720;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        empty_24_reg_871 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln188_fu_2427_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        i_op_assign_1_reg_992 <= i_fu_2433_p2;
    end else if (((memorybus_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state147))) begin
        i_op_assign_1_reg_992 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state66) & ((icmp_ln164_fu_2165_p2 == 1'd1) | (ret_V_11_reg_2968 == 1'd1)))) begin
        indvar_flatten_reg_924 <= add_ln96_reg_2890;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        indvar_flatten_reg_924 <= 18'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_2_reg_2808 == 1'd0) & (1'b1 == ap_CS_fsm_state34))) begin
        loads_left_0_fu_342 <= grp_fu_1130_p2;
    end else if (((icmp_ln887_fu_1350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        loads_left_0_fu_342 <= mul_ln209_1_reg_2569;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_1_reg_2812 == 1'd0) & (1'b1 == ap_CS_fsm_state46))) begin
        loads_left_2_reg_915 <= grp_fu_1130_p2;
    end else if (((grp_fu_1081_p2 == 1'd1) & (icmp_ln90_fu_1616_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        loads_left_2_reg_915 <= loads_left_0_fu_342;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_2_fu_1931_p2 == 1'd1) & (icmp_ln887_3_reg_2939 == 1'd0) & (1'b1 == ap_CS_fsm_state48))) begin
        loads_left_4_fu_346 <= sub_ln214_2_fu_1966_p2;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        loads_left_4_fu_346 <= ap_phi_mux_loads_left_2_phi_fu_918_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_0137_0_i_reg_825 <= 19'd0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        p_0137_0_i_reg_825 <= dram_addr_V_reg_2671;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state66) & ((icmp_ln164_fu_2165_p2 == 1'd1) | (ret_V_11_reg_2968 == 1'd1)))) begin
        ret_V_15_reg_946 <= x_V_1_fu_2297_p2;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        ret_V_15_reg_946 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_3_fu_1874_p2 == 1'd0) & (icmp_ln96_fu_1787_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state47))) begin
        t_V_11_reg_957 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        t_V_11_reg_957 <= ci_V_3_reg_2957;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state48) & (((icmp_ln887_3_reg_2939 == 1'd1) & (ret_V_11_fu_1980_p2 == 1'd0)) | ((icmp_ln68_2_fu_1931_p2 == 1'd1) & (ret_V_11_fu_1980_p2 == 1'd0))))) begin
        t_V_12_reg_968 <= 10'd0;
    end else if (((1'b0 == ap_block_state60_on_subcall_done) & (1'b1 == ap_CS_fsm_state60))) begin
        t_V_12_reg_968 <= ci_V_4_reg_2980;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state146)) begin
        t_V_14_reg_980 <= co_V_1_reg_3042;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        t_V_14_reg_980 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state66) & ((icmp_ln164_fu_2165_p2 == 1'd1) | (ret_V_11_reg_2968 == 1'd1)))) begin
        t_V_17_reg_935 <= select_ln887_1_reg_2903;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        t_V_17_reg_935 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        t_V_1_reg_837 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        t_V_1_reg_837 <= ci_V_reg_2618;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fu_1081_p2 == 1'd0) & (icmp_ln90_fu_1616_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        t_V_3_reg_893 <= 10'd0;
    end else if (((icmp_ln68_1_fu_1641_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        t_V_3_reg_893 <= ci_V_2_fu_1646_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln90_fu_1616_p2 == 1'd1) & (grp_fu_1081_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        t_V_5_reg_904 <= 10'd0;
    end else if (((icmp_ln68_fu_1692_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        t_V_5_reg_904 <= ci_V_1_fu_1697_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln99_reg_2696 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_V_6_reg_859 <= select_ln126_reg_2715;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        t_V_6_reg_859 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        t_V_8_reg_882 <= x_V_reg_2803;
    end else if (((icmp_ln887_fu_1350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        t_V_8_reg_882 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln99_reg_2696 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_V_reg_848 <= add_ln700_reg_2725;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        t_V_reg_848 <= p_0137_0_i_reg_825;
    end
end

always @ (posedge ap_clk) begin
    if (((layer_global_pool_re_reg_2479 == 1'd1) & (icmp_ln178_reg_2995 == 1'd0) & (1'b1 == ap_CS_fsm_state138) & (memorybus_BVALID == 1'b1))) begin
        GPoolCache_GBRAM_ad_1_reg_3191 <= zext_ln544_7_reg_3109;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ImageCache_ch_in_V <= layer_channels_in_V_0_data_reg;
        ImageCache_height_i <= layer_height_V_0_data_reg;
        ImageCache_line_wid <= mul_ln209_fu_2450_p2;
        ImageCache_width_in <= layer_width_V_0_data_reg;
        MemoryController_ch <= layer_channels_out_V_0_data_reg;
        MemoryController_is <= layer_is_second_split_layer_0_data_reg;
        MemoryController_is_1 <= layer_is_first_split_layer_0_data_reg;
        MemoryController_la <= layer_mem_addr_weights_V_0_data_reg;
        MemoryController_la_2 <= layer_mem_addr_output_V_0_data_reg;
        MemoryController_wi <= select_ln101_fu_1248_p3;
        ProcessingElement_r <= layer_relu_0_data_reg;
        WeightsCache_ch_out <= layer_channels_out_V_0_data_reg;
        WeightsCache_kernel <= layer_kernel_V_0_data_reg;
        icmp_ln879_4_reg_2541 <= icmp_ln879_4_fu_1228_p2;
        input_offset_read_reg_2463 <= input_offset_0_data_reg;
        layer_channels_in_V_s_reg_2504 <= layer_channels_in_V_0_data_reg;
        layer_channels_out_V_1_reg_2494 <= layer_channels_out_V_0_data_reg;
        layer_global_pool_re_reg_2479 <= layer_global_pool_0_data_reg;
        layer_height_V_read_reg_2516 <= layer_height_V_0_data_reg;
        layer_is_second_spli_reg_2483 <= layer_is_second_split_layer_0_data_reg;
        layer_kernel_V_read_reg_2488 <= layer_kernel_V_0_data_reg;
        layer_mem_addr_input_reg_2473 <= layer_mem_addr_input_V_0_data_reg;
        layer_width_V_read_reg_2522 <= layer_width_V_0_data_reg;
        mul_ln209_reg_2535 <= mul_ln209_fu_2450_p2;
        tmp_13_reg_2530 <= {{SHARED_DRAM_0_data_reg[31:2]}};
        weights_offset_read_reg_2468 <= weights_offset_0_data_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln96_fu_1787_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state47))) begin
        ImageCache_ch_in_V_s_reg_2929 <= ImageCache_ch_in_V;
        icmp_ln887_3_reg_2939 <= icmp_ln887_3_fu_1874_p2;
        select_ln887_1_reg_2903 <= select_ln887_1_fu_1817_p3;
        select_ln887_2_reg_2914 <= select_ln887_2_fu_1850_p3;
        select_ln887_reg_2895 <= select_ln887_fu_1803_p3;
        trunc_ln887_1_reg_2924 <= trunc_ln887_1_fu_1862_p1;
        trunc_ln887_reg_2909 <= trunc_ln887_fu_1825_p1;
        zext_ln887_2_reg_2934[9 : 0] <= zext_ln887_2_fu_1870_p1[9 : 0];
        zext_ln887_3_reg_2919[8 : 0] <= zext_ln887_3_fu_1858_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_3_fu_1874_p2 == 1'd0) & (icmp_ln96_fu_1787_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state47))) begin
        MAX_ADDR_V_1_reg_2943[15 : 2] <= MAX_ADDR_V_1_fu_1890_p2[15 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_fu_1350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        MAX_ADDR_V_reg_2661[15 : 2] <= MAX_ADDR_V_fu_1402_p2[15 : 2];
        lhs_V_2_reg_2652[31 : 0] <= lhs_V_2_fu_1394_p1[31 : 0];
        zext_ln887_1_reg_2646[9 : 0] <= zext_ln887_1_fu_1391_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        MemoryController_ch_2_reg_3004 <= MemoryController_ch;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        MemoryController_is_4_reg_3019 <= MemoryController_is;
        MemoryController_pi <= add_ln214_fu_2141_p2;
        trunc_ln214_3_reg_3034 <= trunc_ln214_3_fu_2161_p1;
        trunc_ln215_1_reg_3024 <= trunc_ln215_1_fu_2153_p1;
        trunc_ln321_2_reg_3029 <= trunc_ln321_2_fu_2157_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        ProcessingElement_r_1_reg_3137 <= ProcessingElement_r;
        biased_reg_3130 <= grp_fu_1046_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == SHARED_DRAM_0_vld_reg) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == SHARED_DRAM_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == SHARED_DRAM_0_vld_reg)))) begin
        SHARED_DRAM_0_data_reg <= SHARED_DRAM;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln1352_reg_2599 <= add_ln1352_fu_1332_p2;
        icmp_ln879_2_reg_2609 <= icmp_ln879_2_fu_1341_p2;
        icmp_ln879_reg_2589 <= icmp_ln879_fu_1313_p2;
        lhs_V_1_reg_2604[31 : 0] <= lhs_V_1_fu_1338_p1[31 : 0];
        lhs_V_reg_2594[9 : 0] <= lhs_V_fu_1318_p1[9 : 0];
        mul_ln209_1_reg_2569 <= grp_fu_1286_p2;
        mul_ln209_2_reg_2574 <= mul_ln209_2_fu_2457_p2;
        p_cast_reg_2559[29 : 0] <= p_cast_fu_1292_p1[29 : 0];
        ret_V_reg_2579 <= ret_V_fu_1304_p2;
        zext_ln209_5_reg_2584[9 : 0] <= zext_ln209_5_fu_1310_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln99_reg_2696 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln700_reg_2725 <= add_ln700_fu_1580_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        add_ln96_reg_2890 <= add_ln96_fu_1792_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln99_reg_2691 <= add_ln99_fu_1444_p2;
        dram_addr_V_reg_2671 <= dram_addr_V_fu_1422_p2;
        weights_per_filter_V_reg_2666[3] <= weights_per_filter_V_fu_1412_p3[3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_fu_1350_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        bias_or_1x1_reg_2628 <= bias_or_1x1_fu_1375_p2;
        ret_V_1_reg_2633 <= ret_V_1_fu_1380_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_3_reg_2939 == 1'd0) & (1'b1 == ap_CS_fsm_state48))) begin
        ci_V_3_reg_2957 <= ci_V_3_fu_1936_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        ci_V_4_reg_2980 <= ci_V_4_fu_2020_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ci_V_reg_2618 <= ci_V_fu_1355_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ret_V_11_reg_2968 == 1'd0) & (1'b1 == ap_CS_fsm_state66))) begin
        co_V_1_reg_3042 <= co_V_1_fu_2170_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        icmp_ln178_reg_2995 <= icmp_ln178_fu_2073_p2;
        xy_offset_V_reg_2990 <= xy_offset_V_fu_2062_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        icmp_ln188_reg_3201 <= icmp_ln188_fu_2427_p2;
        icmp_ln188_reg_3201_pp3_iter1_reg <= icmp_ln188_reg_3201;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp3_stage0_11001)) begin
        icmp_ln188_reg_3201_pp3_iter2_reg <= icmp_ln188_reg_3201_pp3_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state152)) begin
        icmp_ln191_reg_3215 <= icmp_ln191_fu_2444_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln68_1_reg_2816 <= icmp_ln68_1_fu_1641_p2;
        icmp_ln68_1_reg_2816_pp1_iter1_reg <= icmp_ln68_1_reg_2816;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln68_1_reg_2816_pp1_iter2_reg <= icmp_ln68_1_reg_2816_pp1_iter1_reg;
        icmp_ln68_1_reg_2816_pp1_iter3_reg <= icmp_ln68_1_reg_2816_pp1_iter2_reg;
        icmp_ln68_1_reg_2816_pp1_iter4_reg <= icmp_ln68_1_reg_2816_pp1_iter3_reg;
        icmp_ln68_1_reg_2816_pp1_iter5_reg <= icmp_ln68_1_reg_2816_pp1_iter4_reg;
        icmp_ln68_1_reg_2816_pp1_iter6_reg <= icmp_ln68_1_reg_2816_pp1_iter5_reg;
        icmp_ln68_1_reg_2816_pp1_iter7_reg <= icmp_ln68_1_reg_2816_pp1_iter6_reg;
        icmp_ln68_1_reg_2816_pp1_iter8_reg <= icmp_ln68_1_reg_2816_pp1_iter7_reg;
        icmp_ln68_1_reg_2816_pp1_iter9_reg <= icmp_ln68_1_reg_2816_pp1_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln68_reg_2836 <= icmp_ln68_fu_1692_p2;
        icmp_ln68_reg_2836_pp2_iter1_reg <= icmp_ln68_reg_2836;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        icmp_ln68_reg_2836_pp2_iter2_reg <= icmp_ln68_reg_2836_pp2_iter1_reg;
        icmp_ln68_reg_2836_pp2_iter3_reg <= icmp_ln68_reg_2836_pp2_iter2_reg;
        icmp_ln68_reg_2836_pp2_iter4_reg <= icmp_ln68_reg_2836_pp2_iter3_reg;
        icmp_ln68_reg_2836_pp2_iter5_reg <= icmp_ln68_reg_2836_pp2_iter4_reg;
        icmp_ln68_reg_2836_pp2_iter6_reg <= icmp_ln68_reg_2836_pp2_iter5_reg;
        icmp_ln68_reg_2836_pp2_iter7_reg <= icmp_ln68_reg_2836_pp2_iter6_reg;
        icmp_ln68_reg_2836_pp2_iter8_reg <= icmp_ln68_reg_2836_pp2_iter7_reg;
        icmp_ln68_reg_2836_pp2_iter9_reg <= icmp_ln68_reg_2836_pp2_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln90_fu_1616_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        icmp_ln887_1_reg_2812 <= grp_fu_1081_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln90_fu_1616_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        icmp_ln887_2_reg_2808 <= grp_fu_1081_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln99_reg_2696 <= icmp_ln99_fu_1453_p2;
        icmp_ln99_reg_2696_pp0_iter1_reg <= icmp_ln99_reg_2696;
        icmp_ln99_reg_2696_pp0_iter2_reg <= icmp_ln99_reg_2696_pp0_iter1_reg;
        icmp_ln99_reg_2696_pp0_iter3_reg <= icmp_ln99_reg_2696_pp0_iter2_reg;
        icmp_ln99_reg_2696_pp0_iter4_reg <= icmp_ln99_reg_2696_pp0_iter3_reg;
        rowID_V_reg_2706_pp0_iter1_reg <= rowID_V_reg_2706;
        rowID_V_reg_2706_pp0_iter2_reg <= rowID_V_reg_2706_pp0_iter1_reg;
        rowID_V_reg_2706_pp0_iter3_reg <= rowID_V_reg_2706_pp0_iter2_reg;
        rowID_V_reg_2706_pp0_iter4_reg <= rowID_V_reg_2706_pp0_iter3_reg;
        t_V_6_reg_859_pp0_iter1_reg <= t_V_6_reg_859;
        t_V_6_reg_859_pp0_iter2_reg <= t_V_6_reg_859_pp0_iter1_reg;
        t_V_6_reg_859_pp0_iter3_reg <= t_V_6_reg_859_pp0_iter2_reg;
        t_V_6_reg_859_pp0_iter4_reg <= t_V_6_reg_859_pp0_iter3_reg;
        weightID_V_reg_2711_pp0_iter1_reg <= weightID_V_reg_2711;
        weightID_V_reg_2711_pp0_iter2_reg <= weightID_V_reg_2711_pp0_iter1_reg;
        weightID_V_reg_2711_pp0_iter3_reg <= weightID_V_reg_2711_pp0_iter2_reg;
        weightID_V_reg_2711_pp0_iter4_reg <= weightID_V_reg_2711_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (input_offset_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (input_offset_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (input_offset_0_vld_reg == 1'b1)))) begin
        input_offset_0_data_reg <= input_offset;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (layer_channels_in_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (layer_channels_in_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (layer_channels_in_V_0_vld_reg == 1'b1)))) begin
        layer_channels_in_V_0_data_reg <= layer_channels_in_V;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (layer_channels_out_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (layer_channels_out_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (layer_channels_out_V_0_vld_reg == 1'b1)))) begin
        layer_channels_out_V_0_data_reg <= layer_channels_out_V;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (layer_global_pool_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (layer_global_pool_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (layer_global_pool_0_vld_reg == 1'b1)))) begin
        layer_global_pool_0_data_reg <= layer_global_pool;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (layer_height_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (layer_height_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (layer_height_V_0_vld_reg == 1'b1)))) begin
        layer_height_V_0_data_reg <= layer_height_V;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (layer_is_first_split_layer_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (layer_is_first_split_layer_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (layer_is_first_split_layer_0_vld_reg == 1'b1)))) begin
        layer_is_first_split_layer_0_data_reg <= layer_is_first_split_layer;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (layer_is_second_split_layer_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (layer_is_second_split_layer_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (layer_is_second_split_layer_0_vld_reg == 1'b1)))) begin
        layer_is_second_split_layer_0_data_reg <= layer_is_second_split_layer;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (layer_kernel_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (layer_kernel_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (layer_kernel_V_0_vld_reg == 1'b1)))) begin
        layer_kernel_V_0_data_reg <= layer_kernel_V;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (layer_mem_addr_input_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (layer_mem_addr_input_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (layer_mem_addr_input_V_0_vld_reg == 1'b1)))) begin
        layer_mem_addr_input_V_0_data_reg <= layer_mem_addr_input_V;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (layer_mem_addr_output_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (layer_mem_addr_output_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (layer_mem_addr_output_V_0_vld_reg == 1'b1)))) begin
        layer_mem_addr_output_V_0_data_reg <= layer_mem_addr_output_V;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (layer_mem_addr_weights_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (layer_mem_addr_weights_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (layer_mem_addr_weights_V_0_vld_reg == 1'b1)))) begin
        layer_mem_addr_weights_V_0_data_reg <= layer_mem_addr_weights_V;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (layer_relu_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (layer_relu_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (layer_relu_0_vld_reg == 1'b1)))) begin
        layer_relu_0_data_reg <= layer_relu;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (layer_stride_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (layer_stride_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (layer_stride_V_0_vld_reg == 1'b1)))) begin
        layer_stride_V_0_data_reg <= layer_stride_V;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (layer_width_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (layer_width_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (layer_width_V_0_vld_reg == 1'b1)))) begin
        layer_width_V_0_data_reg <= layer_width_V;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        loads_left_0_load_reg_2793 <= loads_left_0_fu_342;
        x_V_reg_2803 <= x_V_fu_1621_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_reg_2836_pp2_iter7_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        memorybus_addr_1_rea_reg_2851 <= memorybus_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_fu_1692_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        memorybus_addr_1_reg_2845 <= zext_ln138_fu_1717_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_1_reg_2816_pp1_iter7_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        memorybus_addr_2_rea_reg_2831 <= memorybus_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_1_fu_1641_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        memorybus_addr_2_reg_2825 <= zext_ln138_1_fu_1666_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln96_fu_1787_p2 == 1'd1) & (layer_global_pool_re_reg_2479 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
        memorybus_addr_3_reg_2948 <= zext_ln191_fu_1921_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state56) & (memorybus_RVALID == 1'b1))) begin
        memorybus_addr_4_rea_reg_2972 <= memorybus_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_2_fu_1931_p2 == 1'd0) & (icmp_ln887_3_reg_2939 == 1'd0) & (1'b1 == ap_CS_fsm_state48))) begin
        memorybus_addr_4_reg_2962 <= zext_ln138_2_fu_1956_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln164_fu_2165_p2 == 1'd0) & (ret_V_11_reg_2968 == 1'd0) & (1'b1 == ap_CS_fsm_state66))) begin
        memorybus_addr_5_reg_3098 <= zext_ln174_fu_2279_p1;
        select_ln879_reg_3047 <= select_ln879_fu_2219_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln99_reg_2696_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        memorybus_addr_read_reg_2730 <= memorybus_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln99_fu_1453_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        memorybus_addr_reg_2700 <= zext_ln123_fu_1490_p1;
        rowID_V_reg_2706 <= rowID_V_fu_1533_p3;
        weightID_V_reg_2711 <= weightID_V_fu_1540_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        mul_ln92_reg_2882 <= mul_ln92_fu_1747_p2;
        zext_ln209_7_reg_2877[9 : 0] <= zext_ln209_7_fu_1738_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state145)) begin
        new_ch_reg_3196 <= grp_fu_1046_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        raw_reg_3120 <= OutputCache_OBRAM_q0;
        weight_1_reg_3125 <= weight_1_fu_2390_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln96_fu_1787_p2 == 1'd1) & (layer_global_pool_re_reg_2479 == 1'd1) & (1'b1 == ap_CS_fsm_state47)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        reg_1141 <= MemoryController_ch_1_fu_354;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state140) | ((icmp_ln188_reg_3201_pp3_iter1_reg == 1'd0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        reg_1145 <= GPoolCache_GBRAM_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((memorybus_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state132))) begin
        result_reg_3184 <= result_fu_2416_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state48) & ((icmp_ln68_2_fu_1931_p2 == 1'd1) | (icmp_ln887_3_reg_2939 == 1'd1)))) begin
        ret_V_11_reg_2968 <= ret_V_11_fu_1980_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln99_fu_1453_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln126_1_reg_2720 <= select_ln126_1_fu_1572_p3;
        select_ln126_reg_2715 <= select_ln126_fu_1564_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ProcessingElement_r_1_reg_3137) & (1'b1 == ap_CS_fsm_state94))) begin
        tmp_1_reg_3157 <= grp_fu_1071_p2;
        tmp_4_reg_3163 <= grp_fu_1076_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ProcessingElement_r_1_reg_3137) & (1'b1 == ap_CS_fsm_state76))) begin
        tmp_3_reg_3152 <= grp_fu_1056_p1;
        tmp_reg_3147 <= grp_fu_1053_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ProcessingElement_r_1_reg_3137) & (1'b1 == ap_CS_fsm_state99))) begin
        tmp_5_reg_3169 <= grp_fu_1059_p2;
        tmp_6_reg_3174 <= grp_fu_1063_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ProcessingElement_r_1_reg_3137) & (1'b1 == ap_CS_fsm_state130))) begin
        tmp_7_reg_3179 <= grp_fu_1067_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln879_2_reg_2609 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        trunc_ln214_reg_2686 <= trunc_ln214_fu_1436_p1;
        trunc_ln215_reg_2676 <= trunc_ln215_fu_1428_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln879_2_reg_2609 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        trunc_ln321_reg_2681 <= trunc_ln321_fu_1432_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (weights_offset_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (weights_offset_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (weights_offset_0_vld_reg == 1'b1)))) begin
        weights_offset_0_data_reg <= weights_offset;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        zext_ln544_7_reg_3109[9 : 0] <= zext_ln544_7_fu_2302_p1[9 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        GPoolCache_GBRAM_address0 = zext_ln544_6_fu_2439_p1;
    end else if ((1'b1 == ap_CS_fsm_state146)) begin
        GPoolCache_GBRAM_address0 = GPoolCache_GBRAM_ad_1_reg_3191;
    end else if (((icmp_ln178_reg_2995 == 1'd1) & (layer_global_pool_re_reg_2479 == 1'd1) & (1'b1 == ap_CS_fsm_state138))) begin
        GPoolCache_GBRAM_address0 = GPoolCache_GBRAM_ad_gep_fu_809_p3;
    end else if (((layer_global_pool_re_reg_2479 == 1'd1) & (icmp_ln178_reg_2995 == 1'd0) & (1'b1 == ap_CS_fsm_state138))) begin
        GPoolCache_GBRAM_address0 = zext_ln544_7_reg_3109;
    end else begin
        GPoolCache_GBRAM_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state139) | (1'b1 == ap_CS_fsm_state146) | (1'b1 == ap_CS_fsm_state140) | ((icmp_ln178_reg_2995 == 1'd1) & (layer_global_pool_re_reg_2479 == 1'd1) & (1'b1 == ap_CS_fsm_state138) & (memorybus_BVALID == 1'b1)) | ((layer_global_pool_re_reg_2479 == 1'd1) & (icmp_ln178_reg_2995 == 1'd0) & (1'b1 == ap_CS_fsm_state138) & (memorybus_BVALID == 1'b1)) | ((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        GPoolCache_GBRAM_ce0 = 1'b1;
    end else begin
        GPoolCache_GBRAM_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state146)) begin
        GPoolCache_GBRAM_d0 = new_ch_reg_3196;
    end else if (((icmp_ln178_reg_2995 == 1'd1) & (layer_global_pool_re_reg_2479 == 1'd1) & (1'b1 == ap_CS_fsm_state138))) begin
        GPoolCache_GBRAM_d0 = result_reg_3184;
    end else begin
        GPoolCache_GBRAM_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((layer_global_pool_re_reg_2479 == 1'd1) & (icmp_ln178_reg_2995 == 1'd0) & (1'b1 == ap_CS_fsm_state146)) | ((icmp_ln178_reg_2995 == 1'd1) & (layer_global_pool_re_reg_2479 == 1'd1) & (1'b1 == ap_CS_fsm_state138) & (memorybus_BVALID == 1'b1)))) begin
        GPoolCache_GBRAM_we0 = 1'b1;
    end else begin
        GPoolCache_GBRAM_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        ImageCache_IBRAM_address1 = zext_ln544_11_fu_1991_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter10 == 1'b1))) begin
        ImageCache_IBRAM_address1 = zext_ln544_fu_1733_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter10 == 1'b1))) begin
        ImageCache_IBRAM_address1 = zext_ln544_10_fu_1682_p1;
    end else begin
        ImageCache_IBRAM_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        ImageCache_IBRAM_ce0 = grp_processInputChannel_s_fu_1003_ImageCache_IBRAM_ce0;
    end else begin
        ImageCache_IBRAM_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state58) | ((ap_enable_reg_pp2_iter10 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp1_iter10 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        ImageCache_IBRAM_ce1 = 1'b1;
    end else begin
        ImageCache_IBRAM_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        ImageCache_IBRAM_d1 = grp_reg_float_s_fu_1985_ap_return;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter10 == 1'b1))) begin
        ImageCache_IBRAM_d1 = grp_reg_float_s_fu_1727_ap_return;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter10 == 1'b1))) begin
        ImageCache_IBRAM_d1 = grp_reg_float_s_fu_1676_ap_return;
    end else begin
        ImageCache_IBRAM_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state58) | ((icmp_ln68_reg_2836_pp2_iter9_reg == 1'd0) & (ap_enable_reg_pp2_iter10 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((icmp_ln68_1_reg_2816_pp1_iter9_reg == 1'd0) & (ap_enable_reg_pp1_iter10 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        ImageCache_IBRAM_we1 = 1'b1;
    end else begin
        ImageCache_IBRAM_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        OutputCache_OBRAM_address0 = zext_ln544_7_fu_2302_p1;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        OutputCache_OBRAM_address0 = grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_address0;
    end else begin
        OutputCache_OBRAM_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state67))) begin
        OutputCache_OBRAM_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        OutputCache_OBRAM_ce0 = grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_ce0;
    end else begin
        OutputCache_OBRAM_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        OutputCache_OBRAM_ce1 = grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_ce1;
    end else begin
        OutputCache_OBRAM_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        OutputCache_OBRAM_we0 = grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_we0;
    end else begin
        OutputCache_OBRAM_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        OutputCache_OBRAM_we1 = grp_processInputChannel_s_fu_1003_OutputCache_OBRAM_we1;
    end else begin
        OutputCache_OBRAM_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state157) | (1'b1 == ap_CS_fsm_state2))) begin
        SHARED_DRAM_0_ack_out = 1'b1;
    end else begin
        SHARED_DRAM_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        WBRAM_0_0_0_address0 = zext_ln544_8_fu_2235_p1;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        WBRAM_0_0_0_address0 = grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_address0;
    end else begin
        WBRAM_0_0_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66))) begin
        WBRAM_0_0_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        WBRAM_0_0_0_ce0 = grp_processInputChannel_s_fu_1003_WBRAM_0_0_0_ce0;
    end else begin
        WBRAM_0_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((bias_or_1x1_reg_2628 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (weightID_V_reg_2711_pp0_iter4_reg == 3'd0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((bias_or_1x1_reg_2628 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (t_V_6_reg_859_pp0_iter4_reg == 4'd0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        WBRAM_0_0_0_ce1 = 1'b1;
    end else begin
        WBRAM_0_0_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((bias_or_1x1_reg_2628 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (weightID_V_reg_2711_pp0_iter4_reg == 3'd0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((bias_or_1x1_reg_2628 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (t_V_6_reg_859_pp0_iter4_reg == 4'd0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        WBRAM_0_0_0_we1 = 1'b1;
    end else begin
        WBRAM_0_0_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        WBRAM_0_0_1_address0 = zext_ln544_8_fu_2235_p1;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        WBRAM_0_0_1_address0 = grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_address0;
    end else begin
        WBRAM_0_0_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66))) begin
        WBRAM_0_0_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        WBRAM_0_0_1_ce0 = grp_processInputChannel_s_fu_1003_WBRAM_0_0_1_ce0;
    end else begin
        WBRAM_0_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((bias_or_1x1_reg_2628 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (weightID_V_reg_2711_pp0_iter4_reg == 3'd1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((bias_or_1x1_reg_2628 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (t_V_6_reg_859_pp0_iter4_reg == 4'd1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        WBRAM_0_0_1_ce1 = 1'b1;
    end else begin
        WBRAM_0_0_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((bias_or_1x1_reg_2628 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (weightID_V_reg_2711_pp0_iter4_reg == 3'd1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((bias_or_1x1_reg_2628 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (t_V_6_reg_859_pp0_iter4_reg == 4'd1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        WBRAM_0_0_1_we1 = 1'b1;
    end else begin
        WBRAM_0_0_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        WBRAM_0_0_2_address0 = zext_ln544_8_fu_2235_p1;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        WBRAM_0_0_2_address0 = grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_address0;
    end else begin
        WBRAM_0_0_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66))) begin
        WBRAM_0_0_2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        WBRAM_0_0_2_ce0 = grp_processInputChannel_s_fu_1003_WBRAM_0_0_2_ce0;
    end else begin
        WBRAM_0_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((bias_or_1x1_reg_2628 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (weightID_V_reg_2711_pp0_iter4_reg == 3'd2) & (1'b0 == ap_block_pp0_stage0_11001)) | ((bias_or_1x1_reg_2628 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (t_V_6_reg_859_pp0_iter4_reg == 4'd2) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        WBRAM_0_0_2_ce1 = 1'b1;
    end else begin
        WBRAM_0_0_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((bias_or_1x1_reg_2628 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (weightID_V_reg_2711_pp0_iter4_reg == 3'd2) & (1'b0 == ap_block_pp0_stage0_11001)) | ((bias_or_1x1_reg_2628 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (t_V_6_reg_859_pp0_iter4_reg == 4'd2) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        WBRAM_0_0_2_we1 = 1'b1;
    end else begin
        WBRAM_0_0_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        WBRAM_0_0_3_address0 = zext_ln544_8_fu_2235_p1;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        WBRAM_0_0_3_address0 = grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_address0;
    end else begin
        WBRAM_0_0_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66))) begin
        WBRAM_0_0_3_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        WBRAM_0_0_3_ce0 = grp_processInputChannel_s_fu_1003_WBRAM_0_0_3_ce0;
    end else begin
        WBRAM_0_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((bias_or_1x1_reg_2628 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (weightID_V_reg_2711_pp0_iter4_reg == 3'd3) & (1'b0 == ap_block_pp0_stage0_11001)) | ((bias_or_1x1_reg_2628 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (t_V_6_reg_859_pp0_iter4_reg == 4'd3) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        WBRAM_0_0_3_ce1 = 1'b1;
    end else begin
        WBRAM_0_0_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((bias_or_1x1_reg_2628 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (weightID_V_reg_2711_pp0_iter4_reg == 3'd3) & (1'b0 == ap_block_pp0_stage0_11001)) | ((bias_or_1x1_reg_2628 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (t_V_6_reg_859_pp0_iter4_reg == 4'd3) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        WBRAM_0_0_3_we1 = 1'b1;
    end else begin
        WBRAM_0_0_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        WBRAM_0_0_4_address0 = zext_ln544_8_fu_2235_p1;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        WBRAM_0_0_4_address0 = grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_address0;
    end else begin
        WBRAM_0_0_4_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66))) begin
        WBRAM_0_0_4_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        WBRAM_0_0_4_ce0 = grp_processInputChannel_s_fu_1003_WBRAM_0_0_4_ce0;
    end else begin
        WBRAM_0_0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((bias_or_1x1_reg_2628 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (weightID_V_reg_2711_pp0_iter4_reg == 3'd4) & (1'b0 == ap_block_pp0_stage0_11001)) | ((bias_or_1x1_reg_2628 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (t_V_6_reg_859_pp0_iter4_reg == 4'd4) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        WBRAM_0_0_4_ce1 = 1'b1;
    end else begin
        WBRAM_0_0_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((bias_or_1x1_reg_2628 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (weightID_V_reg_2711_pp0_iter4_reg == 3'd4) & (1'b0 == ap_block_pp0_stage0_11001)) | ((bias_or_1x1_reg_2628 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (t_V_6_reg_859_pp0_iter4_reg == 4'd4) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        WBRAM_0_0_4_we1 = 1'b1;
    end else begin
        WBRAM_0_0_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        WBRAM_0_0_5_address0 = zext_ln544_8_fu_2235_p1;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        WBRAM_0_0_5_address0 = grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_address0;
    end else begin
        WBRAM_0_0_5_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66))) begin
        WBRAM_0_0_5_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        WBRAM_0_0_5_ce0 = grp_processInputChannel_s_fu_1003_WBRAM_0_0_5_ce0;
    end else begin
        WBRAM_0_0_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((bias_or_1x1_reg_2628 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (weightID_V_reg_2711_pp0_iter4_reg == 3'd5) & (1'b0 == ap_block_pp0_stage0_11001)) | ((bias_or_1x1_reg_2628 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (t_V_6_reg_859_pp0_iter4_reg == 4'd5) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        WBRAM_0_0_5_ce1 = 1'b1;
    end else begin
        WBRAM_0_0_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((bias_or_1x1_reg_2628 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (weightID_V_reg_2711_pp0_iter4_reg == 3'd5) & (1'b0 == ap_block_pp0_stage0_11001)) | ((bias_or_1x1_reg_2628 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (t_V_6_reg_859_pp0_iter4_reg == 4'd5) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        WBRAM_0_0_5_we1 = 1'b1;
    end else begin
        WBRAM_0_0_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        WBRAM_0_0_6_address0 = zext_ln544_8_fu_2235_p1;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        WBRAM_0_0_6_address0 = grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_address0;
    end else begin
        WBRAM_0_0_6_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66))) begin
        WBRAM_0_0_6_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        WBRAM_0_0_6_ce0 = grp_processInputChannel_s_fu_1003_WBRAM_0_0_6_ce0;
    end else begin
        WBRAM_0_0_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((bias_or_1x1_reg_2628 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (weightID_V_reg_2711_pp0_iter4_reg == 3'd6) & (1'b0 == ap_block_pp0_stage0_11001)) | ((bias_or_1x1_reg_2628 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (t_V_6_reg_859_pp0_iter4_reg == 4'd6) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        WBRAM_0_0_6_ce1 = 1'b1;
    end else begin
        WBRAM_0_0_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((bias_or_1x1_reg_2628 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (weightID_V_reg_2711_pp0_iter4_reg == 3'd6) & (1'b0 == ap_block_pp0_stage0_11001)) | ((bias_or_1x1_reg_2628 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (t_V_6_reg_859_pp0_iter4_reg == 4'd6) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        WBRAM_0_0_6_we1 = 1'b1;
    end else begin
        WBRAM_0_0_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        WBRAM_0_0_7_address0 = zext_ln544_8_fu_2235_p1;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        WBRAM_0_0_7_address0 = grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_address0;
    end else begin
        WBRAM_0_0_7_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66))) begin
        WBRAM_0_0_7_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        WBRAM_0_0_7_ce0 = grp_processInputChannel_s_fu_1003_WBRAM_0_0_7_ce0;
    end else begin
        WBRAM_0_0_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((bias_or_1x1_reg_2628 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (weightID_V_reg_2711_pp0_iter4_reg == 3'd7) & (1'b0 == ap_block_pp0_stage0_11001)) | ((bias_or_1x1_reg_2628 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (t_V_6_reg_859_pp0_iter4_reg == 4'd7) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        WBRAM_0_0_7_ce1 = 1'b1;
    end else begin
        WBRAM_0_0_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((bias_or_1x1_reg_2628 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (weightID_V_reg_2711_pp0_iter4_reg == 3'd7) & (1'b0 == ap_block_pp0_stage0_11001)) | ((bias_or_1x1_reg_2628 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (t_V_6_reg_859_pp0_iter4_reg == 4'd7) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        WBRAM_0_0_7_we1 = 1'b1;
    end else begin
        WBRAM_0_0_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        WBRAM_0_0_8_ce0 = grp_processInputChannel_s_fu_1003_WBRAM_0_0_8_ce0;
    end else begin
        WBRAM_0_0_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        WBRAM_0_0_8_ce1 = 1'b1;
    end else begin
        WBRAM_0_0_8_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~(t_V_6_reg_859_pp0_iter4_reg == 4'd0) & ~(t_V_6_reg_859_pp0_iter4_reg == 4'd1) & ~(t_V_6_reg_859_pp0_iter4_reg == 4'd2) & ~(t_V_6_reg_859_pp0_iter4_reg == 4'd3) & ~(t_V_6_reg_859_pp0_iter4_reg == 4'd4) & ~(t_V_6_reg_859_pp0_iter4_reg == 4'd5) & ~(t_V_6_reg_859_pp0_iter4_reg == 4'd6) & ~(t_V_6_reg_859_pp0_iter4_reg == 4'd7) & (bias_or_1x1_reg_2628 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        WBRAM_0_0_8_we1 = 1'b1;
    end else begin
        WBRAM_0_0_8_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln99_fu_1453_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln68_1_fu_1641_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state23 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state23 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln68_fu_1692_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state35 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state35 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln188_fu_2427_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state148 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state148 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state157)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter8 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter10 == 1'b0) & (ap_enable_reg_pp1_iter9 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter8 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter10 == 1'b0) & (ap_enable_reg_pp2_iter9 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter3 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln99_reg_2696 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_empty_24_phi_fu_875_p4 = select_ln126_1_reg_2720;
    end else begin
        ap_phi_mux_empty_24_phi_fu_875_p4 = empty_24_reg_871;
    end
end

always @ (*) begin
    if (((icmp_ln887_1_reg_2812 == 1'd0) & (1'b1 == ap_CS_fsm_state46))) begin
        ap_phi_mux_loads_left_2_phi_fu_918_p4 = grp_fu_1130_p2;
    end else begin
        ap_phi_mux_loads_left_2_phi_fu_918_p4 = loads_left_2_reg_915;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln99_reg_2696 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_t_V_6_phi_fu_863_p4 = select_ln126_reg_2715;
    end else begin
        ap_phi_mux_t_V_6_phi_fu_863_p4 = t_V_6_reg_859;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln99_reg_2696 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_t_V_phi_fu_851_p4 = add_ln700_reg_2725;
    end else begin
        ap_phi_mux_t_V_phi_fu_851_p4 = t_V_reg_848;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state157)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state141)) begin
        grp_fu_1046_p0 = reg_1145;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        grp_fu_1046_p0 = raw_reg_3120;
    end else begin
        grp_fu_1046_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state141)) begin
        grp_fu_1046_p1 = result_reg_3184;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        grp_fu_1046_p1 = weight_1_reg_3125;
    end else begin
        grp_fu_1046_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state131) | ((memorybus_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state132)))) begin
        grp_fu_1050_ce = 1'b1;
    end else begin
        grp_fu_1050_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state60_on_subcall_done) & (1'b1 == ap_CS_fsm_state60))) begin
        grp_processInputChannel_s_fu_1003_ap_continue = 1'b1;
    end else begin
        grp_processInputChannel_s_fu_1003_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp347)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001_ignoreCallOp343)))) begin
        grp_reg_float_s_fu_1586_ap_ce = 1'b1;
    end else begin
        grp_reg_float_s_fu_1586_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001_ignoreCallOp451))) begin
        grp_reg_float_s_fu_1676_ap_ce = 1'b1;
    end else begin
        grp_reg_float_s_fu_1676_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001_ignoreCallOp494))) begin
        grp_reg_float_s_fu_1727_ap_ce = 1'b1;
    end else begin
        grp_reg_float_s_fu_1727_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57))) begin
        grp_reg_float_s_fu_1985_ap_ce = 1'b1;
    end else begin
        grp_reg_float_s_fu_1985_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state157) | (1'b1 == ap_CS_fsm_state2))) begin
        input_offset_0_ack_out = 1'b1;
    end else begin
        input_offset_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state157) | (1'b1 == ap_CS_fsm_state2))) begin
        layer_channels_in_V_0_ack_out = 1'b1;
    end else begin
        layer_channels_in_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state157) | (1'b1 == ap_CS_fsm_state2))) begin
        layer_channels_out_V_0_ack_out = 1'b1;
    end else begin
        layer_channels_out_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state157) | (1'b1 == ap_CS_fsm_state2))) begin
        layer_global_pool_0_ack_out = 1'b1;
    end else begin
        layer_global_pool_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state157) | (1'b1 == ap_CS_fsm_state2))) begin
        layer_height_V_0_ack_out = 1'b1;
    end else begin
        layer_height_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state157) | (1'b1 == ap_CS_fsm_state2))) begin
        layer_is_first_split_layer_0_ack_out = 1'b1;
    end else begin
        layer_is_first_split_layer_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state157) | (1'b1 == ap_CS_fsm_state2))) begin
        layer_is_second_split_layer_0_ack_out = 1'b1;
    end else begin
        layer_is_second_split_layer_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state157) | (1'b1 == ap_CS_fsm_state2))) begin
        layer_kernel_V_0_ack_out = 1'b1;
    end else begin
        layer_kernel_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state157) | (1'b1 == ap_CS_fsm_state2))) begin
        layer_mem_addr_input_V_0_ack_out = 1'b1;
    end else begin
        layer_mem_addr_input_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state157) | (1'b1 == ap_CS_fsm_state2))) begin
        layer_mem_addr_output_V_0_ack_out = 1'b1;
    end else begin
        layer_mem_addr_output_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state157) | (1'b1 == ap_CS_fsm_state2))) begin
        layer_mem_addr_weights_V_0_ack_out = 1'b1;
    end else begin
        layer_mem_addr_weights_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state157) | (1'b1 == ap_CS_fsm_state2))) begin
        layer_relu_0_ack_out = 1'b1;
    end else begin
        layer_relu_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state157) | (1'b1 == ap_CS_fsm_state2))) begin
        layer_stride_V_0_ack_out = 1'b1;
    end else begin
        layer_stride_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state157) | (1'b1 == ap_CS_fsm_state2))) begin
        layer_width_V_0_ack_out = 1'b1;
    end else begin
        layer_width_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state49) & (memorybus_ARREADY == 1'b1))) begin
        memorybus_ARADDR = memorybus_addr_4_reg_2962;
    end else if (((icmp_ln68_reg_2836 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        memorybus_ARADDR = memorybus_addr_1_reg_2845;
    end else if (((icmp_ln68_1_reg_2816 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        memorybus_ARADDR = memorybus_addr_2_reg_2825;
    end else if (((icmp_ln99_reg_2696 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        memorybus_ARADDR = memorybus_addr_reg_2700;
    end else begin
        memorybus_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state49) & (memorybus_ARREADY == 1'b1)) | ((icmp_ln68_reg_2836 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((icmp_ln68_1_reg_2816 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((icmp_ln99_reg_2696 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        memorybus_ARVALID = 1'b1;
    end else begin
        memorybus_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((memorybus_AWREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state147)) begin
            memorybus_AWADDR = memorybus_addr_3_reg_2948;
        end else if ((1'b1 == ap_CS_fsm_state132)) begin
            memorybus_AWADDR = memorybus_addr_5_reg_3098;
        end else begin
            memorybus_AWADDR = 'bx;
        end
    end else begin
        memorybus_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((memorybus_AWREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state147)) begin
            memorybus_AWLEN = empty_36_fu_2422_p1;
        end else if ((1'b1 == ap_CS_fsm_state132)) begin
            memorybus_AWLEN = 32'd1;
        end else begin
            memorybus_AWLEN = 'bx;
        end
    end else begin
        memorybus_AWLEN = 'bx;
    end
end

always @ (*) begin
    if ((((memorybus_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state147)) | ((memorybus_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state132)))) begin
        memorybus_AWVALID = 1'b1;
    end else begin
        memorybus_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~((memorybus_BVALID == 1'b0) & (ap_predicate_op904_writeresp_state156 == 1'b1)) & (1'b1 == ap_CS_fsm_state156) & (ap_predicate_op904_writeresp_state156 == 1'b1)) | ((1'b1 == ap_CS_fsm_state138) & (memorybus_BVALID == 1'b1)))) begin
        memorybus_BREADY = 1'b1;
    end else begin
        memorybus_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state56) & (memorybus_RVALID == 1'b1)) | ((icmp_ln68_reg_2836_pp2_iter7_reg == 1'd0) & (ap_enable_reg_pp2_iter8 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((icmp_ln68_1_reg_2816_pp1_iter7_reg == 1'd0) & (ap_enable_reg_pp1_iter8 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((icmp_ln99_reg_2696_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        memorybus_RREADY = 1'b1;
    end else begin
        memorybus_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln188_reg_3201_pp3_iter2_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_01001) & (ap_enable_reg_pp3_iter3 == 1'b1))) begin
        memorybus_WDATA = reg_1145;
    end else if ((1'b1 == ap_CS_fsm_state133)) begin
        memorybus_WDATA = result_reg_3184;
    end else begin
        memorybus_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln188_reg_3201_pp3_iter2_reg == 1'd0) & (ap_enable_reg_pp3_iter3 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001)) | ((1'b1 == ap_CS_fsm_state133) & (memorybus_WREADY == 1'b1)))) begin
        memorybus_WVALID = 1'b1;
    end else begin
        memorybus_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state49) | ((1'b0 == ap_block_pp2_stage0) & (icmp_ln68_reg_2836 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0) & (icmp_ln68_1_reg_2816 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage1) & (icmp_ln99_reg_2696 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        memorybus_blk_n_AR = m_axi_memorybus_ARREADY;
    end else begin
        memorybus_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state147) | (1'b1 == ap_CS_fsm_state132))) begin
        memorybus_blk_n_AW = m_axi_memorybus_AWREADY;
    end else begin
        memorybus_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state138) | ((layer_global_pool_re_reg_2479 == 1'd1) & (icmp_ln191_reg_3215 == 1'd0) & (1'b1 == ap_CS_fsm_state156)))) begin
        memorybus_blk_n_B = m_axi_memorybus_BVALID;
    end else begin
        memorybus_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state56) | ((1'b0 == ap_block_pp2_stage0) & (icmp_ln68_reg_2836_pp2_iter7_reg == 1'd0) & (ap_enable_reg_pp2_iter8 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0) & (icmp_ln68_1_reg_2816_pp1_iter7_reg == 1'd0) & (ap_enable_reg_pp1_iter8 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (icmp_ln99_reg_2696_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        memorybus_blk_n_R = m_axi_memorybus_RVALID;
    end else begin
        memorybus_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state133) | ((1'b0 == ap_block_pp3_stage0) & (icmp_ln188_reg_3201_pp3_iter2_reg == 1'd0) & (ap_enable_reg_pp3_iter3 == 1'b1)))) begin
        memorybus_blk_n_W = m_axi_memorybus_WREADY;
    end else begin
        memorybus_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state157) | (1'b1 == ap_CS_fsm_state2))) begin
        weights_offset_0_ack_out = 1'b1;
    end else begin
        weights_offset_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln887_fu_1350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln99_fu_1453_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln99_fu_1453_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter4 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter4 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state22 : begin
            if (((icmp_ln90_fu_1616_p2 == 1'd1) & (grp_fu_1081_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((grp_fu_1081_p2 == 1'd1) & (icmp_ln90_fu_1616_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else if (((grp_fu_1081_p2 == 1'd0) & (icmp_ln90_fu_1616_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln68_1_fu_1641_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter10 == 1'b1) & (ap_enable_reg_pp1_iter9 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter10 == 1'b1) & (ap_enable_reg_pp1_iter9 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((icmp_ln68_1_fu_1641_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((icmp_ln68_fu_1692_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter10 == 1'b1) & (ap_enable_reg_pp2_iter9 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter10 == 1'b1) & (ap_enable_reg_pp2_iter9 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((icmp_ln68_fu_1692_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            if (((icmp_ln96_fu_1787_p2 == 1'd1) & (layer_global_pool_re_reg_2479 == 1'd0) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state156;
            end else if (((icmp_ln96_fu_1787_p2 == 1'd1) & (layer_global_pool_re_reg_2479 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state147;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state48 : begin
            if (((1'b1 == ap_CS_fsm_state48) & (((icmp_ln887_3_reg_2939 == 1'd1) & (ret_V_11_fu_1980_p2 == 1'd0)) | ((icmp_ln68_2_fu_1931_p2 == 1'd1) & (ret_V_11_fu_1980_p2 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else if (((1'b1 == ap_CS_fsm_state48) & (((ret_V_11_fu_1980_p2 == 1'd1) & (icmp_ln887_3_reg_2939 == 1'd1)) | ((ret_V_11_fu_1980_p2 == 1'd1) & (icmp_ln68_2_fu_1931_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state49 : begin
            if (((1'b1 == ap_CS_fsm_state49) & (memorybus_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            if (((1'b1 == ap_CS_fsm_state56) & (memorybus_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state59 : begin
            if (((icmp_ln130_fu_2015_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_state60 : begin
            if (((1'b0 == ap_block_state60_on_subcall_done) & (1'b1 == ap_CS_fsm_state60))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            if (((1'b1 == ap_CS_fsm_state66) & ((icmp_ln164_fu_2165_p2 == 1'd1) | (ret_V_11_reg_2968 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            if (((memorybus_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state132))) begin
                ap_NS_fsm = ap_ST_fsm_state133;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state132;
            end
        end
        ap_ST_fsm_state133 : begin
            if (((1'b1 == ap_CS_fsm_state133) & (memorybus_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state134;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state133;
            end
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            if (((layer_global_pool_re_reg_2479 == 1'd1) & (icmp_ln178_reg_2995 == 1'd0) & (1'b1 == ap_CS_fsm_state138) & (memorybus_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state139;
            end else if (((1'b1 == ap_CS_fsm_state138) & (memorybus_BVALID == 1'b1) & ((icmp_ln178_reg_2995 == 1'd1) | (layer_global_pool_re_reg_2479 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state146;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state147 : begin
            if (((memorybus_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state147))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state147;
            end
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((icmp_ln188_fu_2427_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone)) & ~((ap_enable_reg_pp3_iter3 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((ap_enable_reg_pp3_iter3 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter2 == 1'b0)) | ((icmp_ln188_fu_2427_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state152;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state152 : begin
            if (((icmp_ln191_fu_2444_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state152))) begin
                ap_NS_fsm = ap_ST_fsm_state156;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state153;
            end
        end
        ap_ST_fsm_state153 : begin
            ap_NS_fsm = ap_ST_fsm_state154;
        end
        ap_ST_fsm_state154 : begin
            ap_NS_fsm = ap_ST_fsm_state155;
        end
        ap_ST_fsm_state155 : begin
            ap_NS_fsm = ap_ST_fsm_state156;
        end
        ap_ST_fsm_state156 : begin
            if ((~((memorybus_BVALID == 1'b0) & (ap_predicate_op904_writeresp_state156 == 1'b1)) & (1'b1 == ap_CS_fsm_state156))) begin
                ap_NS_fsm = ap_ST_fsm_state157;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state156;
            end
        end
        ap_ST_fsm_state157 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign GPoolCache_GBRAM_ad_gep_fu_809_p3 = zext_ln544_7_reg_3109;

assign MAX_ADDR_V_1_fu_1890_p2 = ($signed(16'd65535) + $signed(shl_ln214_1_fu_1884_p2));

assign MAX_ADDR_V_fu_1402_p2 = ($signed(16'd65535) + $signed(shl_ln214_fu_1397_p2));

assign WBRAM_0_0_0_address1 = zext_ln544_2_fu_1600_p1;

assign WBRAM_0_0_1_address1 = zext_ln544_2_fu_1600_p1;

assign WBRAM_0_0_2_address1 = zext_ln544_2_fu_1600_p1;

assign WBRAM_0_0_3_address1 = zext_ln544_2_fu_1600_p1;

assign WBRAM_0_0_4_address1 = zext_ln544_2_fu_1600_p1;

assign WBRAM_0_0_5_address1 = zext_ln544_2_fu_1600_p1;

assign WBRAM_0_0_6_address1 = zext_ln544_2_fu_1600_p1;

assign WBRAM_0_0_7_address1 = zext_ln544_2_fu_1600_p1;

assign WBRAM_0_0_8_address1 = zext_ln544_2_fu_1600_p1;

assign add_ln123_fu_1485_p2 = (p_cast_reg_2559 + ret_V_2_fu_1480_p2);

assign add_ln1352_fu_1332_p2 = (zext_ln1352_1_fu_1328_p1 + lhs_V_fu_1318_p1);

assign add_ln1353_9_fu_2259_p2 = (zext_ln215_9_fu_2251_p1 + zext_ln1353_5_fu_2255_p1);

assign add_ln1353_fu_1470_p2 = (zext_ln215_3_fu_1462_p1 + zext_ln1353_3_fu_1466_p1);

assign add_ln138_1_fu_1661_p2 = (ret_V_5_fu_1656_p2 + p_cast_reg_2559);

assign add_ln138_2_fu_1951_p2 = (ret_V_7_fu_1946_p2 + p_cast_reg_2559);

assign add_ln138_fu_1712_p2 = (ret_V_4_fu_1707_p2 + p_cast_reg_2559);

assign add_ln174_fu_2274_p2 = (p_cast_reg_2559 + ret_V_14_fu_2269_p2);

assign add_ln191_fu_1916_p2 = (ret_V_6_fu_1911_p2 + p_cast_reg_2559);

assign add_ln214_1_fu_1528_p2 = (trunc_ln214_reg_2686 + trunc_ln214_2_fu_1524_p1);

assign add_ln214_3_fu_1630_p2 = (zext_ln1353_1_fu_1627_p1 + layer_mem_addr_input_reg_2473);

assign add_ln214_fu_2141_p2 = (px_offset_V_1_fu_2129_p3 + MemoryController_la_2);

assign add_ln321_1_fu_2195_p2 = (trunc_ln321_2_reg_3029 + t_V_14_reg_980);

assign add_ln321_fu_1509_p2 = (trunc_ln321_reg_2681 + ap_phi_mux_empty_24_phi_fu_875_p4);

assign add_ln700_12_fu_1811_p2 = (9'd1 + t_V_17_reg_935);

assign add_ln700_fu_1580_p2 = (19'd1 + t_V_reg_848);

assign add_ln96_fu_1792_p2 = (indvar_flatten_reg_924 + 18'd1);

assign add_ln99_fu_1444_p2 = (empty_23_fu_1440_p1 + ret_V_1_reg_2633);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd117];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state130 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state131 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state132 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state133 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state138 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state139 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state140 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state141 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state145 = ap_CS_fsm[32'd114];

assign ap_CS_fsm_state146 = ap_CS_fsm[32'd115];

assign ap_CS_fsm_state147 = ap_CS_fsm[32'd116];

assign ap_CS_fsm_state152 = ap_CS_fsm[32'd118];

assign ap_CS_fsm_state156 = ap_CS_fsm[32'd122];

assign ap_CS_fsm_state157 = ap_CS_fsm[32'd123];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd68];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln99_reg_2696_pp0_iter3_reg == 1'd0) & (memorybus_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp347 = ((icmp_ln99_reg_2696_pp0_iter3_reg == 1'd0) & (memorybus_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln99_reg_2696_pp0_iter3_reg == 1'd0) & (memorybus_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state10_io));
end

always @ (*) begin
    ap_block_pp0_stage1_11001_ignoreCallOp343 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state10_io));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state10_io));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((icmp_ln68_1_reg_2816_pp1_iter7_reg == 1'd0) & (memorybus_RVALID == 1'b0) & (ap_enable_reg_pp1_iter8 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_block_state24_io)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001_ignoreCallOp451 = (((icmp_ln68_1_reg_2816_pp1_iter7_reg == 1'd0) & (memorybus_RVALID == 1'b0) & (ap_enable_reg_pp1_iter8 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_block_state24_io)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((icmp_ln68_1_reg_2816_pp1_iter7_reg == 1'd0) & (memorybus_RVALID == 1'b0) & (ap_enable_reg_pp1_iter8 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_block_state24_io)));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = (((icmp_ln68_reg_2836_pp2_iter7_reg == 1'd0) & (memorybus_RVALID == 1'b0) & (ap_enable_reg_pp2_iter8 == 1'b1)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_block_state36_io)));
end

always @ (*) begin
    ap_block_pp2_stage0_11001_ignoreCallOp494 = (((icmp_ln68_reg_2836_pp2_iter7_reg == 1'd0) & (memorybus_RVALID == 1'b0) & (ap_enable_reg_pp2_iter8 == 1'b1)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_block_state36_io)));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = (((icmp_ln68_reg_2836_pp2_iter7_reg == 1'd0) & (memorybus_RVALID == 1'b0) & (ap_enable_reg_pp2_iter8 == 1'b1)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_block_state36_io)));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((ap_enable_reg_pp3_iter3 == 1'b1) & (1'b1 == ap_block_state151_io));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((ap_enable_reg_pp3_iter3 == 1'b1) & (1'b1 == ap_block_state151_io));
end

always @ (*) begin
    ap_block_state10_io = ((icmp_ln99_reg_2696 == 1'd0) & (memorybus_ARREADY == 1'b0));
end

assign ap_block_state10_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage1_iter0_ignore_call15 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter1_ignore_call15 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter1_ignore_call15 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter2_ignore_call15 = ~(1'b1 == 1'b1);

assign ap_block_state148_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state149_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter2_ignore_call15 = ~(1'b1 == 1'b1);

assign ap_block_state150_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state151_io = ((icmp_ln188_reg_3201_pp3_iter2_reg == 1'd0) & (memorybus_WREADY == 1'b0));
end

assign ap_block_state151_pp3_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state156 = ((memorybus_BVALID == 1'b0) & (ap_predicate_op904_writeresp_state156 == 1'b1));
end

assign ap_block_state15_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter3_ignore_call15 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage1_iter3_ignore_call15 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17_pp0_stage0_iter4 = ((icmp_ln99_reg_2696_pp0_iter3_reg == 1'd0) & (memorybus_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state17_pp0_stage0_iter4_ignore_call15 = ((icmp_ln99_reg_2696_pp0_iter3_reg == 1'd0) & (memorybus_RVALID == 1'b0));
end

assign ap_block_state18_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage1_iter4_ignore_call15 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter5_ignore_call15 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage1_iter5_ignore_call15 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage0_iter0_ignore_call13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state24_io = ((icmp_ln68_1_reg_2816 == 1'd0) & (memorybus_ARREADY == 1'b0));
end

assign ap_block_state24_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp1_stage0_iter1_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp1_stage0_iter2_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp1_stage0_iter3_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp1_stage0_iter4_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp1_stage0_iter5_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp1_stage0_iter6_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp1_stage0_iter7_ignore_call13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state31_pp1_stage0_iter8 = ((icmp_ln68_1_reg_2816_pp1_iter7_reg == 1'd0) & (memorybus_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state31_pp1_stage0_iter8_ignore_call13 = ((icmp_ln68_1_reg_2816_pp1_iter7_reg == 1'd0) & (memorybus_RVALID == 1'b0));
end

assign ap_block_state32_pp1_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp1_stage0_iter9_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp1_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp1_stage0_iter10_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp2_stage0_iter0_ignore_call13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state36_io = ((icmp_ln68_reg_2836 == 1'd0) & (memorybus_ARREADY == 1'b0));
end

assign ap_block_state36_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp2_stage0_iter1_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp2_stage0_iter2_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp2_stage0_iter3_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp2_stage0_iter4_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp2_stage0_iter5_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp2_stage0_iter6_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp2_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp2_stage0_iter7_ignore_call13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state43_pp2_stage0_iter8 = ((icmp_ln68_reg_2836_pp2_iter7_reg == 1'd0) & (memorybus_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state43_pp2_stage0_iter8_ignore_call13 = ((icmp_ln68_reg_2836_pp2_iter7_reg == 1'd0) & (memorybus_RVALID == 1'b0));
end

assign ap_block_state44_pp2_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp2_stage0_iter9_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp2_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp2_stage0_iter10_ignore_call13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state60_on_subcall_done = ((ap_sync_grp_processInputChannel_s_fu_1003_ap_ready & ap_sync_grp_processInputChannel_s_fu_1003_ap_done) == 1'b0);
end

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0_ignore_call15 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

always @ (*) begin
    ap_predicate_op904_writeresp_state156 = ((layer_global_pool_re_reg_2479 == 1'd1) & (icmp_ln191_reg_3215 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_processInputChannel_s_fu_1003_ap_done = (grp_processInputChannel_s_fu_1003_ap_done | ap_sync_reg_grp_processInputChannel_s_fu_1003_ap_done);

assign ap_sync_grp_processInputChannel_s_fu_1003_ap_ready = (grp_processInputChannel_s_fu_1003_ap_ready | ap_sync_reg_grp_processInputChannel_s_fu_1003_ap_ready);

assign bias_or_1x1_fu_1375_p2 = (icmp_ln879_reg_2589 | icmp_ln879_1_fu_1370_p2);

assign bitcast_ln204_fu_2402_p1 = biased_reg_3130;

assign ci_V_1_fu_1697_p2 = (t_V_5_reg_904 + 10'd1);

assign ci_V_2_fu_1646_p2 = (t_V_3_reg_893 + 10'd1);

assign ci_V_3_fu_1936_p2 = (t_V_11_reg_957 + 10'd1);

assign ci_V_4_fu_2020_p2 = (t_V_12_reg_968 + 10'd1);

assign ci_V_fu_1355_p2 = (t_V_1_reg_837 + 10'd1);

assign co_V_1_fu_2170_p2 = (t_V_14_reg_980 + 10'd1);

assign co_V_fu_1558_p2 = (ap_phi_mux_empty_24_phi_fu_875_p4 + 10'd1);

assign dram_addr_V_fu_1422_p2 = (empty_22_fu_1419_p1 + p_0137_0_i_reg_825);

assign empty_22_fu_1419_p1 = ret_V_1_reg_2633;

assign empty_23_fu_1440_p1 = p_0137_0_i_reg_825[13:0];

assign empty_36_fu_2422_p1 = reg_1141;

assign grp_fu_1056_p0 = xor_ln204_fu_2405_p2;

assign grp_fu_1081_p2 = ((loads_left_0_fu_342 < zext_ln887_1_reg_2646) ? 1'b1 : 1'b0);

assign grp_fu_1089_p2 = (MemoryController_la_3 + 23'd1);

assign grp_fu_1105_p2 = ((ImageCache_curr_img == MAX_ADDR_V_reg_2661) ? 1'b1 : 1'b0);

assign grp_fu_1110_p2 = (ImageCache_curr_img + 16'd1);

assign grp_fu_1116_p3 = ((grp_fu_1105_p2[0:0] === 1'b1) ? 16'd0 : grp_fu_1110_p2);

assign grp_fu_1130_p2 = (loads_left_0_load_reg_2793 - zext_ln887_1_reg_2646);

assign grp_fu_1286_p0 = grp_fu_1286_p00;

assign grp_fu_1286_p00 = mul_ln209_reg_2535;

assign grp_fu_1286_p1 = grp_fu_1286_p10;

assign grp_fu_1286_p10 = layer_height_V_read_reg_2516;

assign grp_fu_1365_p0 = zext_ln209_5_reg_2584;

assign grp_fu_1365_p1 = grp_fu_1365_p10;

assign grp_fu_1365_p10 = t_V_1_reg_837;

assign grp_fu_2034_p0 = grp_fu_2034_p00;

assign grp_fu_2034_p00 = MemoryController_wi;

assign grp_fu_2034_p1 = zext_ln887_3_reg_2919;

assign grp_fu_2090_p0 = grp_fu_2090_p00;

assign grp_fu_2090_p00 = xy_offset_V_reg_2990;

assign grp_fu_2090_p1 = grp_fu_2090_p10;

assign grp_fu_2090_p10 = MemoryController_ch;

assign grp_fu_2104_p0 = grp_fu_2104_p00;

assign grp_fu_2104_p00 = WeightsCache_ch_out;

assign grp_fu_2104_p1 = zext_ln209_7_reg_2877;

assign grp_processInputChannel_s_fu_1003_ap_start = grp_processInputChannel_s_fu_1003_ap_start_reg;

assign i_fu_2433_p2 = (i_op_assign_1_reg_992 + 10'd1);

assign icmp_ln107_fu_1798_p2 = ((ret_V_15_reg_946 == layer_width_V_read_reg_2522) ? 1'b1 : 1'b0);

assign icmp_ln130_fu_2015_p2 = ((t_V_12_reg_968 == layer_channels_in_V_s_reg_2504) ? 1'b1 : 1'b0);

assign icmp_ln164_fu_2165_p2 = ((t_V_14_reg_980 == layer_channels_out_V_1_reg_2494) ? 1'b1 : 1'b0);

assign icmp_ln178_fu_2073_p2 = ((or_ln178_fu_2068_p2 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln188_fu_2427_p2 = ((i_op_assign_1_reg_992 == MemoryController_ch_1_fu_354) ? 1'b1 : 1'b0);

assign icmp_ln191_fu_2444_p2 = ((reg_1141 == 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln217_1_fu_2320_p2 = ((select_ln879_reg_3047 == 3'd1) ? 1'b1 : 1'b0);

assign icmp_ln217_2_fu_2333_p2 = ((select_ln879_reg_3047 == 3'd2) ? 1'b1 : 1'b0);

assign icmp_ln217_3_fu_2346_p2 = ((select_ln879_reg_3047 == 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln217_4_fu_2359_p2 = ((select_ln879_reg_3047 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln217_5_fu_2372_p2 = ((select_ln879_reg_3047 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln217_6_fu_2385_p2 = ((select_ln879_reg_3047 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln217_fu_2307_p2 = ((select_ln879_reg_3047 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln68_1_fu_1641_p2 = ((t_V_3_reg_893 == layer_channels_in_V_s_reg_2504) ? 1'b1 : 1'b0);

assign icmp_ln68_2_fu_1931_p2 = ((t_V_11_reg_957 == ImageCache_ch_in_V_s_reg_2929) ? 1'b1 : 1'b0);

assign icmp_ln68_fu_1692_p2 = ((t_V_5_reg_904 == layer_channels_in_V_s_reg_2504) ? 1'b1 : 1'b0);

assign icmp_ln879_1_fu_1370_p2 = ((t_V_1_reg_837 == layer_channels_in_V_s_reg_2504) ? 1'b1 : 1'b0);

assign icmp_ln879_2_fu_1341_p2 = ((layer_kernel_V_read_reg_2488 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln879_3_fu_1553_p2 = ((weight_index_V_fu_1547_p2 == weights_per_filter_V_reg_2666) ? 1'b1 : 1'b0);

assign icmp_ln879_4_fu_1228_p2 = ((layer_stride_V_0_data_reg == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln879_5_fu_2180_p2 = ((WeightsCache_kernel == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln879_8_fu_1996_p2 = ((ImageCache_curr_img == MAX_ADDR_V_1_reg_2943) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_1313_p2 = ((layer_kernel_V_read_reg_2488 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln887_3_fu_1874_p2 = ((loads_left_4_fu_346 < zext_ln887_2_fu_1870_p1) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_1350_p2 = ((zext_ln887_fu_1346_p1 < ret_V_reg_2579) ? 1'b1 : 1'b0);

assign icmp_ln90_fu_1616_p2 = ((t_V_8_reg_882 == layer_width_V_read_reg_2522) ? 1'b1 : 1'b0);

assign icmp_ln96_fu_1787_p2 = ((indvar_flatten_reg_924 == mul_ln92_reg_2882) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_1453_p2 = ((trunc_ln99_fu_1449_p1 == add_ln99_reg_2691) ? 1'b1 : 1'b0);

assign is_split_layer_fu_2117_p2 = (MemoryController_is_1 | MemoryController_is);

assign lhs_V_1_fu_1338_p1 = weights_offset_read_reg_2468;

assign lhs_V_2_fu_1394_p1 = input_offset_read_reg_2463;

assign lhs_V_fu_1318_p1 = layer_channels_out_V_1_reg_2494;

assign lshr_ln_fu_1234_p4 = {{layer_width_V_0_data_reg[8:1]}};

assign mul_ln209_2_fu_2457_p0 = mul_ln209_2_fu_2457_p00;

assign mul_ln209_2_fu_2457_p00 = layer_channels_in_V_s_reg_2504;

assign mul_ln209_2_fu_2457_p1 = mul_ln209_2_fu_2457_p10;

assign mul_ln209_2_fu_2457_p10 = layer_width_V_read_reg_2522;

assign mul_ln209_fu_2450_p0 = mul_ln209_fu_2450_p00;

assign mul_ln209_fu_2450_p00 = layer_channels_in_V_0_data_reg;

assign mul_ln209_fu_2450_p1 = mul_ln209_fu_2450_p10;

assign mul_ln209_fu_2450_p10 = layer_width_V_0_data_reg;

assign mul_ln92_fu_1747_p0 = mul_ln92_fu_1747_p00;

assign mul_ln92_fu_1747_p00 = layer_width_V_read_reg_2522;

assign mul_ln92_fu_1747_p1 = mul_ln92_fu_1747_p10;

assign mul_ln92_fu_1747_p10 = layer_height_V_read_reg_2516;

assign mul_ln92_fu_1747_p2 = (mul_ln92_fu_1747_p0 * mul_ln92_fu_1747_p1);

assign or_ln178_fu_2068_p2 = (x_out_V_fu_2052_p3 | select_ln887_2_reg_2914);

assign p_cast_fu_1292_p1 = tmp_13_reg_2530;

assign px_offset_V_1_fu_2129_p3 = ((is_split_layer_fu_2117_p2[0:0] === 1'b1) ? shl_ln214_2_fu_2123_p2 : grp_fu_2090_p2);

assign result_fu_2416_p3 = ((ProcessingElement_r_1_reg_3137[0:0] === 1'b1) ? grp_fu_1050_p1 : biased_reg_3130);

assign ret_V_11_fu_1980_p2 = (ret_V_16_fu_1976_p2 & icmp_ln879_4_reg_2541);

assign ret_V_13_fu_2190_p2 = (trunc_ln215_1_reg_3024 + zext_ln1353_2_fu_2186_p1);

assign ret_V_14_fu_2269_p2 = (zext_ln1353_6_fu_2265_p1 + lhs_V_2_reg_2652);

assign ret_V_16_fu_1976_p2 = (trunc_ln887_reg_2909 | trunc_ln887_1_reg_2924);

assign ret_V_1_fu_1380_p3 = ((bias_or_1x1_fu_1375_p2[0:0] === 1'b1) ? lhs_V_reg_2594 : add_ln1352_reg_2599);

assign ret_V_2_fu_1480_p2 = (zext_ln1353_4_fu_1476_p1 + lhs_V_1_reg_2604);

assign ret_V_3_fu_1504_p2 = (trunc_ln215_reg_2676 + zext_ln1353_fu_1500_p1);

assign ret_V_4_fu_1707_p2 = (rhs_V_fu_1703_p1 + lhs_V_2_reg_2652);

assign ret_V_5_fu_1656_p2 = (rhs_V_1_fu_1652_p1 + lhs_V_2_reg_2652);

assign ret_V_6_fu_1911_p2 = (rhs_V_2_fu_1907_p1 + lhs_V_2_reg_2652);

assign ret_V_7_fu_1946_p2 = (rhs_V_3_fu_1942_p1 + lhs_V_2_reg_2652);

assign ret_V_fu_1304_p2 = (zext_ln215_fu_1301_p1 + 11'd1);

assign rhs_V_1_fu_1652_p1 = MemoryController_la_3;

assign rhs_V_2_fu_1907_p1 = split_offset_V_fu_1899_p3;

assign rhs_V_3_fu_1942_p1 = MemoryController_la_3;

assign rhs_V_fu_1703_p1 = MemoryController_la_3;

assign rowID_V_1_fu_2227_p3 = ((icmp_ln879_5_fu_2180_p2[0:0] === 1'b1) ? add_ln321_1_fu_2195_p2 : trunc_ln321_3_fu_2200_p4);

assign rowID_V_fu_1533_p3 = ((icmp_ln879_2_reg_2609[0:0] === 1'b1) ? add_ln321_fu_1509_p2 : trunc_ln321_1_fu_1514_p4);

assign select_ln101_fu_1248_p3 = ((icmp_ln879_4_fu_1228_p2[0:0] === 1'b1) ? zext_ln214_3_fu_1244_p1 : layer_width_V_0_data_reg);

assign select_ln126_1_fu_1572_p3 = ((icmp_ln879_3_fu_1553_p2[0:0] === 1'b1) ? co_V_fu_1558_p2 : ap_phi_mux_empty_24_phi_fu_875_p4);

assign select_ln126_fu_1564_p3 = ((icmp_ln879_3_fu_1553_p2[0:0] === 1'b1) ? 4'd0 : weight_index_V_fu_1547_p2);

assign select_ln152_1_fu_1843_p3 = ((icmp_ln879_4_reg_2541[0:0] === 1'b1) ? zext_ln152_1_fu_1839_p1 : add_ln700_12_fu_1811_p2);

assign select_ln217_1_fu_2325_p3 = ((icmp_ln217_1_fu_2320_p2[0:0] === 1'b1) ? WBRAM_0_0_1_q0 : select_ln217_fu_2312_p3);

assign select_ln217_2_fu_2338_p3 = ((icmp_ln217_2_fu_2333_p2[0:0] === 1'b1) ? WBRAM_0_0_2_q0 : select_ln217_1_fu_2325_p3);

assign select_ln217_3_fu_2351_p3 = ((icmp_ln217_3_fu_2346_p2[0:0] === 1'b1) ? WBRAM_0_0_3_q0 : select_ln217_2_fu_2338_p3);

assign select_ln217_4_fu_2364_p3 = ((icmp_ln217_4_fu_2359_p2[0:0] === 1'b1) ? WBRAM_0_0_4_q0 : select_ln217_3_fu_2351_p3);

assign select_ln217_5_fu_2377_p3 = ((icmp_ln217_5_fu_2372_p2[0:0] === 1'b1) ? WBRAM_0_0_5_q0 : select_ln217_4_fu_2364_p3);

assign select_ln217_fu_2312_p3 = ((icmp_ln217_fu_2307_p2[0:0] === 1'b1) ? WBRAM_0_0_0_q0 : WBRAM_0_0_7_q0);

assign select_ln51_2_fu_2001_p3 = ((icmp_ln879_8_fu_1996_p2[0:0] === 1'b1) ? 16'd0 : grp_fu_1110_p2);

assign select_ln879_fu_2219_p3 = ((icmp_ln879_5_fu_2180_p2[0:0] === 1'b1) ? 3'd0 : weightID_V_1_fu_2214_p2);

assign select_ln887_1_fu_1817_p3 = ((icmp_ln107_fu_1798_p2[0:0] === 1'b1) ? add_ln700_12_fu_1811_p2 : t_V_17_reg_935);

assign select_ln887_2_fu_1850_p3 = ((icmp_ln107_fu_1798_p2[0:0] === 1'b1) ? select_ln152_1_fu_1843_p3 : y_out_V_fu_1780_p3);

assign select_ln887_fu_1803_p3 = ((icmp_ln107_fu_1798_p2[0:0] === 1'b1) ? 9'd0 : ret_V_15_reg_946);

assign shl_ln214_1_fu_1884_p2 = ImageCache_line_wid << 16'd2;

assign shl_ln214_2_fu_2123_p2 = grp_fu_2090_p2 << 23'd1;

assign shl_ln214_fu_1397_p2 = mul_ln209_reg_2535 << 16'd2;

assign shl_ln_fu_1321_p3 = {{layer_channels_out_V_1_reg_2494}, {3'd0}};

assign split_offset_V_fu_1899_p3 = ((MemoryController_is_2_fu_350[0:0] === 1'b1) ? MemoryController_ch_1_fu_354 : 10'd0);

assign sub_ln214_2_fu_1966_p2 = (loads_left_4_fu_346 - zext_ln887_2_reg_2934);

assign trunc_ln152_mid1_fu_1829_p4 = {{add_ln700_12_fu_1811_p2[8:1]}};

assign trunc_ln214_2_fu_1524_p1 = ap_phi_mux_empty_24_phi_fu_875_p4[2:0];

assign trunc_ln214_3_fu_2161_p1 = grp_fu_2104_p2[2:0];

assign trunc_ln214_4_fu_2210_p1 = t_V_14_reg_980[2:0];

assign trunc_ln214_fu_1436_p1 = grp_fu_1365_p2[2:0];

assign trunc_ln215_1_fu_2153_p1 = grp_fu_2104_p2[13:0];

assign trunc_ln215_fu_1428_p1 = grp_fu_1365_p2[13:0];

assign trunc_ln321_1_fu_1514_p4 = {{ret_V_3_fu_1504_p2[12:3]}};

assign trunc_ln321_2_fu_2157_p1 = grp_fu_2104_p2[9:0];

assign trunc_ln321_3_fu_2200_p4 = {{ret_V_13_fu_2190_p2[12:3]}};

assign trunc_ln321_fu_1432_p1 = grp_fu_1365_p2[9:0];

assign trunc_ln6_fu_1766_p4 = {{t_V_17_reg_935[8:1]}};

assign trunc_ln7_fu_2039_p4 = {{select_ln887_reg_2895[8:1]}};

assign trunc_ln887_1_fu_1862_p1 = select_ln887_fu_1803_p3[0:0];

assign trunc_ln887_fu_1825_p1 = select_ln887_1_fu_1817_p3[0:0];

assign trunc_ln99_fu_1449_p1 = ap_phi_mux_t_V_phi_fu_851_p4[13:0];

assign weightID_V_1_fu_2214_p2 = (trunc_ln214_3_reg_3034 + trunc_ln214_4_fu_2210_p1);

assign weightID_V_fu_1540_p3 = ((icmp_ln879_2_reg_2609[0:0] === 1'b1) ? 3'd0 : add_ln214_1_fu_1528_p2);

assign weight_1_fu_2390_p3 = ((icmp_ln217_6_fu_2385_p2[0:0] === 1'b1) ? WBRAM_0_0_6_q0 : select_ln217_5_fu_2377_p3);

assign weight_index_V_fu_1547_p2 = (ap_phi_mux_t_V_6_phi_fu_863_p4 + 4'd1);

assign weights_per_filter_V_fu_1412_p3 = ((bias_or_1x1_reg_2628[0:0] === 1'b1) ? 4'd1 : 4'd9);

assign x_V_1_fu_2297_p2 = (select_ln887_reg_2895 + 9'd1);

assign x_V_fu_1621_p2 = (t_V_8_reg_882 + 9'd1);

assign x_out_V_fu_2052_p3 = ((icmp_ln879_4_reg_2541[0:0] === 1'b1) ? zext_ln153_fu_2048_p1 : select_ln887_reg_2895);

assign xor_ln204_fu_2405_p2 = (bitcast_ln204_fu_2402_p1 ^ 32'd2147483648);

assign xy_offset_V_fu_2062_p2 = (zext_ln214_fu_2058_p1 + grp_fu_2034_p2);

assign y_out_V_fu_1780_p3 = ((icmp_ln879_4_reg_2541[0:0] === 1'b1) ? zext_ln152_fu_1776_p1 : t_V_17_reg_935);

assign zext_ln123_fu_1490_p1 = add_ln123_fu_1485_p2;

assign zext_ln1352_1_fu_1328_p1 = shl_ln_fu_1321_p3;

assign zext_ln1353_1_fu_1627_p1 = mul_ln209_2_reg_2574;

assign zext_ln1353_2_fu_2186_p1 = t_V_14_reg_980;

assign zext_ln1353_3_fu_1466_p1 = ap_phi_mux_t_V_phi_fu_851_p4;

assign zext_ln1353_4_fu_1476_p1 = add_ln1353_fu_1470_p2;

assign zext_ln1353_5_fu_2255_p1 = t_V_14_reg_980;

assign zext_ln1353_6_fu_2265_p1 = add_ln1353_9_fu_2259_p2;

assign zext_ln1353_fu_1500_p1 = ap_phi_mux_empty_24_phi_fu_875_p4;

assign zext_ln138_1_fu_1666_p1 = add_ln138_1_fu_1661_p2;

assign zext_ln138_2_fu_1956_p1 = add_ln138_2_fu_1951_p2;

assign zext_ln138_fu_1717_p1 = add_ln138_fu_1712_p2;

assign zext_ln152_1_fu_1839_p1 = trunc_ln152_mid1_fu_1829_p4;

assign zext_ln152_fu_1776_p1 = trunc_ln6_fu_1766_p4;

assign zext_ln153_fu_2048_p1 = trunc_ln7_fu_2039_p4;

assign zext_ln174_fu_2279_p1 = add_ln174_fu_2274_p2;

assign zext_ln191_fu_1921_p1 = add_ln191_fu_1916_p2;

assign zext_ln209_5_fu_1310_p1 = layer_channels_out_V_1_reg_2494;

assign zext_ln209_7_fu_1738_p1 = layer_channels_in_V_s_reg_2504;

assign zext_ln214_3_fu_1244_p1 = lshr_ln_fu_1234_p4;

assign zext_ln214_fu_2058_p1 = x_out_V_fu_2052_p3;

assign zext_ln215_3_fu_1462_p1 = MemoryController_la;

assign zext_ln215_9_fu_2251_p1 = MemoryController_pi;

assign zext_ln215_fu_1301_p1 = layer_channels_in_V_s_reg_2504;

assign zext_ln544_10_fu_1682_p1 = ImageCache_curr_img;

assign zext_ln544_11_fu_1991_p1 = ImageCache_curr_img;

assign zext_ln544_2_fu_1600_p1 = rowID_V_reg_2706_pp0_iter4_reg;

assign zext_ln544_6_fu_2439_p1 = i_op_assign_1_reg_992;

assign zext_ln544_7_fu_2302_p1 = t_V_14_reg_980;

assign zext_ln544_8_fu_2235_p1 = rowID_V_1_fu_2227_p3;

assign zext_ln544_fu_1733_p1 = ImageCache_curr_img;

assign zext_ln887_1_fu_1391_p1 = layer_channels_in_V_s_reg_2504;

assign zext_ln887_2_fu_1870_p1 = ImageCache_ch_in_V;

assign zext_ln887_3_fu_1858_p1 = select_ln887_2_fu_1850_p3;

assign zext_ln887_fu_1346_p1 = t_V_1_reg_837;

always @ (posedge ap_clk) begin
    p_cast_reg_2559[32:30] <= 3'b000;
    zext_ln209_5_reg_2584[18:10] <= 9'b000000000;
    lhs_V_reg_2594[13:10] <= 4'b0000;
    lhs_V_1_reg_2604[32] <= 1'b0;
    zext_ln887_1_reg_2646[20:10] <= 11'b00000000000;
    lhs_V_2_reg_2652[32] <= 1'b0;
    MAX_ADDR_V_reg_2661[1:0] <= 2'b11;
    weights_per_filter_V_reg_2666[2:0] <= 3'b001;
    zext_ln209_7_reg_2877[18:10] <= 9'b000000000;
    zext_ln887_3_reg_2919[17:9] <= 9'b000000000;
    zext_ln887_2_reg_2934[20:10] <= 11'b00000000000;
    MAX_ADDR_V_1_reg_2943[1:0] <= 2'b11;
    zext_ln544_7_reg_3109[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
end

endmodule //fpga_top
