// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module preloadPixelsAndPrec (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        y_V_2,
        x_V_3,
        ci_V,
        ch_out_V,
        ci_V_out_din,
        ci_V_out_full_n,
        ci_V_out_write,
        ch_out_V_out_din,
        ch_out_V_out_full_n,
        ch_out_V_out_write,
        ImageCache_line_wid,
        ImageCache_ch_in_V,
        ImageCache_width_in,
        ImageCache_height_i,
        ImageCache_IBRAM_address0,
        ImageCache_IBRAM_ce0,
        ImageCache_IBRAM_q0,
        WeightsCache_ch_out,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9
);

parameter    ap_ST_fsm_pp0_stage0 = 9'd1;
parameter    ap_ST_fsm_pp0_stage1 = 9'd2;
parameter    ap_ST_fsm_pp0_stage2 = 9'd4;
parameter    ap_ST_fsm_pp0_stage3 = 9'd8;
parameter    ap_ST_fsm_pp0_stage4 = 9'd16;
parameter    ap_ST_fsm_pp0_stage5 = 9'd32;
parameter    ap_ST_fsm_pp0_stage6 = 9'd64;
parameter    ap_ST_fsm_pp0_stage7 = 9'd128;
parameter    ap_ST_fsm_pp0_stage8 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [8:0] y_V_2;
input  [8:0] x_V_3;
input  [9:0] ci_V;
input  [9:0] ch_out_V;
output  [9:0] ci_V_out_din;
input   ci_V_out_full_n;
output   ci_V_out_write;
output  [9:0] ch_out_V_out_din;
input   ch_out_V_out_full_n;
output   ch_out_V_out_write;
input  [15:0] ImageCache_line_wid;
input  [9:0] ImageCache_ch_in_V;
input  [8:0] ImageCache_width_in;
input  [8:0] ImageCache_height_i;
output  [14:0] ImageCache_IBRAM_address0;
output   ImageCache_IBRAM_ce0;
input  [31:0] ImageCache_IBRAM_q0;
input  [9:0] WeightsCache_ch_out;
output  [18:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;
output  [31:0] ap_return_4;
output  [31:0] ap_return_5;
output  [31:0] ap_return_6;
output  [31:0] ap_return_7;
output  [31:0] ap_return_8;
output  [31:0] ap_return_9;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ci_V_out_write;
reg ch_out_V_out_write;
reg[14:0] ImageCache_IBRAM_address0;
reg ImageCache_IBRAM_ce0;
reg[18:0] ap_return_0;
reg[31:0] ap_return_1;
reg[31:0] ap_return_2;
reg[31:0] ap_return_3;
reg[31:0] ap_return_4;
reg[31:0] ap_return_5;
reg[31:0] ap_return_6;
reg[31:0] ap_return_7;
reg[31:0] ap_return_8;
reg[31:0] ap_return_9;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state9_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_11001;
reg    ci_V_out_blk_n;
wire    ap_block_pp0_stage0;
reg    ch_out_V_out_blk_n;
reg   [9:0] ci_V_read_reg_922;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state10_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [8:0] x_V_3_read_reg_928;
wire   [1:0] trunc_ln68_fu_219_p1;
reg   [1:0] trunc_ln68_reg_933;
reg  signed [15:0] ImageCache_line_wid_1_reg_944;
wire   [15:0] zext_ln214_fu_271_p1;
reg   [15:0] zext_ln214_reg_951;
wire  signed [15:0] mul_ln214_fu_906_p2;
reg  signed [15:0] mul_ln214_reg_957;
wire   [0:0] xor_ln891_fu_289_p2;
reg   [0:0] xor_ln891_reg_964;
wire   [0:0] xor_ln891_1_fu_309_p2;
reg   [0:0] xor_ln891_1_reg_970;
wire   [0:0] icmp_ln138_fu_349_p2;
reg   [0:0] icmp_ln138_reg_976;
wire   [0:0] icmp_ln891_2_fu_355_p2;
reg   [0:0] icmp_ln891_2_reg_981;
reg   [0:0] tmp_1_reg_986;
wire   [9:0] add_ln68_2_fu_369_p2;
reg   [9:0] add_ln68_2_reg_992;
wire   [0:0] icmp_ln891_3_fu_375_p2;
reg   [0:0] icmp_ln891_3_reg_997;
wire   [0:0] icmp_ln891_4_fu_381_p2;
reg   [0:0] icmp_ln891_4_reg_1002;
reg   [0:0] tmp_2_reg_1007;
wire   [0:0] icmp_ln891_5_fu_401_p2;
reg   [0:0] icmp_ln891_5_reg_1013;
wire   [15:0] mul_ln214_1_fu_912_p2;
reg   [15:0] mul_ln214_1_reg_1018;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state11_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [15:0] grp_fu_247_p2;
reg   [15:0] mul_ln209_reg_1030;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state12_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire   [15:0] mul_ln214_2_fu_917_p2;
reg   [15:0] mul_ln214_2_reg_1035;
wire   [15:0] zext_ln209_1_fu_435_p1;
reg   [15:0] zext_ln209_1_reg_1047;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state13_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire   [15:0] add_ln209_fu_438_p2;
reg   [15:0] add_ln209_reg_1053;
wire   [15:0] grp_fu_413_p2;
reg   [15:0] mul_ln209_1_reg_1064;
wire   [31:0] select_ln138_fu_470_p3;
reg   [31:0] select_ln138_reg_1079;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state14_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
wire   [15:0] add_ln209_4_fu_486_p2;
reg   [15:0] add_ln209_4_reg_1089;
wire   [15:0] add_ln209_8_fu_490_p2;
reg   [15:0] add_ln209_8_reg_1096;
wire   [0:0] xor_ln891_2_fu_495_p2;
reg   [0:0] xor_ln891_2_reg_1103;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
reg    ap_block_pp0_stage5_11001;
wire   [31:0] select_ln138_1_fu_524_p3;
reg   [31:0] select_ln138_1_reg_1109;
wire   [0:0] xor_ln891_3_fu_536_p2;
reg   [0:0] xor_ln891_3_reg_1114;
wire   [0:0] icmp_ln138_2_fu_559_p2;
reg   [0:0] icmp_ln138_2_reg_1120;
wire   [18:0] grp_fu_464_p2;
reg   [18:0] ci_times_ch_out_V_reg_1130;
wire   [31:0] select_ln138_2_fu_570_p3;
reg   [31:0] select_ln138_2_reg_1135;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
wire   [0:0] xor_ln891_4_fu_586_p2;
reg   [0:0] xor_ln891_4_reg_1145;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
wire   [31:0] select_ln138_3_fu_615_p3;
reg   [31:0] select_ln138_3_reg_1151;
(* use_dsp48 = "no" *) wire   [15:0] add_ln209_7_fu_632_p2;
reg   [15:0] add_ln209_7_reg_1161;
(* use_dsp48 = "no" *) wire   [15:0] add_ln209_9_fu_636_p2;
reg   [15:0] add_ln209_9_reg_1166;
wire   [0:0] xor_ln891_5_fu_640_p2;
reg   [0:0] xor_ln891_5_reg_1171;
wire   [0:0] icmp_ln138_6_fu_663_p2;
reg   [0:0] icmp_ln138_6_reg_1177;
(* use_dsp48 = "no" *) wire   [15:0] add_ln209_10_fu_669_p2;
reg   [15:0] add_ln209_10_reg_1182;
(* use_dsp48 = "no" *) wire   [15:0] add_ln209_11_fu_673_p2;
reg   [15:0] add_ln209_11_reg_1187;
wire   [31:0] select_ln138_4_fu_695_p3;
reg   [31:0] select_ln138_4_reg_1192;
wire   [0:0] icmp_ln138_5_fu_715_p2;
reg   [0:0] icmp_ln138_5_reg_1197;
wire   [0:0] icmp_ln138_7_fu_737_p2;
reg   [0:0] icmp_ln138_7_reg_1207;
wire   [0:0] icmp_ln138_8_fu_755_p2;
reg   [0:0] icmp_ln138_8_reg_1212;
wire   [31:0] select_ln138_5_fu_761_p3;
reg   [31:0] select_ln138_5_reg_1217;
wire   [31:0] select_ln138_6_fu_772_p3;
reg   [31:0] select_ln138_6_reg_1227;
wire   [31:0] select_ln138_7_fu_783_p3;
reg   [31:0] select_ln138_7_reg_1237;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage8_subdone;
wire   [31:0] grp_reg_float_s_fu_794_ap_return;
reg    grp_reg_float_s_fu_794_ap_ce;
wire    ap_block_state4_pp0_stage3_iter0_ignore_call47;
wire    ap_block_state13_pp0_stage3_iter1_ignore_call47;
wire    ap_block_pp0_stage3_11001_ignoreCallOp168;
wire    ap_block_state5_pp0_stage4_iter0_ignore_call47;
wire    ap_block_state14_pp0_stage4_iter1_ignore_call47;
wire    ap_block_pp0_stage4_11001_ignoreCallOp185;
wire   [31:0] grp_reg_float_s_fu_799_ap_return;
reg    grp_reg_float_s_fu_799_ap_ce;
wire    ap_block_state4_pp0_stage3_iter0_ignore_call65;
wire    ap_block_state13_pp0_stage3_iter1_ignore_call65;
wire    ap_block_pp0_stage3_11001_ignoreCallOp169;
wire    ap_block_state5_pp0_stage4_iter0_ignore_call65;
wire    ap_block_state14_pp0_stage4_iter1_ignore_call65;
wire    ap_block_pp0_stage4_11001_ignoreCallOp189;
wire   [31:0] grp_reg_float_s_fu_804_ap_return;
reg    grp_reg_float_s_fu_804_ap_ce;
wire    ap_block_state4_pp0_stage3_iter0_ignore_call83;
wire    ap_block_state13_pp0_stage3_iter1_ignore_call83;
wire    ap_block_pp0_stage3_11001_ignoreCallOp170;
wire    ap_block_state5_pp0_stage4_iter0_ignore_call83;
wire    ap_block_state14_pp0_stage4_iter1_ignore_call83;
wire    ap_block_pp0_stage4_11001_ignoreCallOp193;
wire   [31:0] grp_reg_float_s_fu_809_ap_return;
reg    grp_reg_float_s_fu_809_ap_ce;
wire    ap_block_state4_pp0_stage3_iter0_ignore_call105;
wire    ap_block_state13_pp0_stage3_iter1_ignore_call105;
wire    ap_block_pp0_stage3_11001_ignoreCallOp171;
wire    ap_block_state5_pp0_stage4_iter0_ignore_call105;
wire    ap_block_state14_pp0_stage4_iter1_ignore_call105;
wire    ap_block_pp0_stage4_11001_ignoreCallOp199;
wire   [31:0] grp_reg_float_s_fu_814_ap_return;
reg    grp_reg_float_s_fu_814_ap_ce;
wire    ap_block_state4_pp0_stage3_iter0_ignore_call117;
wire    ap_block_state13_pp0_stage3_iter1_ignore_call117;
wire    ap_block_pp0_stage3_11001_ignoreCallOp172;
wire    ap_block_state5_pp0_stage4_iter0_ignore_call117;
wire    ap_block_state14_pp0_stage4_iter1_ignore_call117;
wire    ap_block_pp0_stage4_11001_ignoreCallOp203;
wire   [31:0] grp_reg_float_s_fu_819_ap_return;
reg    grp_reg_float_s_fu_819_ap_ce;
wire    ap_block_state4_pp0_stage3_iter0_ignore_call129;
wire    ap_block_state13_pp0_stage3_iter1_ignore_call129;
wire    ap_block_pp0_stage3_11001_ignoreCallOp173;
wire    ap_block_state5_pp0_stage4_iter0_ignore_call129;
wire    ap_block_state14_pp0_stage4_iter1_ignore_call129;
wire    ap_block_pp0_stage4_11001_ignoreCallOp207;
wire   [31:0] grp_reg_float_s_fu_824_ap_return;
reg    grp_reg_float_s_fu_824_ap_ce;
wire    ap_block_state4_pp0_stage3_iter0_ignore_call152;
wire    ap_block_state13_pp0_stage3_iter1_ignore_call152;
wire    ap_block_pp0_stage3_11001_ignoreCallOp174;
wire    ap_block_state5_pp0_stage4_iter0_ignore_call152;
wire    ap_block_state14_pp0_stage4_iter1_ignore_call152;
wire    ap_block_pp0_stage4_11001_ignoreCallOp213;
wire   [31:0] grp_reg_float_s_fu_829_ap_return;
reg    grp_reg_float_s_fu_829_ap_ce;
wire    ap_block_state4_pp0_stage3_iter0_ignore_call164;
wire    ap_block_state13_pp0_stage3_iter1_ignore_call164;
wire    ap_block_pp0_stage3_11001_ignoreCallOp175;
wire    ap_block_state5_pp0_stage4_iter0_ignore_call164;
wire    ap_block_state14_pp0_stage4_iter1_ignore_call164;
wire    ap_block_pp0_stage4_11001_ignoreCallOp217;
wire   [31:0] grp_reg_float_s_fu_841_in_r;
wire   [31:0] grp_reg_float_s_fu_841_ap_return;
reg    grp_reg_float_s_fu_841_ap_ce;
wire    ap_block_state4_pp0_stage3_iter0_ignore_call176;
wire    ap_block_state13_pp0_stage3_iter1_ignore_call176;
wire    ap_block_pp0_stage3_11001_ignoreCallOp178;
wire    ap_block_state5_pp0_stage4_iter0_ignore_call176;
wire    ap_block_state14_pp0_stage4_iter1_ignore_call176;
wire    ap_block_pp0_stage4_11001_ignoreCallOp221;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln544_fu_448_p1;
wire   [63:0] zext_ln544_3_fu_481_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln544_4_fu_565_p1;
wire    ap_block_pp0_stage5;
wire   [63:0] zext_ln544_5_fu_581_p1;
wire    ap_block_pp0_stage6;
wire   [63:0] zext_ln544_6_fu_627_p1;
wire    ap_block_pp0_stage7;
wire   [63:0] zext_ln544_7_fu_721_p1;
wire    ap_block_pp0_stage8;
wire   [63:0] zext_ln544_8_fu_768_p1;
wire   [63:0] zext_ln544_9_fu_779_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln544_10_fu_790_p1;
wire    ap_block_pp0_stage2;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] zext_ln68_fu_223_p1;
wire   [1:0] add_ln214_fu_233_p2;
wire   [1:0] grp_fu_247_p1;
wire   [9:0] zext_ln68_1_fu_253_p1;
wire  signed [9:0] add_ln68_1_fu_257_p2;
wire   [9:0] zext_ln891_fu_279_p1;
wire   [0:0] icmp_ln891_fu_283_p2;
wire   [9:0] add_ln68_fu_227_p2;
wire   [9:0] zext_ln891_1_fu_299_p1;
wire   [0:0] icmp_ln891_1_fu_303_p2;
wire   [9:0] or_ln138_fu_315_p2;
wire   [0:0] or_ln138_1_fu_329_p2;
wire   [0:0] tmp_fu_321_p3;
wire   [0:0] or_ln138_2_fu_335_p2;
wire   [10:0] tmp_24_i_i_fu_341_p3;
wire   [9:0] add_ln68_3_fu_395_p2;
wire   [1:0] grp_fu_413_p1;
wire   [1:0] add_ln214_1_fu_421_p2;
wire   [1:0] grp_fu_430_p1;
(* use_dsp48 = "no" *) wire   [15:0] add_ln209_1_fu_443_p2;
wire   [9:0] grp_fu_464_p0;
wire   [9:0] grp_fu_464_p1;
(* use_dsp48 = "no" *) wire   [15:0] add_ln209_2_fu_477_p2;
wire   [15:0] grp_fu_430_p2;
wire   [0:0] or_ln138_3_fu_500_p2;
wire   [0:0] or_ln138_4_fu_505_p2;
wire   [10:0] tmp_26_i_i_fu_510_p3;
wire   [0:0] icmp_ln138_1_fu_518_p2;
wire   [0:0] or_ln138_5_fu_541_p2;
wire   [0:0] or_ln138_6_fu_546_p2;
wire   [10:0] tmp_28_i_i_fu_551_p3;
(* use_dsp48 = "no" *) wire   [15:0] add_ln209_3_fu_532_p2;
(* use_dsp48 = "no" *) wire   [15:0] add_ln209_5_fu_577_p2;
wire   [0:0] or_ln138_7_fu_591_p2;
wire   [0:0] or_ln138_8_fu_596_p2;
wire   [10:0] tmp_31_i_i_fu_601_p3;
wire   [0:0] icmp_ln138_3_fu_609_p2;
(* use_dsp48 = "no" *) wire   [15:0] add_ln209_6_fu_623_p2;
wire   [0:0] or_ln138_11_fu_645_p2;
wire   [0:0] or_ln138_12_fu_650_p2;
wire   [10:0] tmp_38_i_i_fu_655_p3;
wire   [0:0] or_ln138_9_fu_677_p2;
wire   [10:0] tmp_33_i_i_fu_681_p3;
wire   [0:0] icmp_ln138_4_fu_689_p2;
wire   [0:0] or_ln138_10_fu_703_p2;
wire   [10:0] tmp_35_i_i_fu_707_p3;
wire   [0:0] or_ln138_13_fu_725_p2;
wire   [10:0] tmp_40_i_i_fu_729_p3;
wire   [0:0] or_ln138_14_fu_743_p2;
wire   [10:0] tmp_42_i_i_fu_747_p3;
wire   [9:0] mul_ln214_fu_906_p1;
wire   [8:0] mul_ln214_1_fu_912_p0;
wire   [9:0] mul_ln214_1_fu_912_p1;
wire   [9:0] mul_ln214_2_fu_917_p0;
wire   [9:0] mul_ln214_2_fu_917_p1;
reg    grp_fu_247_ce;
reg    grp_fu_413_ce;
reg    grp_fu_430_ce;
reg    grp_fu_464_ce;
reg   [18:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [31:0] ap_return_2_preg;
reg   [31:0] ap_return_3_preg;
reg   [31:0] ap_return_4_preg;
reg   [31:0] ap_return_5_preg;
reg   [31:0] ap_return_6_preg;
reg   [31:0] ap_return_7_preg;
reg   [31:0] ap_return_8_preg;
reg   [31:0] ap_return_9_preg;
reg   [8:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_enable_pp0;
wire   [15:0] grp_fu_247_p10;
wire   [15:0] grp_fu_413_p10;
wire   [15:0] grp_fu_430_p10;
wire   [18:0] grp_fu_464_p00;
wire   [18:0] grp_fu_464_p10;
wire   [15:0] mul_ln214_1_fu_912_p00;
wire   [15:0] mul_ln214_2_fu_917_p00;
wire   [15:0] mul_ln214_fu_906_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_return_0_preg = 19'd0;
#0 ap_return_1_preg = 32'd0;
#0 ap_return_2_preg = 32'd0;
#0 ap_return_3_preg = 32'd0;
#0 ap_return_4_preg = 32'd0;
#0 ap_return_5_preg = 32'd0;
#0 ap_return_6_preg = 32'd0;
#0 ap_return_7_preg = 32'd0;
#0 ap_return_8_preg = 32'd0;
#0 ap_return_9_preg = 32'd0;
end

reg_float_s grp_reg_float_s_fu_794(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .in_r(select_ln138_reg_1079),
    .ap_return(grp_reg_float_s_fu_794_ap_return),
    .ap_ce(grp_reg_float_s_fu_794_ap_ce)
);

reg_float_s grp_reg_float_s_fu_799(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .in_r(select_ln138_1_reg_1109),
    .ap_return(grp_reg_float_s_fu_799_ap_return),
    .ap_ce(grp_reg_float_s_fu_799_ap_ce)
);

reg_float_s grp_reg_float_s_fu_804(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .in_r(select_ln138_2_reg_1135),
    .ap_return(grp_reg_float_s_fu_804_ap_return),
    .ap_ce(grp_reg_float_s_fu_804_ap_ce)
);

reg_float_s grp_reg_float_s_fu_809(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .in_r(select_ln138_3_reg_1151),
    .ap_return(grp_reg_float_s_fu_809_ap_return),
    .ap_ce(grp_reg_float_s_fu_809_ap_ce)
);

reg_float_s grp_reg_float_s_fu_814(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .in_r(select_ln138_4_reg_1192),
    .ap_return(grp_reg_float_s_fu_814_ap_return),
    .ap_ce(grp_reg_float_s_fu_814_ap_ce)
);

reg_float_s grp_reg_float_s_fu_819(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .in_r(select_ln138_5_reg_1217),
    .ap_return(grp_reg_float_s_fu_819_ap_return),
    .ap_ce(grp_reg_float_s_fu_819_ap_ce)
);

reg_float_s grp_reg_float_s_fu_824(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .in_r(select_ln138_6_reg_1227),
    .ap_return(grp_reg_float_s_fu_824_ap_return),
    .ap_ce(grp_reg_float_s_fu_824_ap_ce)
);

reg_float_s grp_reg_float_s_fu_829(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .in_r(select_ln138_7_reg_1237),
    .ap_return(grp_reg_float_s_fu_829_ap_return),
    .ap_ce(grp_reg_float_s_fu_829_ap_ce)
);

reg_float_s grp_reg_float_s_fu_841(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .in_r(grp_reg_float_s_fu_841_in_r),
    .ap_return(grp_reg_float_s_fu_841_ap_return),
    .ap_ce(grp_reg_float_s_fu_841_ap_ce)
);

fpga_top_mul_16s_2ns_16_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
fpga_top_mul_16s_2ns_16_3_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ImageCache_line_wid),
    .din1(grp_fu_247_p1),
    .ce(grp_fu_247_ce),
    .dout(grp_fu_247_p2)
);

fpga_top_mul_16s_2ns_16_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
fpga_top_mul_16s_2ns_16_3_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ImageCache_line_wid_1_reg_944),
    .din1(grp_fu_413_p1),
    .ce(grp_fu_413_ce),
    .dout(grp_fu_413_p2)
);

fpga_top_mul_16s_2ns_16_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
fpga_top_mul_16s_2ns_16_3_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ImageCache_line_wid_1_reg_944),
    .din1(grp_fu_430_p1),
    .ce(grp_fu_430_ce),
    .dout(grp_fu_430_p2)
);

fpga_top_mul_10ns_10ns_19_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 19 ))
fpga_top_mul_10ns_10ns_19_3_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_464_p0),
    .din1(grp_fu_464_p1),
    .ce(grp_fu_464_ce),
    .dout(grp_fu_464_p2)
);

fpga_top_mul_mul_10s_10ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 16 ))
fpga_top_mul_mul_10s_10ns_16_1_1_U6(
    .din0(add_ln68_1_fu_257_p2),
    .din1(mul_ln214_fu_906_p1),
    .dout(mul_ln214_fu_906_p2)
);

fpga_top_mul_mul_9ns_10ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 16 ))
fpga_top_mul_mul_9ns_10ns_16_1_1_U7(
    .din0(mul_ln214_1_fu_912_p0),
    .din1(mul_ln214_1_fu_912_p1),
    .dout(mul_ln214_1_fu_912_p2)
);

fpga_top_mul_mul_10ns_10ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 16 ))
fpga_top_mul_mul_10ns_10ns_16_1_1_U8(
    .din0(mul_ln214_2_fu_917_p0),
    .din1(mul_ln214_2_fu_917_p1),
    .dout(mul_ln214_2_fu_917_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage8_subdone) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 19'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_return_0_preg <= ci_times_ch_out_V_reg_1130;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_return_1_preg <= grp_reg_float_s_fu_794_ap_return;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 32'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_return_2_preg <= grp_reg_float_s_fu_799_ap_return;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 32'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_return_3_preg <= grp_reg_float_s_fu_804_ap_return;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 32'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_return_4_preg <= grp_reg_float_s_fu_809_ap_return;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_5_preg <= 32'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_return_5_preg <= grp_reg_float_s_fu_814_ap_return;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_6_preg <= 32'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_return_6_preg <= grp_reg_float_s_fu_819_ap_return;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_7_preg <= 32'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_return_7_preg <= grp_reg_float_s_fu_824_ap_return;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_8_preg <= 32'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_return_8_preg <= grp_reg_float_s_fu_829_ap_return;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_9_preg <= 32'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_return_9_preg <= grp_reg_float_s_fu_841_ap_return;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ImageCache_line_wid_1_reg_944 <= ImageCache_line_wid;
        add_ln68_2_reg_992 <= add_ln68_2_fu_369_p2;
        ci_V_read_reg_922 <= ci_V;
        icmp_ln138_reg_976 <= icmp_ln138_fu_349_p2;
        icmp_ln891_2_reg_981 <= icmp_ln891_2_fu_355_p2;
        icmp_ln891_3_reg_997 <= icmp_ln891_3_fu_375_p2;
        icmp_ln891_4_reg_1002 <= icmp_ln891_4_fu_381_p2;
        icmp_ln891_5_reg_1013 <= icmp_ln891_5_fu_401_p2;
        mul_ln214_reg_957 <= mul_ln214_fu_906_p2;
        select_ln138_5_reg_1217 <= select_ln138_5_fu_761_p3;
        tmp_1_reg_986 <= add_ln68_fu_227_p2[32'd9];
        tmp_2_reg_1007 <= add_ln68_1_fu_257_p2[32'd9];
        trunc_ln68_reg_933 <= trunc_ln68_fu_219_p1;
        x_V_3_read_reg_928 <= x_V_3;
        xor_ln891_1_reg_970 <= xor_ln891_1_fu_309_p2;
        xor_ln891_reg_964 <= xor_ln891_fu_289_p2;
        zext_ln214_reg_951[9 : 0] <= zext_ln214_fu_271_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        add_ln209_10_reg_1182 <= add_ln209_10_fu_669_p2;
        add_ln209_11_reg_1187 <= add_ln209_11_fu_673_p2;
        add_ln209_7_reg_1161 <= add_ln209_7_fu_632_p2;
        add_ln209_9_reg_1166 <= add_ln209_9_fu_636_p2;
        icmp_ln138_6_reg_1177 <= icmp_ln138_6_fu_663_p2;
        select_ln138_3_reg_1151 <= select_ln138_3_fu_615_p3;
        xor_ln891_4_reg_1145 <= xor_ln891_4_fu_586_p2;
        xor_ln891_5_reg_1171 <= xor_ln891_5_fu_640_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        add_ln209_4_reg_1089 <= add_ln209_4_fu_486_p2;
        add_ln209_8_reg_1096 <= add_ln209_8_fu_490_p2;
        select_ln138_reg_1079 <= select_ln138_fu_470_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        add_ln209_reg_1053 <= add_ln209_fu_438_p2;
        mul_ln209_1_reg_1064 <= grp_fu_413_p2;
        zext_ln209_1_reg_1047[9 : 0] <= zext_ln209_1_fu_435_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ci_times_ch_out_V_reg_1130 <= grp_fu_464_p2;
        icmp_ln138_2_reg_1120 <= icmp_ln138_2_fu_559_p2;
        select_ln138_1_reg_1109 <= select_ln138_1_fu_524_p3;
        xor_ln891_2_reg_1103 <= xor_ln891_2_fu_495_p2;
        xor_ln891_3_reg_1114 <= xor_ln891_3_fu_536_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        icmp_ln138_5_reg_1197 <= icmp_ln138_5_fu_715_p2;
        icmp_ln138_7_reg_1207 <= icmp_ln138_7_fu_737_p2;
        icmp_ln138_8_reg_1212 <= icmp_ln138_8_fu_755_p2;
        select_ln138_4_reg_1192 <= select_ln138_4_fu_695_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        mul_ln209_reg_1030 <= grp_fu_247_p2;
        mul_ln214_2_reg_1035 <= mul_ln214_2_fu_917_p2;
        select_ln138_7_reg_1237 <= select_ln138_7_fu_783_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        mul_ln214_1_reg_1018 <= mul_ln214_1_fu_912_p2;
        select_ln138_6_reg_1227 <= select_ln138_6_fu_772_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        select_ln138_2_reg_1135 <= select_ln138_2_fu_570_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ImageCache_IBRAM_address0 = zext_ln544_10_fu_790_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ImageCache_IBRAM_address0 = zext_ln544_9_fu_779_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ImageCache_IBRAM_address0 = zext_ln544_8_fu_768_p1;
    end else if (((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ImageCache_IBRAM_address0 = zext_ln544_7_fu_721_p1;
    end else if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        ImageCache_IBRAM_address0 = zext_ln544_6_fu_627_p1;
    end else if (((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        ImageCache_IBRAM_address0 = zext_ln544_5_fu_581_p1;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ImageCache_IBRAM_address0 = zext_ln544_4_fu_565_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ImageCache_IBRAM_address0 = zext_ln544_3_fu_481_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ImageCache_IBRAM_address0 = zext_ln544_fu_448_p1;
    end else begin
        ImageCache_IBRAM_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        ImageCache_IBRAM_ce0 = 1'b1;
    end else begin
        ImageCache_IBRAM_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_return_0 = ci_times_ch_out_V_reg_1130;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_return_1 = grp_reg_float_s_fu_794_ap_return;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_return_2 = grp_reg_float_s_fu_799_ap_return;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_return_3 = grp_reg_float_s_fu_804_ap_return;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_return_4 = grp_reg_float_s_fu_809_ap_return;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_return_5 = grp_reg_float_s_fu_814_ap_return;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_return_6 = grp_reg_float_s_fu_819_ap_return;
    end else begin
        ap_return_6 = ap_return_6_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_return_7 = grp_reg_float_s_fu_824_ap_return;
    end else begin
        ap_return_7 = ap_return_7_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_return_8 = grp_reg_float_s_fu_829_ap_return;
    end else begin
        ap_return_8 = ap_return_8_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_return_9 = grp_reg_float_s_fu_841_ap_return;
    end else begin
        ap_return_9 = ap_return_9_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ch_out_V_out_blk_n = ch_out_V_out_full_n;
    end else begin
        ch_out_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ch_out_V_out_write = 1'b1;
    end else begin
        ch_out_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ci_V_out_blk_n = ci_V_out_full_n;
    end else begin
        ci_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ci_V_out_write = 1'b1;
    end else begin
        ci_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        grp_fu_247_ce = 1'b1;
    end else begin
        grp_fu_247_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        grp_fu_413_ce = 1'b1;
    end else begin
        grp_fu_413_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        grp_fu_430_ce = 1'b1;
    end else begin
        grp_fu_430_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        grp_fu_464_ce = 1'b1;
    end else begin
        grp_fu_464_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001_ignoreCallOp185) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001_ignoreCallOp168) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        grp_reg_float_s_fu_794_ap_ce = 1'b1;
    end else begin
        grp_reg_float_s_fu_794_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001_ignoreCallOp189) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001_ignoreCallOp169) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        grp_reg_float_s_fu_799_ap_ce = 1'b1;
    end else begin
        grp_reg_float_s_fu_799_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001_ignoreCallOp193) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001_ignoreCallOp170) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        grp_reg_float_s_fu_804_ap_ce = 1'b1;
    end else begin
        grp_reg_float_s_fu_804_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001_ignoreCallOp199) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001_ignoreCallOp171) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        grp_reg_float_s_fu_809_ap_ce = 1'b1;
    end else begin
        grp_reg_float_s_fu_809_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001_ignoreCallOp203) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001_ignoreCallOp172) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        grp_reg_float_s_fu_814_ap_ce = 1'b1;
    end else begin
        grp_reg_float_s_fu_814_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001_ignoreCallOp207) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001_ignoreCallOp173) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        grp_reg_float_s_fu_819_ap_ce = 1'b1;
    end else begin
        grp_reg_float_s_fu_819_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001_ignoreCallOp213) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001_ignoreCallOp174) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        grp_reg_float_s_fu_824_ap_ce = 1'b1;
    end else begin
        grp_reg_float_s_fu_824_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001_ignoreCallOp217) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001_ignoreCallOp175) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        grp_reg_float_s_fu_829_ap_ce = 1'b1;
    end else begin
        grp_reg_float_s_fu_829_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001_ignoreCallOp221) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001_ignoreCallOp178) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        grp_reg_float_s_fu_841_ap_ce = 1'b1;
    end else begin
        grp_reg_float_s_fu_841_ap_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if (((1'b0 == ap_block_pp0_stage4_subdone) & (ap_reset_idle_pp0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else if (((1'b0 == ap_block_pp0_stage4_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln209_10_fu_669_p2 = (add_ln209_8_reg_1096 + mul_ln214_1_reg_1018);

assign add_ln209_11_fu_673_p2 = (add_ln209_8_reg_1096 + mul_ln214_2_reg_1035);

assign add_ln209_1_fu_443_p2 = ($signed(add_ln209_fu_438_p2) + $signed(mul_ln214_reg_957));

assign add_ln209_2_fu_477_p2 = (mul_ln214_1_reg_1018 + add_ln209_reg_1053);

assign add_ln209_3_fu_532_p2 = (mul_ln214_2_reg_1035 + add_ln209_reg_1053);

assign add_ln209_4_fu_486_p2 = (mul_ln209_1_reg_1064 + zext_ln209_1_reg_1047);

assign add_ln209_5_fu_577_p2 = ($signed(add_ln209_4_reg_1089) + $signed(mul_ln214_reg_957));

assign add_ln209_6_fu_623_p2 = (add_ln209_4_reg_1089 + mul_ln214_1_reg_1018);

assign add_ln209_7_fu_632_p2 = (add_ln209_4_reg_1089 + mul_ln214_2_reg_1035);

assign add_ln209_8_fu_490_p2 = (grp_fu_430_p2 + zext_ln209_1_reg_1047);

assign add_ln209_9_fu_636_p2 = ($signed(add_ln209_8_reg_1096) + $signed(mul_ln214_reg_957));

assign add_ln209_fu_438_p2 = (mul_ln209_reg_1030 + zext_ln209_1_fu_435_p1);

assign add_ln214_1_fu_421_p2 = (2'd1 + trunc_ln68_reg_933);

assign add_ln214_fu_233_p2 = ($signed(2'd3) + $signed(trunc_ln68_fu_219_p1));

assign add_ln68_1_fu_257_p2 = ($signed(10'd1023) + $signed(zext_ln68_1_fu_253_p1));

assign add_ln68_2_fu_369_p2 = (10'd1 + zext_ln68_1_fu_253_p1);

assign add_ln68_3_fu_395_p2 = (10'd1 + zext_ln68_fu_223_p1);

assign add_ln68_fu_227_p2 = ($signed(10'd1023) + $signed(zext_ln68_fu_223_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((ch_out_V_out_full_n == 1'b0) | (ci_V_out_full_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((ch_out_V_out_full_n == 1'b0) | (ci_V_out_full_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((ch_out_V_out_full_n == 1'b0) | (ci_V_out_full_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001_ignoreCallOp168 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001_ignoreCallOp169 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001_ignoreCallOp170 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001_ignoreCallOp171 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001_ignoreCallOp172 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001_ignoreCallOp173 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001_ignoreCallOp174 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001_ignoreCallOp175 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001_ignoreCallOp178 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001_ignoreCallOp185 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001_ignoreCallOp189 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001_ignoreCallOp193 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001_ignoreCallOp199 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001_ignoreCallOp203 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001_ignoreCallOp207 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001_ignoreCallOp213 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001_ignoreCallOp217 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001_ignoreCallOp221 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = (ap_done_reg == 1'b1);
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage3_iter1_ignore_call105 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage3_iter1_ignore_call117 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage3_iter1_ignore_call129 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage3_iter1_ignore_call152 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage3_iter1_ignore_call164 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage3_iter1_ignore_call176 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage3_iter1_ignore_call47 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage3_iter1_ignore_call65 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage3_iter1_ignore_call83 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage4_iter1_ignore_call105 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage4_iter1_ignore_call117 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage4_iter1_ignore_call129 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage4_iter1_ignore_call152 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage4_iter1_ignore_call164 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage4_iter1_ignore_call176 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage4_iter1_ignore_call47 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage4_iter1_ignore_call65 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage4_iter1_ignore_call83 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ch_out_V_out_full_n == 1'b0) | (ci_V_out_full_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0_ignore_call105 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0_ignore_call117 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0_ignore_call129 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0_ignore_call152 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0_ignore_call164 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0_ignore_call176 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0_ignore_call47 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0_ignore_call65 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0_ignore_call83 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0_ignore_call105 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0_ignore_call117 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0_ignore_call129 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0_ignore_call152 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0_ignore_call164 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0_ignore_call176 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0_ignore_call47 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0_ignore_call65 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0_ignore_call83 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ch_out_V_out_din = ch_out_V;

assign ci_V_out_din = ci_V;

assign grp_fu_247_p1 = grp_fu_247_p10;

assign grp_fu_247_p10 = add_ln214_fu_233_p2;

assign grp_fu_413_p1 = grp_fu_413_p10;

assign grp_fu_413_p10 = trunc_ln68_reg_933;

assign grp_fu_430_p1 = grp_fu_430_p10;

assign grp_fu_430_p10 = add_ln214_1_fu_421_p2;

assign grp_fu_464_p0 = grp_fu_464_p00;

assign grp_fu_464_p00 = WeightsCache_ch_out;

assign grp_fu_464_p1 = grp_fu_464_p10;

assign grp_fu_464_p10 = ci_V_read_reg_922;

assign grp_reg_float_s_fu_841_in_r = ((icmp_ln138_8_reg_1212[0:0] === 1'b1) ? ImageCache_IBRAM_q0 : 32'd0);

assign icmp_ln138_1_fu_518_p2 = ((tmp_26_i_i_fu_510_p3 == 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln138_2_fu_559_p2 = ((tmp_28_i_i_fu_551_p3 == 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln138_3_fu_609_p2 = ((tmp_31_i_i_fu_601_p3 == 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln138_4_fu_689_p2 = ((tmp_33_i_i_fu_681_p3 == 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln138_5_fu_715_p2 = ((tmp_35_i_i_fu_707_p3 == 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln138_6_fu_663_p2 = ((tmp_38_i_i_fu_655_p3 == 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln138_7_fu_737_p2 = ((tmp_40_i_i_fu_729_p3 == 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln138_8_fu_755_p2 = ((tmp_42_i_i_fu_747_p3 == 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln138_fu_349_p2 = ((tmp_24_i_i_fu_341_p3 == 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln891_1_fu_303_p2 = (($signed(add_ln68_fu_227_p2) < $signed(zext_ln891_1_fu_299_p1)) ? 1'b1 : 1'b0);

assign icmp_ln891_2_fu_355_p2 = ((x_V_3 < ImageCache_width_in) ? 1'b1 : 1'b0);

assign icmp_ln891_3_fu_375_p2 = ((add_ln68_2_fu_369_p2 < zext_ln891_fu_279_p1) ? 1'b1 : 1'b0);

assign icmp_ln891_4_fu_381_p2 = ((y_V_2 < ImageCache_height_i) ? 1'b1 : 1'b0);

assign icmp_ln891_5_fu_401_p2 = ((add_ln68_3_fu_395_p2 < zext_ln891_1_fu_299_p1) ? 1'b1 : 1'b0);

assign icmp_ln891_fu_283_p2 = (($signed(add_ln68_1_fu_257_p2) < $signed(zext_ln891_fu_279_p1)) ? 1'b1 : 1'b0);

assign mul_ln214_1_fu_912_p0 = mul_ln214_1_fu_912_p00;

assign mul_ln214_1_fu_912_p00 = x_V_3_read_reg_928;

assign mul_ln214_1_fu_912_p1 = zext_ln214_reg_951;

assign mul_ln214_2_fu_917_p0 = mul_ln214_2_fu_917_p00;

assign mul_ln214_2_fu_917_p00 = add_ln68_2_reg_992;

assign mul_ln214_2_fu_917_p1 = zext_ln214_reg_951;

assign mul_ln214_fu_906_p1 = mul_ln214_fu_906_p10;

assign mul_ln214_fu_906_p10 = ImageCache_ch_in_V;

assign or_ln138_10_fu_703_p2 = (xor_ln891_4_reg_1145 | xor_ln891_3_reg_1114);

assign or_ln138_11_fu_645_p2 = (xor_ln891_reg_964 | xor_ln891_5_fu_640_p2);

assign or_ln138_12_fu_650_p2 = (tmp_2_reg_1007 | or_ln138_11_fu_645_p2);

assign or_ln138_13_fu_725_p2 = (xor_ln891_5_reg_1171 | xor_ln891_2_reg_1103);

assign or_ln138_14_fu_743_p2 = (xor_ln891_5_reg_1171 | xor_ln891_3_reg_1114);

assign or_ln138_1_fu_329_p2 = (xor_ln891_fu_289_p2 | xor_ln891_1_fu_309_p2);

assign or_ln138_2_fu_335_p2 = (tmp_fu_321_p3 | or_ln138_1_fu_329_p2);

assign or_ln138_3_fu_500_p2 = (xor_ln891_2_fu_495_p2 | xor_ln891_1_reg_970);

assign or_ln138_4_fu_505_p2 = (tmp_1_reg_986 | or_ln138_3_fu_500_p2);

assign or_ln138_5_fu_541_p2 = (xor_ln891_3_fu_536_p2 | xor_ln891_1_reg_970);

assign or_ln138_6_fu_546_p2 = (tmp_1_reg_986 | or_ln138_5_fu_541_p2);

assign or_ln138_7_fu_591_p2 = (xor_ln891_reg_964 | xor_ln891_4_fu_586_p2);

assign or_ln138_8_fu_596_p2 = (tmp_2_reg_1007 | or_ln138_7_fu_591_p2);

assign or_ln138_9_fu_677_p2 = (xor_ln891_4_reg_1145 | xor_ln891_2_reg_1103);

assign or_ln138_fu_315_p2 = (add_ln68_fu_227_p2 | add_ln68_1_fu_257_p2);

assign select_ln138_1_fu_524_p3 = ((icmp_ln138_1_fu_518_p2[0:0] === 1'b1) ? ImageCache_IBRAM_q0 : 32'd0);

assign select_ln138_2_fu_570_p3 = ((icmp_ln138_2_reg_1120[0:0] === 1'b1) ? ImageCache_IBRAM_q0 : 32'd0);

assign select_ln138_3_fu_615_p3 = ((icmp_ln138_3_fu_609_p2[0:0] === 1'b1) ? ImageCache_IBRAM_q0 : 32'd0);

assign select_ln138_4_fu_695_p3 = ((icmp_ln138_4_fu_689_p2[0:0] === 1'b1) ? ImageCache_IBRAM_q0 : 32'd0);

assign select_ln138_5_fu_761_p3 = ((icmp_ln138_5_reg_1197[0:0] === 1'b1) ? ImageCache_IBRAM_q0 : 32'd0);

assign select_ln138_6_fu_772_p3 = ((icmp_ln138_6_reg_1177[0:0] === 1'b1) ? ImageCache_IBRAM_q0 : 32'd0);

assign select_ln138_7_fu_783_p3 = ((icmp_ln138_7_reg_1207[0:0] === 1'b1) ? ImageCache_IBRAM_q0 : 32'd0);

assign select_ln138_fu_470_p3 = ((icmp_ln138_reg_976[0:0] === 1'b1) ? ImageCache_IBRAM_q0 : 32'd0);

assign tmp_24_i_i_fu_341_p3 = {{10'd0}, {or_ln138_2_fu_335_p2}};

assign tmp_26_i_i_fu_510_p3 = {{10'd0}, {or_ln138_4_fu_505_p2}};

assign tmp_28_i_i_fu_551_p3 = {{10'd0}, {or_ln138_6_fu_546_p2}};

assign tmp_31_i_i_fu_601_p3 = {{10'd0}, {or_ln138_8_fu_596_p2}};

assign tmp_33_i_i_fu_681_p3 = {{10'd0}, {or_ln138_9_fu_677_p2}};

assign tmp_35_i_i_fu_707_p3 = {{10'd0}, {or_ln138_10_fu_703_p2}};

assign tmp_38_i_i_fu_655_p3 = {{10'd0}, {or_ln138_12_fu_650_p2}};

assign tmp_40_i_i_fu_729_p3 = {{10'd0}, {or_ln138_13_fu_725_p2}};

assign tmp_42_i_i_fu_747_p3 = {{10'd0}, {or_ln138_14_fu_743_p2}};

assign tmp_fu_321_p3 = or_ln138_fu_315_p2[32'd9];

assign trunc_ln68_fu_219_p1 = y_V_2[1:0];

assign xor_ln891_1_fu_309_p2 = (icmp_ln891_1_fu_303_p2 ^ 1'd1);

assign xor_ln891_2_fu_495_p2 = (icmp_ln891_2_reg_981 ^ 1'd1);

assign xor_ln891_3_fu_536_p2 = (icmp_ln891_3_reg_997 ^ 1'd1);

assign xor_ln891_4_fu_586_p2 = (icmp_ln891_4_reg_1002 ^ 1'd1);

assign xor_ln891_5_fu_640_p2 = (icmp_ln891_5_reg_1013 ^ 1'd1);

assign xor_ln891_fu_289_p2 = (icmp_ln891_fu_283_p2 ^ 1'd1);

assign zext_ln209_1_fu_435_p1 = ci_V_read_reg_922;

assign zext_ln214_fu_271_p1 = ImageCache_ch_in_V;

assign zext_ln544_10_fu_790_p1 = add_ln209_11_reg_1187;

assign zext_ln544_3_fu_481_p1 = add_ln209_2_fu_477_p2;

assign zext_ln544_4_fu_565_p1 = add_ln209_3_fu_532_p2;

assign zext_ln544_5_fu_581_p1 = add_ln209_5_fu_577_p2;

assign zext_ln544_6_fu_627_p1 = add_ln209_6_fu_623_p2;

assign zext_ln544_7_fu_721_p1 = add_ln209_7_reg_1161;

assign zext_ln544_8_fu_768_p1 = add_ln209_9_reg_1166;

assign zext_ln544_9_fu_779_p1 = add_ln209_10_reg_1182;

assign zext_ln544_fu_448_p1 = add_ln209_1_fu_443_p2;

assign zext_ln68_1_fu_253_p1 = x_V_3;

assign zext_ln68_fu_223_p1 = y_V_2;

assign zext_ln891_1_fu_299_p1 = ImageCache_height_i;

assign zext_ln891_fu_279_p1 = ImageCache_width_in;

always @ (posedge ap_clk) begin
    zext_ln214_reg_951[15:10] <= 6'b000000;
    zext_ln209_1_reg_1047[15:10] <= 6'b000000;
end

endmodule //preloadPixelsAndPrec
