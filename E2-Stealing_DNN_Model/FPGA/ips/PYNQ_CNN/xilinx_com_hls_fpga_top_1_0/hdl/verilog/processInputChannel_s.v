// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module processInputChannel_s (
        y_V,
        x_V,
        ci_in_V,
        ch_out_V,
        ImageCache_line_wid,
        ImageCache_ch_in_V,
        ImageCache_width_in,
        ImageCache_height_i,
        ImageCache_IBRAM_address0,
        ImageCache_IBRAM_ce0,
        ImageCache_IBRAM_d0,
        ImageCache_IBRAM_q0,
        ImageCache_IBRAM_we0,
        ImageCache_IBRAM_address1,
        ImageCache_IBRAM_ce1,
        ImageCache_IBRAM_d1,
        ImageCache_IBRAM_q1,
        ImageCache_IBRAM_we1,
        WeightsCache_ch_out,
        WeightsCache_kernel,
        WBRAM_0_0_0_address0,
        WBRAM_0_0_0_ce0,
        WBRAM_0_0_0_d0,
        WBRAM_0_0_0_q0,
        WBRAM_0_0_0_we0,
        WBRAM_0_0_0_address1,
        WBRAM_0_0_0_ce1,
        WBRAM_0_0_0_d1,
        WBRAM_0_0_0_q1,
        WBRAM_0_0_0_we1,
        WBRAM_0_0_1_address0,
        WBRAM_0_0_1_ce0,
        WBRAM_0_0_1_d0,
        WBRAM_0_0_1_q0,
        WBRAM_0_0_1_we0,
        WBRAM_0_0_1_address1,
        WBRAM_0_0_1_ce1,
        WBRAM_0_0_1_d1,
        WBRAM_0_0_1_q1,
        WBRAM_0_0_1_we1,
        WBRAM_0_0_2_address0,
        WBRAM_0_0_2_ce0,
        WBRAM_0_0_2_d0,
        WBRAM_0_0_2_q0,
        WBRAM_0_0_2_we0,
        WBRAM_0_0_2_address1,
        WBRAM_0_0_2_ce1,
        WBRAM_0_0_2_d1,
        WBRAM_0_0_2_q1,
        WBRAM_0_0_2_we1,
        WBRAM_0_0_3_address0,
        WBRAM_0_0_3_ce0,
        WBRAM_0_0_3_d0,
        WBRAM_0_0_3_q0,
        WBRAM_0_0_3_we0,
        WBRAM_0_0_3_address1,
        WBRAM_0_0_3_ce1,
        WBRAM_0_0_3_d1,
        WBRAM_0_0_3_q1,
        WBRAM_0_0_3_we1,
        WBRAM_0_0_4_address0,
        WBRAM_0_0_4_ce0,
        WBRAM_0_0_4_d0,
        WBRAM_0_0_4_q0,
        WBRAM_0_0_4_we0,
        WBRAM_0_0_4_address1,
        WBRAM_0_0_4_ce1,
        WBRAM_0_0_4_d1,
        WBRAM_0_0_4_q1,
        WBRAM_0_0_4_we1,
        WBRAM_0_0_5_address0,
        WBRAM_0_0_5_ce0,
        WBRAM_0_0_5_d0,
        WBRAM_0_0_5_q0,
        WBRAM_0_0_5_we0,
        WBRAM_0_0_5_address1,
        WBRAM_0_0_5_ce1,
        WBRAM_0_0_5_d1,
        WBRAM_0_0_5_q1,
        WBRAM_0_0_5_we1,
        WBRAM_0_0_6_address0,
        WBRAM_0_0_6_ce0,
        WBRAM_0_0_6_d0,
        WBRAM_0_0_6_q0,
        WBRAM_0_0_6_we0,
        WBRAM_0_0_6_address1,
        WBRAM_0_0_6_ce1,
        WBRAM_0_0_6_d1,
        WBRAM_0_0_6_q1,
        WBRAM_0_0_6_we1,
        WBRAM_0_0_7_address0,
        WBRAM_0_0_7_ce0,
        WBRAM_0_0_7_d0,
        WBRAM_0_0_7_q0,
        WBRAM_0_0_7_we0,
        WBRAM_0_0_7_address1,
        WBRAM_0_0_7_ce1,
        WBRAM_0_0_7_d1,
        WBRAM_0_0_7_q1,
        WBRAM_0_0_7_we1,
        WBRAM_0_0_8_address0,
        WBRAM_0_0_8_ce0,
        WBRAM_0_0_8_d0,
        WBRAM_0_0_8_q0,
        WBRAM_0_0_8_we0,
        WBRAM_0_0_8_address1,
        WBRAM_0_0_8_ce1,
        WBRAM_0_0_8_d1,
        WBRAM_0_0_8_q1,
        WBRAM_0_0_8_we1,
        OutputCache_OBRAM_address0,
        OutputCache_OBRAM_ce0,
        OutputCache_OBRAM_d0,
        OutputCache_OBRAM_q0,
        OutputCache_OBRAM_we0,
        OutputCache_OBRAM_address1,
        OutputCache_OBRAM_ce1,
        OutputCache_OBRAM_d1,
        OutputCache_OBRAM_q1,
        OutputCache_OBRAM_we1,
        ap_clk,
        ap_rst,
        y_V_ap_vld,
        x_V_ap_vld,
        ci_in_V_ap_vld,
        ch_out_V_ap_vld,
        ImageCache_line_wid_ap_vld,
        ImageCache_ch_in_V_ap_vld,
        ImageCache_width_in_ap_vld,
        ImageCache_height_i_ap_vld,
        WeightsCache_ch_out_ap_vld,
        ap_start,
        WeightsCache_kernel_ap_vld,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [8:0] y_V;
input  [8:0] x_V;
input  [9:0] ci_in_V;
input  [9:0] ch_out_V;
input  [15:0] ImageCache_line_wid;
input  [9:0] ImageCache_ch_in_V;
input  [8:0] ImageCache_width_in;
input  [8:0] ImageCache_height_i;
output  [14:0] ImageCache_IBRAM_address0;
output   ImageCache_IBRAM_ce0;
output  [31:0] ImageCache_IBRAM_d0;
input  [31:0] ImageCache_IBRAM_q0;
output   ImageCache_IBRAM_we0;
output  [14:0] ImageCache_IBRAM_address1;
output   ImageCache_IBRAM_ce1;
output  [31:0] ImageCache_IBRAM_d1;
input  [31:0] ImageCache_IBRAM_q1;
output   ImageCache_IBRAM_we1;
input  [9:0] WeightsCache_ch_out;
input  [1:0] WeightsCache_kernel;
output  [9:0] WBRAM_0_0_0_address0;
output   WBRAM_0_0_0_ce0;
output  [31:0] WBRAM_0_0_0_d0;
input  [31:0] WBRAM_0_0_0_q0;
output   WBRAM_0_0_0_we0;
output  [9:0] WBRAM_0_0_0_address1;
output   WBRAM_0_0_0_ce1;
output  [31:0] WBRAM_0_0_0_d1;
input  [31:0] WBRAM_0_0_0_q1;
output   WBRAM_0_0_0_we1;
output  [9:0] WBRAM_0_0_1_address0;
output   WBRAM_0_0_1_ce0;
output  [31:0] WBRAM_0_0_1_d0;
input  [31:0] WBRAM_0_0_1_q0;
output   WBRAM_0_0_1_we0;
output  [9:0] WBRAM_0_0_1_address1;
output   WBRAM_0_0_1_ce1;
output  [31:0] WBRAM_0_0_1_d1;
input  [31:0] WBRAM_0_0_1_q1;
output   WBRAM_0_0_1_we1;
output  [9:0] WBRAM_0_0_2_address0;
output   WBRAM_0_0_2_ce0;
output  [31:0] WBRAM_0_0_2_d0;
input  [31:0] WBRAM_0_0_2_q0;
output   WBRAM_0_0_2_we0;
output  [9:0] WBRAM_0_0_2_address1;
output   WBRAM_0_0_2_ce1;
output  [31:0] WBRAM_0_0_2_d1;
input  [31:0] WBRAM_0_0_2_q1;
output   WBRAM_0_0_2_we1;
output  [9:0] WBRAM_0_0_3_address0;
output   WBRAM_0_0_3_ce0;
output  [31:0] WBRAM_0_0_3_d0;
input  [31:0] WBRAM_0_0_3_q0;
output   WBRAM_0_0_3_we0;
output  [9:0] WBRAM_0_0_3_address1;
output   WBRAM_0_0_3_ce1;
output  [31:0] WBRAM_0_0_3_d1;
input  [31:0] WBRAM_0_0_3_q1;
output   WBRAM_0_0_3_we1;
output  [9:0] WBRAM_0_0_4_address0;
output   WBRAM_0_0_4_ce0;
output  [31:0] WBRAM_0_0_4_d0;
input  [31:0] WBRAM_0_0_4_q0;
output   WBRAM_0_0_4_we0;
output  [9:0] WBRAM_0_0_4_address1;
output   WBRAM_0_0_4_ce1;
output  [31:0] WBRAM_0_0_4_d1;
input  [31:0] WBRAM_0_0_4_q1;
output   WBRAM_0_0_4_we1;
output  [9:0] WBRAM_0_0_5_address0;
output   WBRAM_0_0_5_ce0;
output  [31:0] WBRAM_0_0_5_d0;
input  [31:0] WBRAM_0_0_5_q0;
output   WBRAM_0_0_5_we0;
output  [9:0] WBRAM_0_0_5_address1;
output   WBRAM_0_0_5_ce1;
output  [31:0] WBRAM_0_0_5_d1;
input  [31:0] WBRAM_0_0_5_q1;
output   WBRAM_0_0_5_we1;
output  [9:0] WBRAM_0_0_6_address0;
output   WBRAM_0_0_6_ce0;
output  [31:0] WBRAM_0_0_6_d0;
input  [31:0] WBRAM_0_0_6_q0;
output   WBRAM_0_0_6_we0;
output  [9:0] WBRAM_0_0_6_address1;
output   WBRAM_0_0_6_ce1;
output  [31:0] WBRAM_0_0_6_d1;
input  [31:0] WBRAM_0_0_6_q1;
output   WBRAM_0_0_6_we1;
output  [9:0] WBRAM_0_0_7_address0;
output   WBRAM_0_0_7_ce0;
output  [31:0] WBRAM_0_0_7_d0;
input  [31:0] WBRAM_0_0_7_q0;
output   WBRAM_0_0_7_we0;
output  [9:0] WBRAM_0_0_7_address1;
output   WBRAM_0_0_7_ce1;
output  [31:0] WBRAM_0_0_7_d1;
input  [31:0] WBRAM_0_0_7_q1;
output   WBRAM_0_0_7_we1;
output  [9:0] WBRAM_0_0_8_address0;
output   WBRAM_0_0_8_ce0;
output  [31:0] WBRAM_0_0_8_d0;
input  [31:0] WBRAM_0_0_8_q0;
output   WBRAM_0_0_8_we0;
output  [9:0] WBRAM_0_0_8_address1;
output   WBRAM_0_0_8_ce1;
output  [31:0] WBRAM_0_0_8_d1;
input  [31:0] WBRAM_0_0_8_q1;
output   WBRAM_0_0_8_we1;
output  [8:0] OutputCache_OBRAM_address0;
output   OutputCache_OBRAM_ce0;
output  [31:0] OutputCache_OBRAM_d0;
input  [31:0] OutputCache_OBRAM_q0;
output   OutputCache_OBRAM_we0;
output  [8:0] OutputCache_OBRAM_address1;
output   OutputCache_OBRAM_ce1;
output  [31:0] OutputCache_OBRAM_d1;
input  [31:0] OutputCache_OBRAM_q1;
output   OutputCache_OBRAM_we1;
input   ap_clk;
input   ap_rst;
input   y_V_ap_vld;
input   x_V_ap_vld;
input   ci_in_V_ap_vld;
input   ch_out_V_ap_vld;
input   ImageCache_line_wid_ap_vld;
input   ImageCache_ch_in_V_ap_vld;
input   ImageCache_width_in_ap_vld;
input   ImageCache_height_i_ap_vld;
input   WeightsCache_ch_out_ap_vld;
input   ap_start;
input   WeightsCache_kernel_ap_vld;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    preloadPixelsAndPrec_U0_ap_start;
wire    preloadPixelsAndPrec_U0_ap_done;
wire    preloadPixelsAndPrec_U0_ap_continue;
wire    preloadPixelsAndPrec_U0_ap_idle;
wire    preloadPixelsAndPrec_U0_ap_ready;
wire   [9:0] preloadPixelsAndPrec_U0_ci_V_out_din;
wire    preloadPixelsAndPrec_U0_ci_V_out_write;
wire   [9:0] preloadPixelsAndPrec_U0_ch_out_V_out_din;
wire    preloadPixelsAndPrec_U0_ch_out_V_out_write;
wire   [14:0] preloadPixelsAndPrec_U0_ImageCache_IBRAM_address0;
wire    preloadPixelsAndPrec_U0_ImageCache_IBRAM_ce0;
wire   [18:0] preloadPixelsAndPrec_U0_ap_return_0;
wire   [31:0] preloadPixelsAndPrec_U0_ap_return_1;
wire   [31:0] preloadPixelsAndPrec_U0_ap_return_2;
wire   [31:0] preloadPixelsAndPrec_U0_ap_return_3;
wire   [31:0] preloadPixelsAndPrec_U0_ap_return_4;
wire   [31:0] preloadPixelsAndPrec_U0_ap_return_5;
wire   [31:0] preloadPixelsAndPrec_U0_ap_return_6;
wire   [31:0] preloadPixelsAndPrec_U0_ap_return_7;
wire   [31:0] preloadPixelsAndPrec_U0_ap_return_8;
wire   [31:0] preloadPixelsAndPrec_U0_ap_return_9;
wire    ap_channel_done_pixel_buffer_8;
wire    pixel_buffer_8_full_n;
reg    ap_sync_reg_channel_write_pixel_buffer_8;
wire    ap_sync_channel_write_pixel_buffer_8;
wire    ap_channel_done_pixel_buffer_7;
wire    pixel_buffer_7_full_n;
reg    ap_sync_reg_channel_write_pixel_buffer_7;
wire    ap_sync_channel_write_pixel_buffer_7;
wire    ap_channel_done_pixel_buffer_6;
wire    pixel_buffer_6_full_n;
reg    ap_sync_reg_channel_write_pixel_buffer_6;
wire    ap_sync_channel_write_pixel_buffer_6;
wire    ap_channel_done_pixel_buffer_5;
wire    pixel_buffer_5_full_n;
reg    ap_sync_reg_channel_write_pixel_buffer_5;
wire    ap_sync_channel_write_pixel_buffer_5;
wire    ap_channel_done_pixel_buffer_4;
wire    pixel_buffer_4_full_n;
reg    ap_sync_reg_channel_write_pixel_buffer_4;
wire    ap_sync_channel_write_pixel_buffer_4;
wire    ap_channel_done_pixel_buffer_3;
wire    pixel_buffer_3_full_n;
reg    ap_sync_reg_channel_write_pixel_buffer_3;
wire    ap_sync_channel_write_pixel_buffer_3;
wire    ap_channel_done_pixel_buffer_2;
wire    pixel_buffer_2_full_n;
reg    ap_sync_reg_channel_write_pixel_buffer_2;
wire    ap_sync_channel_write_pixel_buffer_2;
wire    ap_channel_done_pixel_buffer_1;
wire    pixel_buffer_1_full_n;
reg    ap_sync_reg_channel_write_pixel_buffer_1;
wire    ap_sync_channel_write_pixel_buffer_1;
wire    ap_channel_done_pixel_buffer_0;
wire    pixel_buffer_0_full_n;
reg    ap_sync_reg_channel_write_pixel_buffer_0;
wire    ap_sync_channel_write_pixel_buffer_0;
wire    ap_channel_done_ci_offset_V;
wire    ci_offset_V_full_n;
reg    ap_sync_reg_channel_write_ci_offset_V;
wire    ap_sync_channel_write_ci_offset_V;
wire    processAllCHout_U0_ap_start;
wire    processAllCHout_U0_ap_done;
wire    processAllCHout_U0_ap_continue;
wire    processAllCHout_U0_ap_idle;
wire    processAllCHout_U0_ap_ready;
wire    processAllCHout_U0_ch_out_V_read;
wire    processAllCHout_U0_ci_in_V_read;
wire   [9:0] processAllCHout_U0_WBRAM_0_0_0_address0;
wire    processAllCHout_U0_WBRAM_0_0_0_ce0;
wire   [9:0] processAllCHout_U0_WBRAM_0_0_1_address0;
wire    processAllCHout_U0_WBRAM_0_0_1_ce0;
wire   [9:0] processAllCHout_U0_WBRAM_0_0_2_address0;
wire    processAllCHout_U0_WBRAM_0_0_2_ce0;
wire   [9:0] processAllCHout_U0_WBRAM_0_0_3_address0;
wire    processAllCHout_U0_WBRAM_0_0_3_ce0;
wire   [9:0] processAllCHout_U0_WBRAM_0_0_4_address0;
wire    processAllCHout_U0_WBRAM_0_0_4_ce0;
wire   [9:0] processAllCHout_U0_WBRAM_0_0_5_address0;
wire    processAllCHout_U0_WBRAM_0_0_5_ce0;
wire   [9:0] processAllCHout_U0_WBRAM_0_0_6_address0;
wire    processAllCHout_U0_WBRAM_0_0_6_ce0;
wire   [9:0] processAllCHout_U0_WBRAM_0_0_7_address0;
wire    processAllCHout_U0_WBRAM_0_0_7_ce0;
wire   [9:0] processAllCHout_U0_WBRAM_0_0_8_address0;
wire    processAllCHout_U0_WBRAM_0_0_8_ce0;
wire   [8:0] processAllCHout_U0_OutputCache_OBRAM_address0;
wire    processAllCHout_U0_OutputCache_OBRAM_ce0;
wire    processAllCHout_U0_OutputCache_OBRAM_we0;
wire   [31:0] processAllCHout_U0_OutputCache_OBRAM_d0;
wire   [8:0] processAllCHout_U0_OutputCache_OBRAM_address1;
wire    processAllCHout_U0_OutputCache_OBRAM_ce1;
wire    processAllCHout_U0_OutputCache_OBRAM_we1;
wire   [31:0] processAllCHout_U0_OutputCache_OBRAM_d1;
wire    ap_sync_continue;
wire    ci_in_V_c_full_n;
wire   [9:0] ci_in_V_c_dout;
wire    ci_in_V_c_empty_n;
wire    ch_out_V_c_full_n;
wire   [9:0] ch_out_V_c_dout;
wire    ch_out_V_c_empty_n;
wire   [18:0] ci_offset_V_dout;
wire    ci_offset_V_empty_n;
wire   [31:0] pixel_buffer_0_dout;
wire    pixel_buffer_0_empty_n;
wire   [31:0] pixel_buffer_1_dout;
wire    pixel_buffer_1_empty_n;
wire   [31:0] pixel_buffer_2_dout;
wire    pixel_buffer_2_empty_n;
wire   [31:0] pixel_buffer_3_dout;
wire    pixel_buffer_3_empty_n;
wire   [31:0] pixel_buffer_4_dout;
wire    pixel_buffer_4_empty_n;
wire   [31:0] pixel_buffer_5_dout;
wire    pixel_buffer_5_empty_n;
wire   [31:0] pixel_buffer_6_dout;
wire    pixel_buffer_6_empty_n;
wire   [31:0] pixel_buffer_7_dout;
wire    pixel_buffer_7_empty_n;
wire   [31:0] pixel_buffer_8_dout;
wire    pixel_buffer_8_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
reg    ap_sync_reg_preloadPixelsAndPrec_U0_ap_ready;
wire    ap_sync_preloadPixelsAndPrec_U0_ap_ready;
reg   [1:0] preloadPixelsAndPrec_U0_ap_ready_count;
reg    ap_sync_reg_processAllCHout_U0_ap_ready;
wire    ap_sync_processAllCHout_U0_ap_ready;
reg   [1:0] processAllCHout_U0_ap_ready_count;
wire    preloadPixelsAndPrec_U0_start_full_n;
wire    preloadPixelsAndPrec_U0_start_write;
wire    processAllCHout_U0_start_full_n;
wire    processAllCHout_U0_start_write;

// power-on initialization
initial begin
#0 ap_sync_reg_channel_write_pixel_buffer_8 = 1'b0;
#0 ap_sync_reg_channel_write_pixel_buffer_7 = 1'b0;
#0 ap_sync_reg_channel_write_pixel_buffer_6 = 1'b0;
#0 ap_sync_reg_channel_write_pixel_buffer_5 = 1'b0;
#0 ap_sync_reg_channel_write_pixel_buffer_4 = 1'b0;
#0 ap_sync_reg_channel_write_pixel_buffer_3 = 1'b0;
#0 ap_sync_reg_channel_write_pixel_buffer_2 = 1'b0;
#0 ap_sync_reg_channel_write_pixel_buffer_1 = 1'b0;
#0 ap_sync_reg_channel_write_pixel_buffer_0 = 1'b0;
#0 ap_sync_reg_channel_write_ci_offset_V = 1'b0;
#0 ap_sync_reg_preloadPixelsAndPrec_U0_ap_ready = 1'b0;
#0 preloadPixelsAndPrec_U0_ap_ready_count = 2'd0;
#0 ap_sync_reg_processAllCHout_U0_ap_ready = 1'b0;
#0 processAllCHout_U0_ap_ready_count = 2'd0;
end

preloadPixelsAndPrec preloadPixelsAndPrec_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(preloadPixelsAndPrec_U0_ap_start),
    .ap_done(preloadPixelsAndPrec_U0_ap_done),
    .ap_continue(preloadPixelsAndPrec_U0_ap_continue),
    .ap_idle(preloadPixelsAndPrec_U0_ap_idle),
    .ap_ready(preloadPixelsAndPrec_U0_ap_ready),
    .y_V_2(y_V),
    .x_V_3(x_V),
    .ci_V(ci_in_V),
    .ch_out_V(ch_out_V),
    .ci_V_out_din(preloadPixelsAndPrec_U0_ci_V_out_din),
    .ci_V_out_full_n(ci_in_V_c_full_n),
    .ci_V_out_write(preloadPixelsAndPrec_U0_ci_V_out_write),
    .ch_out_V_out_din(preloadPixelsAndPrec_U0_ch_out_V_out_din),
    .ch_out_V_out_full_n(ch_out_V_c_full_n),
    .ch_out_V_out_write(preloadPixelsAndPrec_U0_ch_out_V_out_write),
    .ImageCache_line_wid(ImageCache_line_wid),
    .ImageCache_ch_in_V(ImageCache_ch_in_V),
    .ImageCache_width_in(ImageCache_width_in),
    .ImageCache_height_i(ImageCache_height_i),
    .ImageCache_IBRAM_address0(preloadPixelsAndPrec_U0_ImageCache_IBRAM_address0),
    .ImageCache_IBRAM_ce0(preloadPixelsAndPrec_U0_ImageCache_IBRAM_ce0),
    .ImageCache_IBRAM_q0(ImageCache_IBRAM_q0),
    .WeightsCache_ch_out(WeightsCache_ch_out),
    .ap_return_0(preloadPixelsAndPrec_U0_ap_return_0),
    .ap_return_1(preloadPixelsAndPrec_U0_ap_return_1),
    .ap_return_2(preloadPixelsAndPrec_U0_ap_return_2),
    .ap_return_3(preloadPixelsAndPrec_U0_ap_return_3),
    .ap_return_4(preloadPixelsAndPrec_U0_ap_return_4),
    .ap_return_5(preloadPixelsAndPrec_U0_ap_return_5),
    .ap_return_6(preloadPixelsAndPrec_U0_ap_return_6),
    .ap_return_7(preloadPixelsAndPrec_U0_ap_return_7),
    .ap_return_8(preloadPixelsAndPrec_U0_ap_return_8),
    .ap_return_9(preloadPixelsAndPrec_U0_ap_return_9)
);

processAllCHout processAllCHout_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(processAllCHout_U0_ap_start),
    .ap_done(processAllCHout_U0_ap_done),
    .ap_continue(processAllCHout_U0_ap_continue),
    .ap_idle(processAllCHout_U0_ap_idle),
    .ap_ready(processAllCHout_U0_ap_ready),
    .ch_out_V_dout(ch_out_V_c_dout),
    .ch_out_V_empty_n(ch_out_V_c_empty_n),
    .ch_out_V_read(processAllCHout_U0_ch_out_V_read),
    .ci_in_V_dout(ci_in_V_c_dout),
    .ci_in_V_empty_n(ci_in_V_c_empty_n),
    .ci_in_V_read(processAllCHout_U0_ci_in_V_read),
    .p_read(ci_offset_V_dout),
    .pixels_0_read(pixel_buffer_0_dout),
    .pixels_1_read(pixel_buffer_1_dout),
    .pixels_2_read(pixel_buffer_2_dout),
    .pixels_3_read(pixel_buffer_3_dout),
    .pixels_4_read(pixel_buffer_4_dout),
    .pixels_5_read(pixel_buffer_5_dout),
    .pixels_6_read(pixel_buffer_6_dout),
    .pixels_7_read(pixel_buffer_7_dout),
    .pixels_8_read(pixel_buffer_8_dout),
    .WeightsCache_kernel(WeightsCache_kernel),
    .WBRAM_0_0_0_address0(processAllCHout_U0_WBRAM_0_0_0_address0),
    .WBRAM_0_0_0_ce0(processAllCHout_U0_WBRAM_0_0_0_ce0),
    .WBRAM_0_0_0_q0(WBRAM_0_0_0_q0),
    .WBRAM_0_0_1_address0(processAllCHout_U0_WBRAM_0_0_1_address0),
    .WBRAM_0_0_1_ce0(processAllCHout_U0_WBRAM_0_0_1_ce0),
    .WBRAM_0_0_1_q0(WBRAM_0_0_1_q0),
    .WBRAM_0_0_2_address0(processAllCHout_U0_WBRAM_0_0_2_address0),
    .WBRAM_0_0_2_ce0(processAllCHout_U0_WBRAM_0_0_2_ce0),
    .WBRAM_0_0_2_q0(WBRAM_0_0_2_q0),
    .WBRAM_0_0_3_address0(processAllCHout_U0_WBRAM_0_0_3_address0),
    .WBRAM_0_0_3_ce0(processAllCHout_U0_WBRAM_0_0_3_ce0),
    .WBRAM_0_0_3_q0(WBRAM_0_0_3_q0),
    .WBRAM_0_0_4_address0(processAllCHout_U0_WBRAM_0_0_4_address0),
    .WBRAM_0_0_4_ce0(processAllCHout_U0_WBRAM_0_0_4_ce0),
    .WBRAM_0_0_4_q0(WBRAM_0_0_4_q0),
    .WBRAM_0_0_5_address0(processAllCHout_U0_WBRAM_0_0_5_address0),
    .WBRAM_0_0_5_ce0(processAllCHout_U0_WBRAM_0_0_5_ce0),
    .WBRAM_0_0_5_q0(WBRAM_0_0_5_q0),
    .WBRAM_0_0_6_address0(processAllCHout_U0_WBRAM_0_0_6_address0),
    .WBRAM_0_0_6_ce0(processAllCHout_U0_WBRAM_0_0_6_ce0),
    .WBRAM_0_0_6_q0(WBRAM_0_0_6_q0),
    .WBRAM_0_0_7_address0(processAllCHout_U0_WBRAM_0_0_7_address0),
    .WBRAM_0_0_7_ce0(processAllCHout_U0_WBRAM_0_0_7_ce0),
    .WBRAM_0_0_7_q0(WBRAM_0_0_7_q0),
    .WBRAM_0_0_8_address0(processAllCHout_U0_WBRAM_0_0_8_address0),
    .WBRAM_0_0_8_ce0(processAllCHout_U0_WBRAM_0_0_8_ce0),
    .WBRAM_0_0_8_q0(WBRAM_0_0_8_q0),
    .OutputCache_OBRAM_address0(processAllCHout_U0_OutputCache_OBRAM_address0),
    .OutputCache_OBRAM_ce0(processAllCHout_U0_OutputCache_OBRAM_ce0),
    .OutputCache_OBRAM_we0(processAllCHout_U0_OutputCache_OBRAM_we0),
    .OutputCache_OBRAM_d0(processAllCHout_U0_OutputCache_OBRAM_d0),
    .OutputCache_OBRAM_q0(OutputCache_OBRAM_q0),
    .OutputCache_OBRAM_address1(processAllCHout_U0_OutputCache_OBRAM_address1),
    .OutputCache_OBRAM_ce1(processAllCHout_U0_OutputCache_OBRAM_ce1),
    .OutputCache_OBRAM_we1(processAllCHout_U0_OutputCache_OBRAM_we1),
    .OutputCache_OBRAM_d1(processAllCHout_U0_OutputCache_OBRAM_d1)
);

fifo_w10_d2_A ci_in_V_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(preloadPixelsAndPrec_U0_ci_V_out_din),
    .if_full_n(ci_in_V_c_full_n),
    .if_write(preloadPixelsAndPrec_U0_ci_V_out_write),
    .if_dout(ci_in_V_c_dout),
    .if_empty_n(ci_in_V_c_empty_n),
    .if_read(processAllCHout_U0_ci_in_V_read)
);

fifo_w10_d2_A ch_out_V_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(preloadPixelsAndPrec_U0_ch_out_V_out_din),
    .if_full_n(ch_out_V_c_full_n),
    .if_write(preloadPixelsAndPrec_U0_ch_out_V_out_write),
    .if_dout(ch_out_V_c_dout),
    .if_empty_n(ch_out_V_c_empty_n),
    .if_read(processAllCHout_U0_ch_out_V_read)
);

fifo_w19_d2_A ci_offset_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(preloadPixelsAndPrec_U0_ap_return_0),
    .if_full_n(ci_offset_V_full_n),
    .if_write(ap_channel_done_ci_offset_V),
    .if_dout(ci_offset_V_dout),
    .if_empty_n(ci_offset_V_empty_n),
    .if_read(processAllCHout_U0_ap_ready)
);

fifo_w32_d2_A pixel_buffer_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(preloadPixelsAndPrec_U0_ap_return_1),
    .if_full_n(pixel_buffer_0_full_n),
    .if_write(ap_channel_done_pixel_buffer_0),
    .if_dout(pixel_buffer_0_dout),
    .if_empty_n(pixel_buffer_0_empty_n),
    .if_read(processAllCHout_U0_ap_ready)
);

fifo_w32_d2_A pixel_buffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(preloadPixelsAndPrec_U0_ap_return_2),
    .if_full_n(pixel_buffer_1_full_n),
    .if_write(ap_channel_done_pixel_buffer_1),
    .if_dout(pixel_buffer_1_dout),
    .if_empty_n(pixel_buffer_1_empty_n),
    .if_read(processAllCHout_U0_ap_ready)
);

fifo_w32_d2_A pixel_buffer_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(preloadPixelsAndPrec_U0_ap_return_3),
    .if_full_n(pixel_buffer_2_full_n),
    .if_write(ap_channel_done_pixel_buffer_2),
    .if_dout(pixel_buffer_2_dout),
    .if_empty_n(pixel_buffer_2_empty_n),
    .if_read(processAllCHout_U0_ap_ready)
);

fifo_w32_d2_A pixel_buffer_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(preloadPixelsAndPrec_U0_ap_return_4),
    .if_full_n(pixel_buffer_3_full_n),
    .if_write(ap_channel_done_pixel_buffer_3),
    .if_dout(pixel_buffer_3_dout),
    .if_empty_n(pixel_buffer_3_empty_n),
    .if_read(processAllCHout_U0_ap_ready)
);

fifo_w32_d2_A pixel_buffer_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(preloadPixelsAndPrec_U0_ap_return_5),
    .if_full_n(pixel_buffer_4_full_n),
    .if_write(ap_channel_done_pixel_buffer_4),
    .if_dout(pixel_buffer_4_dout),
    .if_empty_n(pixel_buffer_4_empty_n),
    .if_read(processAllCHout_U0_ap_ready)
);

fifo_w32_d2_A pixel_buffer_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(preloadPixelsAndPrec_U0_ap_return_6),
    .if_full_n(pixel_buffer_5_full_n),
    .if_write(ap_channel_done_pixel_buffer_5),
    .if_dout(pixel_buffer_5_dout),
    .if_empty_n(pixel_buffer_5_empty_n),
    .if_read(processAllCHout_U0_ap_ready)
);

fifo_w32_d2_A pixel_buffer_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(preloadPixelsAndPrec_U0_ap_return_7),
    .if_full_n(pixel_buffer_6_full_n),
    .if_write(ap_channel_done_pixel_buffer_6),
    .if_dout(pixel_buffer_6_dout),
    .if_empty_n(pixel_buffer_6_empty_n),
    .if_read(processAllCHout_U0_ap_ready)
);

fifo_w32_d2_A pixel_buffer_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(preloadPixelsAndPrec_U0_ap_return_8),
    .if_full_n(pixel_buffer_7_full_n),
    .if_write(ap_channel_done_pixel_buffer_7),
    .if_dout(pixel_buffer_7_dout),
    .if_empty_n(pixel_buffer_7_empty_n),
    .if_read(processAllCHout_U0_ap_ready)
);

fifo_w32_d2_A pixel_buffer_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(preloadPixelsAndPrec_U0_ap_return_9),
    .if_full_n(pixel_buffer_8_full_n),
    .if_write(ap_channel_done_pixel_buffer_8),
    .if_dout(pixel_buffer_8_dout),
    .if_empty_n(pixel_buffer_8_empty_n),
    .if_read(processAllCHout_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_ci_offset_V <= 1'b0;
    end else begin
        if (((preloadPixelsAndPrec_U0_ap_done & preloadPixelsAndPrec_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_ci_offset_V <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_ci_offset_V <= ap_sync_channel_write_ci_offset_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_pixel_buffer_0 <= 1'b0;
    end else begin
        if (((preloadPixelsAndPrec_U0_ap_done & preloadPixelsAndPrec_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_pixel_buffer_0 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_pixel_buffer_0 <= ap_sync_channel_write_pixel_buffer_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_pixel_buffer_1 <= 1'b0;
    end else begin
        if (((preloadPixelsAndPrec_U0_ap_done & preloadPixelsAndPrec_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_pixel_buffer_1 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_pixel_buffer_1 <= ap_sync_channel_write_pixel_buffer_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_pixel_buffer_2 <= 1'b0;
    end else begin
        if (((preloadPixelsAndPrec_U0_ap_done & preloadPixelsAndPrec_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_pixel_buffer_2 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_pixel_buffer_2 <= ap_sync_channel_write_pixel_buffer_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_pixel_buffer_3 <= 1'b0;
    end else begin
        if (((preloadPixelsAndPrec_U0_ap_done & preloadPixelsAndPrec_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_pixel_buffer_3 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_pixel_buffer_3 <= ap_sync_channel_write_pixel_buffer_3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_pixel_buffer_4 <= 1'b0;
    end else begin
        if (((preloadPixelsAndPrec_U0_ap_done & preloadPixelsAndPrec_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_pixel_buffer_4 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_pixel_buffer_4 <= ap_sync_channel_write_pixel_buffer_4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_pixel_buffer_5 <= 1'b0;
    end else begin
        if (((preloadPixelsAndPrec_U0_ap_done & preloadPixelsAndPrec_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_pixel_buffer_5 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_pixel_buffer_5 <= ap_sync_channel_write_pixel_buffer_5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_pixel_buffer_6 <= 1'b0;
    end else begin
        if (((preloadPixelsAndPrec_U0_ap_done & preloadPixelsAndPrec_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_pixel_buffer_6 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_pixel_buffer_6 <= ap_sync_channel_write_pixel_buffer_6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_pixel_buffer_7 <= 1'b0;
    end else begin
        if (((preloadPixelsAndPrec_U0_ap_done & preloadPixelsAndPrec_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_pixel_buffer_7 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_pixel_buffer_7 <= ap_sync_channel_write_pixel_buffer_7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_pixel_buffer_8 <= 1'b0;
    end else begin
        if (((preloadPixelsAndPrec_U0_ap_done & preloadPixelsAndPrec_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_pixel_buffer_8 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_pixel_buffer_8 <= ap_sync_channel_write_pixel_buffer_8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_preloadPixelsAndPrec_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_preloadPixelsAndPrec_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_preloadPixelsAndPrec_U0_ap_ready <= ap_sync_preloadPixelsAndPrec_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_processAllCHout_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_processAllCHout_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_processAllCHout_U0_ap_ready <= ap_sync_processAllCHout_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sync_ready == 1'b1) & (preloadPixelsAndPrec_U0_ap_ready == 1'b0))) begin
        preloadPixelsAndPrec_U0_ap_ready_count <= (preloadPixelsAndPrec_U0_ap_ready_count - 2'd1);
    end else if (((preloadPixelsAndPrec_U0_ap_ready == 1'b1) & (ap_sync_ready == 1'b0))) begin
        preloadPixelsAndPrec_U0_ap_ready_count <= (preloadPixelsAndPrec_U0_ap_ready_count + 2'd1);
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sync_ready == 1'b1) & (processAllCHout_U0_ap_ready == 1'b0))) begin
        processAllCHout_U0_ap_ready_count <= (processAllCHout_U0_ap_ready_count - 2'd1);
    end else if (((processAllCHout_U0_ap_ready == 1'b1) & (ap_sync_ready == 1'b0))) begin
        processAllCHout_U0_ap_ready_count <= (processAllCHout_U0_ap_ready_count + 2'd1);
    end
end

assign ImageCache_IBRAM_address0 = preloadPixelsAndPrec_U0_ImageCache_IBRAM_address0;

assign ImageCache_IBRAM_address1 = 15'd0;

assign ImageCache_IBRAM_ce0 = preloadPixelsAndPrec_U0_ImageCache_IBRAM_ce0;

assign ImageCache_IBRAM_ce1 = 1'b0;

assign ImageCache_IBRAM_d0 = 32'd0;

assign ImageCache_IBRAM_d1 = 32'd0;

assign ImageCache_IBRAM_we0 = 1'b0;

assign ImageCache_IBRAM_we1 = 1'b0;

assign OutputCache_OBRAM_address0 = processAllCHout_U0_OutputCache_OBRAM_address0;

assign OutputCache_OBRAM_address1 = processAllCHout_U0_OutputCache_OBRAM_address1;

assign OutputCache_OBRAM_ce0 = processAllCHout_U0_OutputCache_OBRAM_ce0;

assign OutputCache_OBRAM_ce1 = processAllCHout_U0_OutputCache_OBRAM_ce1;

assign OutputCache_OBRAM_d0 = processAllCHout_U0_OutputCache_OBRAM_d0;

assign OutputCache_OBRAM_d1 = processAllCHout_U0_OutputCache_OBRAM_d1;

assign OutputCache_OBRAM_we0 = processAllCHout_U0_OutputCache_OBRAM_we0;

assign OutputCache_OBRAM_we1 = processAllCHout_U0_OutputCache_OBRAM_we1;

assign WBRAM_0_0_0_address0 = processAllCHout_U0_WBRAM_0_0_0_address0;

assign WBRAM_0_0_0_address1 = 10'd0;

assign WBRAM_0_0_0_ce0 = processAllCHout_U0_WBRAM_0_0_0_ce0;

assign WBRAM_0_0_0_ce1 = 1'b0;

assign WBRAM_0_0_0_d0 = 32'd0;

assign WBRAM_0_0_0_d1 = 32'd0;

assign WBRAM_0_0_0_we0 = 1'b0;

assign WBRAM_0_0_0_we1 = 1'b0;

assign WBRAM_0_0_1_address0 = processAllCHout_U0_WBRAM_0_0_1_address0;

assign WBRAM_0_0_1_address1 = 10'd0;

assign WBRAM_0_0_1_ce0 = processAllCHout_U0_WBRAM_0_0_1_ce0;

assign WBRAM_0_0_1_ce1 = 1'b0;

assign WBRAM_0_0_1_d0 = 32'd0;

assign WBRAM_0_0_1_d1 = 32'd0;

assign WBRAM_0_0_1_we0 = 1'b0;

assign WBRAM_0_0_1_we1 = 1'b0;

assign WBRAM_0_0_2_address0 = processAllCHout_U0_WBRAM_0_0_2_address0;

assign WBRAM_0_0_2_address1 = 10'd0;

assign WBRAM_0_0_2_ce0 = processAllCHout_U0_WBRAM_0_0_2_ce0;

assign WBRAM_0_0_2_ce1 = 1'b0;

assign WBRAM_0_0_2_d0 = 32'd0;

assign WBRAM_0_0_2_d1 = 32'd0;

assign WBRAM_0_0_2_we0 = 1'b0;

assign WBRAM_0_0_2_we1 = 1'b0;

assign WBRAM_0_0_3_address0 = processAllCHout_U0_WBRAM_0_0_3_address0;

assign WBRAM_0_0_3_address1 = 10'd0;

assign WBRAM_0_0_3_ce0 = processAllCHout_U0_WBRAM_0_0_3_ce0;

assign WBRAM_0_0_3_ce1 = 1'b0;

assign WBRAM_0_0_3_d0 = 32'd0;

assign WBRAM_0_0_3_d1 = 32'd0;

assign WBRAM_0_0_3_we0 = 1'b0;

assign WBRAM_0_0_3_we1 = 1'b0;

assign WBRAM_0_0_4_address0 = processAllCHout_U0_WBRAM_0_0_4_address0;

assign WBRAM_0_0_4_address1 = 10'd0;

assign WBRAM_0_0_4_ce0 = processAllCHout_U0_WBRAM_0_0_4_ce0;

assign WBRAM_0_0_4_ce1 = 1'b0;

assign WBRAM_0_0_4_d0 = 32'd0;

assign WBRAM_0_0_4_d1 = 32'd0;

assign WBRAM_0_0_4_we0 = 1'b0;

assign WBRAM_0_0_4_we1 = 1'b0;

assign WBRAM_0_0_5_address0 = processAllCHout_U0_WBRAM_0_0_5_address0;

assign WBRAM_0_0_5_address1 = 10'd0;

assign WBRAM_0_0_5_ce0 = processAllCHout_U0_WBRAM_0_0_5_ce0;

assign WBRAM_0_0_5_ce1 = 1'b0;

assign WBRAM_0_0_5_d0 = 32'd0;

assign WBRAM_0_0_5_d1 = 32'd0;

assign WBRAM_0_0_5_we0 = 1'b0;

assign WBRAM_0_0_5_we1 = 1'b0;

assign WBRAM_0_0_6_address0 = processAllCHout_U0_WBRAM_0_0_6_address0;

assign WBRAM_0_0_6_address1 = 10'd0;

assign WBRAM_0_0_6_ce0 = processAllCHout_U0_WBRAM_0_0_6_ce0;

assign WBRAM_0_0_6_ce1 = 1'b0;

assign WBRAM_0_0_6_d0 = 32'd0;

assign WBRAM_0_0_6_d1 = 32'd0;

assign WBRAM_0_0_6_we0 = 1'b0;

assign WBRAM_0_0_6_we1 = 1'b0;

assign WBRAM_0_0_7_address0 = processAllCHout_U0_WBRAM_0_0_7_address0;

assign WBRAM_0_0_7_address1 = 10'd0;

assign WBRAM_0_0_7_ce0 = processAllCHout_U0_WBRAM_0_0_7_ce0;

assign WBRAM_0_0_7_ce1 = 1'b0;

assign WBRAM_0_0_7_d0 = 32'd0;

assign WBRAM_0_0_7_d1 = 32'd0;

assign WBRAM_0_0_7_we0 = 1'b0;

assign WBRAM_0_0_7_we1 = 1'b0;

assign WBRAM_0_0_8_address0 = processAllCHout_U0_WBRAM_0_0_8_address0;

assign WBRAM_0_0_8_address1 = 10'd0;

assign WBRAM_0_0_8_ce0 = processAllCHout_U0_WBRAM_0_0_8_ce0;

assign WBRAM_0_0_8_ce1 = 1'b0;

assign WBRAM_0_0_8_d0 = 32'd0;

assign WBRAM_0_0_8_d1 = 32'd0;

assign WBRAM_0_0_8_we0 = 1'b0;

assign WBRAM_0_0_8_we1 = 1'b0;

assign ap_channel_done_ci_offset_V = (preloadPixelsAndPrec_U0_ap_done & (ap_sync_reg_channel_write_ci_offset_V ^ 1'b1));

assign ap_channel_done_pixel_buffer_0 = (preloadPixelsAndPrec_U0_ap_done & (ap_sync_reg_channel_write_pixel_buffer_0 ^ 1'b1));

assign ap_channel_done_pixel_buffer_1 = (preloadPixelsAndPrec_U0_ap_done & (ap_sync_reg_channel_write_pixel_buffer_1 ^ 1'b1));

assign ap_channel_done_pixel_buffer_2 = (preloadPixelsAndPrec_U0_ap_done & (ap_sync_reg_channel_write_pixel_buffer_2 ^ 1'b1));

assign ap_channel_done_pixel_buffer_3 = (preloadPixelsAndPrec_U0_ap_done & (ap_sync_reg_channel_write_pixel_buffer_3 ^ 1'b1));

assign ap_channel_done_pixel_buffer_4 = (preloadPixelsAndPrec_U0_ap_done & (ap_sync_reg_channel_write_pixel_buffer_4 ^ 1'b1));

assign ap_channel_done_pixel_buffer_5 = (preloadPixelsAndPrec_U0_ap_done & (ap_sync_reg_channel_write_pixel_buffer_5 ^ 1'b1));

assign ap_channel_done_pixel_buffer_6 = (preloadPixelsAndPrec_U0_ap_done & (ap_sync_reg_channel_write_pixel_buffer_6 ^ 1'b1));

assign ap_channel_done_pixel_buffer_7 = (preloadPixelsAndPrec_U0_ap_done & (ap_sync_reg_channel_write_pixel_buffer_7 ^ 1'b1));

assign ap_channel_done_pixel_buffer_8 = (preloadPixelsAndPrec_U0_ap_done & (ap_sync_reg_channel_write_pixel_buffer_8 ^ 1'b1));

assign ap_done = processAllCHout_U0_ap_done;

assign ap_idle = (processAllCHout_U0_ap_idle & preloadPixelsAndPrec_U0_ap_idle & (pixel_buffer_8_empty_n ^ 1'b1) & (pixel_buffer_7_empty_n ^ 1'b1) & (pixel_buffer_6_empty_n ^ 1'b1) & (pixel_buffer_5_empty_n ^ 1'b1) & (pixel_buffer_4_empty_n ^ 1'b1) & (pixel_buffer_3_empty_n ^ 1'b1) & (pixel_buffer_2_empty_n ^ 1'b1) & (pixel_buffer_1_empty_n ^ 1'b1) & (pixel_buffer_0_empty_n ^ 1'b1) & (ci_offset_V_empty_n ^ 1'b1));

assign ap_ready = ap_sync_ready;

assign ap_sync_channel_write_ci_offset_V = ((ci_offset_V_full_n & ap_channel_done_ci_offset_V) | ap_sync_reg_channel_write_ci_offset_V);

assign ap_sync_channel_write_pixel_buffer_0 = ((pixel_buffer_0_full_n & ap_channel_done_pixel_buffer_0) | ap_sync_reg_channel_write_pixel_buffer_0);

assign ap_sync_channel_write_pixel_buffer_1 = ((pixel_buffer_1_full_n & ap_channel_done_pixel_buffer_1) | ap_sync_reg_channel_write_pixel_buffer_1);

assign ap_sync_channel_write_pixel_buffer_2 = ((pixel_buffer_2_full_n & ap_channel_done_pixel_buffer_2) | ap_sync_reg_channel_write_pixel_buffer_2);

assign ap_sync_channel_write_pixel_buffer_3 = ((pixel_buffer_3_full_n & ap_channel_done_pixel_buffer_3) | ap_sync_reg_channel_write_pixel_buffer_3);

assign ap_sync_channel_write_pixel_buffer_4 = ((pixel_buffer_4_full_n & ap_channel_done_pixel_buffer_4) | ap_sync_reg_channel_write_pixel_buffer_4);

assign ap_sync_channel_write_pixel_buffer_5 = ((pixel_buffer_5_full_n & ap_channel_done_pixel_buffer_5) | ap_sync_reg_channel_write_pixel_buffer_5);

assign ap_sync_channel_write_pixel_buffer_6 = ((pixel_buffer_6_full_n & ap_channel_done_pixel_buffer_6) | ap_sync_reg_channel_write_pixel_buffer_6);

assign ap_sync_channel_write_pixel_buffer_7 = ((pixel_buffer_7_full_n & ap_channel_done_pixel_buffer_7) | ap_sync_reg_channel_write_pixel_buffer_7);

assign ap_sync_channel_write_pixel_buffer_8 = ((pixel_buffer_8_full_n & ap_channel_done_pixel_buffer_8) | ap_sync_reg_channel_write_pixel_buffer_8);

assign ap_sync_continue = ap_continue;

assign ap_sync_done = processAllCHout_U0_ap_done;

assign ap_sync_preloadPixelsAndPrec_U0_ap_ready = (preloadPixelsAndPrec_U0_ap_ready | ap_sync_reg_preloadPixelsAndPrec_U0_ap_ready);

assign ap_sync_processAllCHout_U0_ap_ready = (processAllCHout_U0_ap_ready | ap_sync_reg_processAllCHout_U0_ap_ready);

assign ap_sync_ready = (ap_sync_processAllCHout_U0_ap_ready & ap_sync_preloadPixelsAndPrec_U0_ap_ready);

assign preloadPixelsAndPrec_U0_ap_continue = (ap_sync_channel_write_pixel_buffer_8 & ap_sync_channel_write_pixel_buffer_7 & ap_sync_channel_write_pixel_buffer_6 & ap_sync_channel_write_pixel_buffer_5 & ap_sync_channel_write_pixel_buffer_4 & ap_sync_channel_write_pixel_buffer_3 & ap_sync_channel_write_pixel_buffer_2 & ap_sync_channel_write_pixel_buffer_1 & ap_sync_channel_write_pixel_buffer_0 & ap_sync_channel_write_ci_offset_V);

assign preloadPixelsAndPrec_U0_ap_start = ((ap_sync_reg_preloadPixelsAndPrec_U0_ap_ready ^ 1'b1) & ap_start);

assign preloadPixelsAndPrec_U0_start_full_n = 1'b1;

assign preloadPixelsAndPrec_U0_start_write = 1'b0;

assign processAllCHout_U0_ap_continue = ap_continue;

assign processAllCHout_U0_ap_start = (pixel_buffer_8_empty_n & pixel_buffer_7_empty_n & pixel_buffer_6_empty_n & pixel_buffer_5_empty_n & pixel_buffer_4_empty_n & pixel_buffer_3_empty_n & pixel_buffer_2_empty_n & pixel_buffer_1_empty_n & pixel_buffer_0_empty_n & (ap_sync_reg_processAllCHout_U0_ap_ready ^ 1'b1) & ci_offset_V_empty_n & ap_start);

assign processAllCHout_U0_start_full_n = 1'b1;

assign processAllCHout_U0_start_write = 1'b0;

endmodule //processInputChannel_s
